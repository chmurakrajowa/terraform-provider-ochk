// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyImport KeyImport
//
// swagger:model KeyImport
type KeyImport struct {

	// algorithm
	Algorithm string `json:"algorithm,omitempty"`

	// key name
	KeyName string `json:"keyName,omitempty"`

	// key usage list
	KeyUsageList []string `json:"keyUsageList"`

	// material
	Material string `json:"material,omitempty"`

	// private key Id to unwrap
	PrivateKeyIDToUnwrap string `json:"privateKeyIdToUnwrap,omitempty"`

	// size
	Size int32 `json:"size,omitempty"`
}

// Validate validates this key import
func (m *KeyImport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyUsageList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var keyImportKeyUsageListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CERTIFICATE_SIGN","CONTENT_COMMITMENT","CRL_SIGN","DECRYPT","DERIVE_KEY","ENCRYPT","EXPORT_KEY","FPE_DECRYPT","FPE_ENCRYPT","GENERATE_CRYPTOGRAM","GENERATE_MAC","KEY_AGREEMENT","SIGN","TRANSLATE_DECRYPT","TRANSLATE_ENCRYPT","TRANSLATE_UNWRAP","TRANSLATE_WRAP","UNWRAP_KEY","VALIDATE_CRYPTOGRAM","VERIFY","VERIFY_MAC","WRAP_KEY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keyImportKeyUsageListItemsEnum = append(keyImportKeyUsageListItemsEnum, v)
	}
}

func (m *KeyImport) validateKeyUsageListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, keyImportKeyUsageListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KeyImport) validateKeyUsageList(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyUsageList) { // not required
		return nil
	}

	for i := 0; i < len(m.KeyUsageList); i++ {

		// value enum
		if err := m.validateKeyUsageListItemsEnum("keyUsageList"+"."+strconv.Itoa(i), "body", m.KeyUsageList[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyImport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyImport) UnmarshalBinary(b []byte) error {
	var res KeyImport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
