// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VRFReportElement VRFReportElement
//
// swagger:model VRFReportElement
type VRFReportElement struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// estimated cost
	EstimatedCost float32 `json:"estimatedCost,omitempty"`

	// insert date
	// Format: date-time
	InsertDate *strfmt.DateTime `json:"insertDate,omitempty"`

	// router Id
	RouterID string `json:"routerId,omitempty"`

	// total cost
	TotalCost float32 `json:"totalCost,omitempty"`

	// total days
	TotalDays int32 `json:"totalDays,omitempty"`

	// unit price
	UnitPrice float32 `json:"unitPrice,omitempty"`
}

// Validate validates this v r f report element
func (m *VRFReportElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInsertDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VRFReportElement) validateInsertDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InsertDate) { // not required
		return nil
	}

	if err := validate.FormatOf("insertDate", "body", "date-time", m.InsertDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v r f report element based on context it is used
func (m *VRFReportElement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VRFReportElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VRFReportElement) UnmarshalBinary(b []byte) error {
	var res VRFReportElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
