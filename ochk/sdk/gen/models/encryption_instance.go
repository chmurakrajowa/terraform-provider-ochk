// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EncryptionInstance EncryptionInstance
//
// swagger:model EncryptionInstance
type EncryptionInstance struct {

	// encrypt
	Encrypt bool `json:"encrypt,omitempty"`

	// encryption key Id
	EncryptionKeyID string `json:"encryptionKeyId,omitempty"`

	// encryption provider Id
	EncryptionProviderID string `json:"encryptionProviderId,omitempty"`

	// managed
	Managed bool `json:"managed,omitempty"`

	// recrypt operation
	// Enum: [DEEP NONE SHALLOW]
	RecryptOperation string `json:"recryptOperation,omitempty"`
}

// Validate validates this encryption instance
func (m *EncryptionInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecryptOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var encryptionInstanceTypeRecryptOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEEP","NONE","SHALLOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		encryptionInstanceTypeRecryptOperationPropEnum = append(encryptionInstanceTypeRecryptOperationPropEnum, v)
	}
}

const (

	// EncryptionInstanceRecryptOperationDEEP captures enum value "DEEP"
	EncryptionInstanceRecryptOperationDEEP string = "DEEP"

	// EncryptionInstanceRecryptOperationNONE captures enum value "NONE"
	EncryptionInstanceRecryptOperationNONE string = "NONE"

	// EncryptionInstanceRecryptOperationSHALLOW captures enum value "SHALLOW"
	EncryptionInstanceRecryptOperationSHALLOW string = "SHALLOW"
)

// prop value enum
func (m *EncryptionInstance) validateRecryptOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, encryptionInstanceTypeRecryptOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EncryptionInstance) validateRecryptOperation(formats strfmt.Registry) error {

	if swag.IsZero(m.RecryptOperation) { // not required
		return nil
	}

	// value enum
	if err := m.validateRecryptOperationEnum("recryptOperation", "body", m.RecryptOperation); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EncryptionInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EncryptionInstance) UnmarshalBinary(b []byte) error {
	var res EncryptionInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
