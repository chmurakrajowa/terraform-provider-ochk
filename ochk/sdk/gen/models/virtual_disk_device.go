// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualDiskDevice VirtualDiskDevice
//
// swagger:model VirtualDiskDevice
type VirtualDiskDevice struct {

	// controller Id
	ControllerID int32 `json:"controllerId,omitempty"`

	// lun Id
	LunID int32 `json:"lunId,omitempty"`

	// size m b
	SizeMB int64 `json:"sizeMB,omitempty"`

	// virtual disk device type
	// Enum: [SCSI]
	VirtualDiskDeviceType string `json:"virtualDiskDeviceType,omitempty"`
}

// Validate validates this virtual disk device
func (m *VirtualDiskDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVirtualDiskDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var virtualDiskDeviceTypeVirtualDiskDeviceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SCSI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualDiskDeviceTypeVirtualDiskDeviceTypePropEnum = append(virtualDiskDeviceTypeVirtualDiskDeviceTypePropEnum, v)
	}
}

const (

	// VirtualDiskDeviceVirtualDiskDeviceTypeSCSI captures enum value "SCSI"
	VirtualDiskDeviceVirtualDiskDeviceTypeSCSI string = "SCSI"
)

// prop value enum
func (m *VirtualDiskDevice) validateVirtualDiskDeviceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualDiskDeviceTypeVirtualDiskDeviceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualDiskDevice) validateVirtualDiskDeviceType(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualDiskDeviceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVirtualDiskDeviceTypeEnum("virtualDiskDeviceType", "body", m.VirtualDiskDeviceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualDiskDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualDiskDevice) UnmarshalBinary(b []byte) error {
	var res VirtualDiskDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
