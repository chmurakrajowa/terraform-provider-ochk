// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualNetworkInstance VirtualNetworkInstance
//
// swagger:model VirtualNetworkInstance
type VirtualNetworkInstance struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// dns search suffix
	DNSSearchSuffix string `json:"dnsSearchSuffix,omitempty"`

	// dns suffix
	DNSSuffix string `json:"dnsSuffix,omitempty"`

	// gateway address
	GatewayAddress string `json:"gatewayAddress,omitempty"`

	// ipam enabled
	IpamEnabled bool `json:"ipamEnabled,omitempty"`

	// primary Dns address
	PrimaryDNSAddress string `json:"primaryDnsAddress,omitempty"`

	// primary wins address
	PrimaryWinsAddress string `json:"primaryWinsAddress,omitempty"`

	// router ref Id
	RouterRefID string `json:"routerRefId,omitempty"`

	// secondary Dns address
	SecondaryDNSAddress string `json:"secondaryDnsAddress,omitempty"`

	// secondary wins address
	SecondaryWinsAddress string `json:"secondaryWinsAddress,omitempty"`

	// subnet
	Subnet *SegmentSubnetInstance `json:"subnet,omitempty"`

	// subnet mask
	SubnetMask string `json:"subnetMask,omitempty"`

	// subtenant ref ids
	SubtenantRefIds []string `json:"subtenantRefIds"`

	// virtual network Id
	VirtualNetworkID string `json:"virtualNetworkId,omitempty"`
}

// Validate validates this virtual network instance
func (m *VirtualNetworkInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkInstance) validateSubnet(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {
		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualNetworkInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualNetworkInstance) UnmarshalBinary(b []byte) error {
	var res VirtualNetworkInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
