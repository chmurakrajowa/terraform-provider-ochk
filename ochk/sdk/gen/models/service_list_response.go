// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceListResponse ServiceListResponse
//
// swagger:model ServiceListResponse
type ServiceListResponse struct {

	// messages
	Messages string `json:"messages,omitempty"`

	// service instance collection
	ServiceInstanceCollection []*ServiceInstance `json:"serviceInstanceCollection"`

	// success
	Success bool `json:"success,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this service list response
func (m *ServiceListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceInstanceCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceListResponse) validateServiceInstanceCollection(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceInstanceCollection) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceInstanceCollection); i++ {
		if swag.IsZero(m.ServiceInstanceCollection[i]) { // not required
			continue
		}

		if m.ServiceInstanceCollection[i] != nil {
			if err := m.ServiceInstanceCollection[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceInstanceCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceListResponse) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceListResponse) UnmarshalBinary(b []byte) error {
	var res ServiceListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
