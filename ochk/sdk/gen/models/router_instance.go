// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouterInstance RouterInstance
//
// swagger:model RouterInstance
type RouterInstance struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// modification date
	// Format: date-time
	ModificationDate *strfmt.DateTime `json:"modificationDate,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// parent t0 Id
	ParentT0ID string `json:"parentT0Id,omitempty"`

	// router Id
	RouterID string `json:"routerId,omitempty"`

	// router type
	// Enum: [TIER0 TIER1]
	RouterType string `json:"routerType,omitempty"`
}

// Validate validates this router instance
func (m *RouterInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouterInstance) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RouterInstance) validateModificationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var routerInstanceTypeRouterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TIER0","TIER1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routerInstanceTypeRouterTypePropEnum = append(routerInstanceTypeRouterTypePropEnum, v)
	}
}

const (

	// RouterInstanceRouterTypeTIER0 captures enum value "TIER0"
	RouterInstanceRouterTypeTIER0 string = "TIER0"

	// RouterInstanceRouterTypeTIER1 captures enum value "TIER1"
	RouterInstanceRouterTypeTIER1 string = "TIER1"
)

// prop value enum
func (m *RouterInstance) validateRouterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routerInstanceTypeRouterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RouterInstance) validateRouterType(formats strfmt.Registry) error {

	if swag.IsZero(m.RouterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRouterTypeEnum("routerType", "body", m.RouterType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouterInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouterInstance) UnmarshalBinary(b []byte) error {
	var res RouterInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
