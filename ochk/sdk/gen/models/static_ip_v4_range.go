// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StaticIPV4Range StaticIPv4Range
//
// swagger:model StaticIPv4Range
type StaticIPV4Range struct {

	// begin IPv4 address
	BeginIPV4Address string `json:"beginIPv4Address,omitempty"`

	// created date
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// defined addresses
	DefinedAddresses []*StaticIPV4Address `json:"definedAddresses"`

	// description
	Description string `json:"description,omitempty"`

	// end IPv4 address
	EndIPV4Address string `json:"endIPv4Address,omitempty"`

	// external external Id
	ExternalExternalID string `json:"externalExternalId,omitempty"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// state
	// Enum: [ALLOCATED DESTROYED EXPIRED UNALLOCATED]
	State string `json:"state,omitempty"`

	// static IPv4 range Id
	StaticIPV4RangeID string `json:"staticIPv4RangeId,omitempty"`
}

// Validate validates this static IPv4 range
func (m *StaticIPV4Range) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinedAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StaticIPV4Range) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StaticIPV4Range) validateDefinedAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.DefinedAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.DefinedAddresses); i++ {
		if swag.IsZero(m.DefinedAddresses[i]) { // not required
			continue
		}

		if m.DefinedAddresses[i] != nil {
			if err := m.DefinedAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("definedAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StaticIPV4Range) validateLastModifiedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var staticIpv4RangeTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALLOCATED","DESTROYED","EXPIRED","UNALLOCATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		staticIpv4RangeTypeStatePropEnum = append(staticIpv4RangeTypeStatePropEnum, v)
	}
}

const (

	// StaticIPV4RangeStateALLOCATED captures enum value "ALLOCATED"
	StaticIPV4RangeStateALLOCATED string = "ALLOCATED"

	// StaticIPV4RangeStateDESTROYED captures enum value "DESTROYED"
	StaticIPV4RangeStateDESTROYED string = "DESTROYED"

	// StaticIPV4RangeStateEXPIRED captures enum value "EXPIRED"
	StaticIPV4RangeStateEXPIRED string = "EXPIRED"

	// StaticIPV4RangeStateUNALLOCATED captures enum value "UNALLOCATED"
	StaticIPV4RangeStateUNALLOCATED string = "UNALLOCATED"
)

// prop value enum
func (m *StaticIPV4Range) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, staticIpv4RangeTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StaticIPV4Range) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StaticIPV4Range) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StaticIPV4Range) UnmarshalBinary(b []byte) error {
	var res StaticIPV4Range
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
