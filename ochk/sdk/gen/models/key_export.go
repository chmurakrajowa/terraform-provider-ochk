// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyExport KeyExport
//
// swagger:model KeyExport
type KeyExport struct {

	// format
	// Enum: [pkcs1 pkcs8]
	Format string `json:"format,omitempty"`

	// wrap public key
	WrapPublicKey string `json:"wrapPublicKey,omitempty"`
}

// Validate validates this key export
func (m *KeyExport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var keyExportTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pkcs1","pkcs8"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keyExportTypeFormatPropEnum = append(keyExportTypeFormatPropEnum, v)
	}
}

const (

	// KeyExportFormatPkcs1 captures enum value "pkcs1"
	KeyExportFormatPkcs1 string = "pkcs1"

	// KeyExportFormatPkcs8 captures enum value "pkcs8"
	KeyExportFormatPkcs8 string = "pkcs8"
)

// prop value enum
func (m *KeyExport) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, keyExportTypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KeyExport) validateFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.Format) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyExport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyExport) UnmarshalBinary(b []byte) error {
	var res KeyExport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
