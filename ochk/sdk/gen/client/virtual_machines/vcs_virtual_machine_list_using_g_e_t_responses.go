// Code generated by go-swagger; DO NOT EDIT.

package virtual_machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// VcsVirtualMachineListUsingGETReader is a Reader for the VcsVirtualMachineListUsingGET structure.
type VcsVirtualMachineListUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VcsVirtualMachineListUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVcsVirtualMachineListUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVcsVirtualMachineListUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVcsVirtualMachineListUsingGETOK creates a VcsVirtualMachineListUsingGETOK with default headers values
func NewVcsVirtualMachineListUsingGETOK() *VcsVirtualMachineListUsingGETOK {
	return &VcsVirtualMachineListUsingGETOK{}
}

/*
VcsVirtualMachineListUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type VcsVirtualMachineListUsingGETOK struct {
	Payload *models.VcsVirtualMachineListResponse
}

// IsSuccess returns true when this vcs virtual machine list using g e t o k response has a 2xx status code
func (o *VcsVirtualMachineListUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this vcs virtual machine list using g e t o k response has a 3xx status code
func (o *VcsVirtualMachineListUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vcs virtual machine list using g e t o k response has a 4xx status code
func (o *VcsVirtualMachineListUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this vcs virtual machine list using g e t o k response has a 5xx status code
func (o *VcsVirtualMachineListUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this vcs virtual machine list using g e t o k response a status code equal to that given
func (o *VcsVirtualMachineListUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the vcs virtual machine list using g e t o k response
func (o *VcsVirtualMachineListUsingGETOK) Code() int {
	return 200
}

func (o *VcsVirtualMachineListUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] vcsVirtualMachineListUsingGETOK  %+v", 200, o.Payload)
}

func (o *VcsVirtualMachineListUsingGETOK) String() string {
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] vcsVirtualMachineListUsingGETOK  %+v", 200, o.Payload)
}

func (o *VcsVirtualMachineListUsingGETOK) GetPayload() *models.VcsVirtualMachineListResponse {
	return o.Payload
}

func (o *VcsVirtualMachineListUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VcsVirtualMachineListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVcsVirtualMachineListUsingGETBadRequest creates a VcsVirtualMachineListUsingGETBadRequest with default headers values
func NewVcsVirtualMachineListUsingGETBadRequest() *VcsVirtualMachineListUsingGETBadRequest {
	return &VcsVirtualMachineListUsingGETBadRequest{}
}

/*
VcsVirtualMachineListUsingGETBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type VcsVirtualMachineListUsingGETBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this vcs virtual machine list using g e t bad request response has a 2xx status code
func (o *VcsVirtualMachineListUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vcs virtual machine list using g e t bad request response has a 3xx status code
func (o *VcsVirtualMachineListUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vcs virtual machine list using g e t bad request response has a 4xx status code
func (o *VcsVirtualMachineListUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this vcs virtual machine list using g e t bad request response has a 5xx status code
func (o *VcsVirtualMachineListUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this vcs virtual machine list using g e t bad request response a status code equal to that given
func (o *VcsVirtualMachineListUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the vcs virtual machine list using g e t bad request response
func (o *VcsVirtualMachineListUsingGETBadRequest) Code() int {
	return 400
}

func (o *VcsVirtualMachineListUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] vcsVirtualMachineListUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *VcsVirtualMachineListUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] vcsVirtualMachineListUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *VcsVirtualMachineListUsingGETBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *VcsVirtualMachineListUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
