// Code generated by go-swagger; DO NOT EDIT.

package virtual_machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewVcsVirtualMachineSnapshotRevertUsingPOSTParams creates a new VcsVirtualMachineSnapshotRevertUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVcsVirtualMachineSnapshotRevertUsingPOSTParams() *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	return &VcsVirtualMachineSnapshotRevertUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVcsVirtualMachineSnapshotRevertUsingPOSTParamsWithTimeout creates a new VcsVirtualMachineSnapshotRevertUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewVcsVirtualMachineSnapshotRevertUsingPOSTParamsWithTimeout(timeout time.Duration) *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	return &VcsVirtualMachineSnapshotRevertUsingPOSTParams{
		timeout: timeout,
	}
}

// NewVcsVirtualMachineSnapshotRevertUsingPOSTParamsWithContext creates a new VcsVirtualMachineSnapshotRevertUsingPOSTParams object
// with the ability to set a context for a request.
func NewVcsVirtualMachineSnapshotRevertUsingPOSTParamsWithContext(ctx context.Context) *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	return &VcsVirtualMachineSnapshotRevertUsingPOSTParams{
		Context: ctx,
	}
}

// NewVcsVirtualMachineSnapshotRevertUsingPOSTParamsWithHTTPClient creates a new VcsVirtualMachineSnapshotRevertUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewVcsVirtualMachineSnapshotRevertUsingPOSTParamsWithHTTPClient(client *http.Client) *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	return &VcsVirtualMachineSnapshotRevertUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
VcsVirtualMachineSnapshotRevertUsingPOSTParams contains all the parameters to send to the API endpoint

	for the vcs virtual machine snapshot revert using p o s t operation.

	Typically these are written to a http.Request.
*/
type VcsVirtualMachineSnapshotRevertUsingPOSTParams struct {

	/* SnapshotID.

	   snapshotId
	*/
	SnapshotID string

	/* VirtualMachineID.

	   virtualMachineId
	*/
	VirtualMachineID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the vcs virtual machine snapshot revert using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) WithDefaults() *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the vcs virtual machine snapshot revert using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) WithTimeout(timeout time.Duration) *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) WithContext(ctx context.Context) *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) WithHTTPClient(client *http.Client) *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSnapshotID adds the snapshotID to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) WithSnapshotID(snapshotID string) *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	o.SetSnapshotID(snapshotID)
	return o
}

// SetSnapshotID adds the snapshotId to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) SetSnapshotID(snapshotID string) {
	o.SnapshotID = snapshotID
}

// WithVirtualMachineID adds the virtualMachineID to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) WithVirtualMachineID(virtualMachineID string) *VcsVirtualMachineSnapshotRevertUsingPOSTParams {
	o.SetVirtualMachineID(virtualMachineID)
	return o
}

// SetVirtualMachineID adds the virtualMachineId to the vcs virtual machine snapshot revert using p o s t params
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) SetVirtualMachineID(virtualMachineID string) {
	o.VirtualMachineID = virtualMachineID
}

// WriteToRequest writes these params to a swagger request
func (o *VcsVirtualMachineSnapshotRevertUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param snapshotId
	if err := r.SetPathParam("snapshotId", o.SnapshotID); err != nil {
		return err
	}

	// path param virtualMachineId
	if err := r.SetPathParam("virtualMachineId", o.VirtualMachineID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
