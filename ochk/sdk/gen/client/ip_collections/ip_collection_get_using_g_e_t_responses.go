// Code generated by go-swagger; DO NOT EDIT.

package ip_collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// IPCollectionGetUsingGETReader is a Reader for the IPCollectionGetUsingGET structure.
type IPCollectionGetUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IPCollectionGetUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIPCollectionGetUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIPCollectionGetUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIPCollectionGetUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIPCollectionGetUsingGETOK creates a IPCollectionGetUsingGETOK with default headers values
func NewIPCollectionGetUsingGETOK() *IPCollectionGetUsingGETOK {
	return &IPCollectionGetUsingGETOK{}
}

/*IPCollectionGetUsingGETOK handles this case with default header values.

OK
*/
type IPCollectionGetUsingGETOK struct {
	Payload *models.IPCollectionResponse
}

func (o *IPCollectionGetUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] ipCollectionGetUsingGETOK  %+v", 200, o.Payload)
}

func (o *IPCollectionGetUsingGETOK) GetPayload() *models.IPCollectionResponse {
	return o.Payload
}

func (o *IPCollectionGetUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IPCollectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIPCollectionGetUsingGETBadRequest creates a IPCollectionGetUsingGETBadRequest with default headers values
func NewIPCollectionGetUsingGETBadRequest() *IPCollectionGetUsingGETBadRequest {
	return &IPCollectionGetUsingGETBadRequest{}
}

/*IPCollectionGetUsingGETBadRequest handles this case with default header values.

Bad request, error occurred. For more details see log messages.
*/
type IPCollectionGetUsingGETBadRequest struct {
	Payload *models.ProxyResponseMessage
}

func (o *IPCollectionGetUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] ipCollectionGetUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *IPCollectionGetUsingGETBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *IPCollectionGetUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIPCollectionGetUsingGETNotFound creates a IPCollectionGetUsingGETNotFound with default headers values
func NewIPCollectionGetUsingGETNotFound() *IPCollectionGetUsingGETNotFound {
	return &IPCollectionGetUsingGETNotFound{}
}

/*IPCollectionGetUsingGETNotFound handles this case with default header values.

Entity not found.
*/
type IPCollectionGetUsingGETNotFound struct {
}

func (o *IPCollectionGetUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] ipCollectionGetUsingGETNotFound ", 404)
}

func (o *IPCollectionGetUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
