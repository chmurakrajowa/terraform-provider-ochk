// Code generated by go-swagger; DO NOT EDIT.

package ip_collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ip collections API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ip collections API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	IPCollectionCreateUsingPUT(params *IPCollectionCreateUsingPUTParams) (*IPCollectionCreateUsingPUTOK, *IPCollectionCreateUsingPUTCreated, error)

	IPCollectionDeleteUsingDELETE(params *IPCollectionDeleteUsingDELETEParams) (*IPCollectionDeleteUsingDELETEOK, error)

	IPCollectionGetUsingGET(params *IPCollectionGetUsingGETParams) (*IPCollectionGetUsingGETOK, error)

	IPCollectionListUsingGET(params *IPCollectionListUsingGETParams) (*IPCollectionListUsingGETOK, error)

	IPCollectionUpdateUsingPUT(params *IPCollectionUpdateUsingPUTParams) (*IPCollectionUpdateUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  IPCollectionCreateUsingPUT creates

  Create Ip collection
*/
func (a *Client) IPCollectionCreateUsingPUT(params *IPCollectionCreateUsingPUTParams) (*IPCollectionCreateUsingPUTOK, *IPCollectionCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPCollectionCreateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ipCollectionCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/ipcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IPCollectionCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *IPCollectionCreateUsingPUTOK:
		return value, nil, nil
	case *IPCollectionCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ip_collections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPCollectionDeleteUsingDELETE deletes

  Delete ip collection
*/
func (a *Client) IPCollectionDeleteUsingDELETE(params *IPCollectionDeleteUsingDELETEParams) (*IPCollectionDeleteUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPCollectionDeleteUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ipCollectionDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/ipcs/{ipCollectionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IPCollectionDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPCollectionDeleteUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ipCollectionDeleteUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPCollectionGetUsingGET gets

  Get ip collection
*/
func (a *Client) IPCollectionGetUsingGET(params *IPCollectionGetUsingGETParams) (*IPCollectionGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPCollectionGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ipCollectionGetUsingGET",
		Method:             "GET",
		PathPattern:        "/ipcs/{ipCollectionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IPCollectionGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPCollectionGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ipCollectionGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPCollectionListUsingGET lists

  List ip collection
*/
func (a *Client) IPCollectionListUsingGET(params *IPCollectionListUsingGETParams) (*IPCollectionListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPCollectionListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ipCollectionListUsingGET",
		Method:             "GET",
		PathPattern:        "/ipcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IPCollectionListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPCollectionListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ipCollectionListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPCollectionUpdateUsingPUT updates

  Update ip collection
*/
func (a *Client) IPCollectionUpdateUsingPUT(params *IPCollectionUpdateUsingPUTParams) (*IPCollectionUpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPCollectionUpdateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ipCollectionUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/ipcs/{ipCollectionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IPCollectionUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPCollectionUpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ipCollectionUpdateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
