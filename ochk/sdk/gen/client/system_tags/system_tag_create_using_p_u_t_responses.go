// Code generated by go-swagger; DO NOT EDIT.

package system_tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// SystemTagCreateUsingPUTReader is a Reader for the SystemTagCreateUsingPUT structure.
type SystemTagCreateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SystemTagCreateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSystemTagCreateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewSystemTagCreateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSystemTagCreateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSystemTagCreateUsingPUTOK creates a SystemTagCreateUsingPUTOK with default headers values
func NewSystemTagCreateUsingPUTOK() *SystemTagCreateUsingPUTOK {
	return &SystemTagCreateUsingPUTOK{}
}

/*SystemTagCreateUsingPUTOK handles this case with default header values.

OK
*/
type SystemTagCreateUsingPUTOK struct {
	Payload *models.SystemTagCreateResponse
}

func (o *SystemTagCreateUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /tags/systemTags][%d] systemTagCreateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *SystemTagCreateUsingPUTOK) GetPayload() *models.SystemTagCreateResponse {
	return o.Payload
}

func (o *SystemTagCreateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SystemTagCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemTagCreateUsingPUTCreated creates a SystemTagCreateUsingPUTCreated with default headers values
func NewSystemTagCreateUsingPUTCreated() *SystemTagCreateUsingPUTCreated {
	return &SystemTagCreateUsingPUTCreated{}
}

/*SystemTagCreateUsingPUTCreated handles this case with default header values.

Entity has been created
*/
type SystemTagCreateUsingPUTCreated struct {
	Payload *models.SystemTagCreateResponse
}

func (o *SystemTagCreateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /tags/systemTags][%d] systemTagCreateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *SystemTagCreateUsingPUTCreated) GetPayload() *models.SystemTagCreateResponse {
	return o.Payload
}

func (o *SystemTagCreateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SystemTagCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemTagCreateUsingPUTBadRequest creates a SystemTagCreateUsingPUTBadRequest with default headers values
func NewSystemTagCreateUsingPUTBadRequest() *SystemTagCreateUsingPUTBadRequest {
	return &SystemTagCreateUsingPUTBadRequest{}
}

/*SystemTagCreateUsingPUTBadRequest handles this case with default header values.

Bad request, error occurred. For more details see log messages.
*/
type SystemTagCreateUsingPUTBadRequest struct {
	Payload *models.ProxyResponseMessage
}

func (o *SystemTagCreateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /tags/systemTags][%d] systemTagCreateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *SystemTagCreateUsingPUTBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *SystemTagCreateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
