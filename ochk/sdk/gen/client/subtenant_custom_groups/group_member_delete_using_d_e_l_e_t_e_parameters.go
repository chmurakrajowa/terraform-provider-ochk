// Code generated by go-swagger; DO NOT EDIT.

package subtenant_custom_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGroupMemberDeleteUsingDELETEParams creates a new GroupMemberDeleteUsingDELETEParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGroupMemberDeleteUsingDELETEParams() *GroupMemberDeleteUsingDELETEParams {
	return &GroupMemberDeleteUsingDELETEParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGroupMemberDeleteUsingDELETEParamsWithTimeout creates a new GroupMemberDeleteUsingDELETEParams object
// with the ability to set a timeout on a request.
func NewGroupMemberDeleteUsingDELETEParamsWithTimeout(timeout time.Duration) *GroupMemberDeleteUsingDELETEParams {
	return &GroupMemberDeleteUsingDELETEParams{
		timeout: timeout,
	}
}

// NewGroupMemberDeleteUsingDELETEParamsWithContext creates a new GroupMemberDeleteUsingDELETEParams object
// with the ability to set a context for a request.
func NewGroupMemberDeleteUsingDELETEParamsWithContext(ctx context.Context) *GroupMemberDeleteUsingDELETEParams {
	return &GroupMemberDeleteUsingDELETEParams{
		Context: ctx,
	}
}

// NewGroupMemberDeleteUsingDELETEParamsWithHTTPClient creates a new GroupMemberDeleteUsingDELETEParams object
// with the ability to set a custom HTTPClient for a request.
func NewGroupMemberDeleteUsingDELETEParamsWithHTTPClient(client *http.Client) *GroupMemberDeleteUsingDELETEParams {
	return &GroupMemberDeleteUsingDELETEParams{
		HTTPClient: client,
	}
}

/* GroupMemberDeleteUsingDELETEParams contains all the parameters to send to the API endpoint
   for the group member delete using d e l e t e operation.

   Typically these are written to a http.Request.
*/
type GroupMemberDeleteUsingDELETEParams struct {

	/* GroupID.

	   groupId
	*/
	GroupID string

	/* ParentGroupID.

	   parentGroupId
	*/
	ParentGroupID string

	/* SubtenantID.

	   subtenantId
	*/
	SubtenantID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the group member delete using d e l e t e params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GroupMemberDeleteUsingDELETEParams) WithDefaults() *GroupMemberDeleteUsingDELETEParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the group member delete using d e l e t e params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GroupMemberDeleteUsingDELETEParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) WithTimeout(timeout time.Duration) *GroupMemberDeleteUsingDELETEParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) WithContext(ctx context.Context) *GroupMemberDeleteUsingDELETEParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) WithHTTPClient(client *http.Client) *GroupMemberDeleteUsingDELETEParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupID adds the groupID to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) WithGroupID(groupID string) *GroupMemberDeleteUsingDELETEParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) SetGroupID(groupID string) {
	o.GroupID = groupID
}

// WithParentGroupID adds the parentGroupID to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) WithParentGroupID(parentGroupID string) *GroupMemberDeleteUsingDELETEParams {
	o.SetParentGroupID(parentGroupID)
	return o
}

// SetParentGroupID adds the parentGroupId to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) SetParentGroupID(parentGroupID string) {
	o.ParentGroupID = parentGroupID
}

// WithSubtenantID adds the subtenantID to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) WithSubtenantID(subtenantID string) *GroupMemberDeleteUsingDELETEParams {
	o.SetSubtenantID(subtenantID)
	return o
}

// SetSubtenantID adds the subtenantId to the group member delete using d e l e t e params
func (o *GroupMemberDeleteUsingDELETEParams) SetSubtenantID(subtenantID string) {
	o.SubtenantID = subtenantID
}

// WriteToRequest writes these params to a swagger request
func (o *GroupMemberDeleteUsingDELETEParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param groupId
	if err := r.SetPathParam("groupId", o.GroupID); err != nil {
		return err
	}

	// path param parentGroupId
	if err := r.SetPathParam("parentGroupId", o.ParentGroupID); err != nil {
		return err
	}

	// path param subtenantId
	if err := r.SetPathParam("subtenantId", o.SubtenantID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
