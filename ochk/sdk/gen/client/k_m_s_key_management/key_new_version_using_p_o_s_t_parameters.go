// Code generated by go-swagger; DO NOT EDIT.

package k_m_s_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewKeyNewVersionUsingPOSTParams creates a new KeyNewVersionUsingPOSTParams object
// with the default values initialized.
func NewKeyNewVersionUsingPOSTParams() *KeyNewVersionUsingPOSTParams {
	var ()
	return &KeyNewVersionUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewKeyNewVersionUsingPOSTParamsWithTimeout creates a new KeyNewVersionUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewKeyNewVersionUsingPOSTParamsWithTimeout(timeout time.Duration) *KeyNewVersionUsingPOSTParams {
	var ()
	return &KeyNewVersionUsingPOSTParams{

		timeout: timeout,
	}
}

// NewKeyNewVersionUsingPOSTParamsWithContext creates a new KeyNewVersionUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewKeyNewVersionUsingPOSTParamsWithContext(ctx context.Context) *KeyNewVersionUsingPOSTParams {
	var ()
	return &KeyNewVersionUsingPOSTParams{

		Context: ctx,
	}
}

// NewKeyNewVersionUsingPOSTParamsWithHTTPClient creates a new KeyNewVersionUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewKeyNewVersionUsingPOSTParamsWithHTTPClient(client *http.Client) *KeyNewVersionUsingPOSTParams {
	var ()
	return &KeyNewVersionUsingPOSTParams{
		HTTPClient: client,
	}
}

/*KeyNewVersionUsingPOSTParams contains all the parameters to send to the API endpoint
for the key new version using p o s t operation typically these are written to a http.Request
*/
type KeyNewVersionUsingPOSTParams struct {

	/*ID
	  id

	*/
	ID string
	/*KeyNewVersion
	  keyNewVersion

	*/
	KeyNewVersion *models.KeyNewVersion

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) WithTimeout(timeout time.Duration) *KeyNewVersionUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) WithContext(ctx context.Context) *KeyNewVersionUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) WithHTTPClient(client *http.Client) *KeyNewVersionUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) WithID(id string) *KeyNewVersionUsingPOSTParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) SetID(id string) {
	o.ID = id
}

// WithKeyNewVersion adds the keyNewVersion to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) WithKeyNewVersion(keyNewVersion *models.KeyNewVersion) *KeyNewVersionUsingPOSTParams {
	o.SetKeyNewVersion(keyNewVersion)
	return o
}

// SetKeyNewVersion adds the keyNewVersion to the key new version using p o s t params
func (o *KeyNewVersionUsingPOSTParams) SetKeyNewVersion(keyNewVersion *models.KeyNewVersion) {
	o.KeyNewVersion = keyNewVersion
}

// WriteToRequest writes these params to a swagger request
func (o *KeyNewVersionUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.KeyNewVersion != nil {
		if err := r.SetBodyParam(o.KeyNewVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
