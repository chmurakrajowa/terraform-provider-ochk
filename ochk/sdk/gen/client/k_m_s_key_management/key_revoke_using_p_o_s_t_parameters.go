// Code generated by go-swagger; DO NOT EDIT.

package k_m_s_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewKeyRevokeUsingPOSTParams creates a new KeyRevokeUsingPOSTParams object
// with the default values initialized.
func NewKeyRevokeUsingPOSTParams() *KeyRevokeUsingPOSTParams {
	var ()
	return &KeyRevokeUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewKeyRevokeUsingPOSTParamsWithTimeout creates a new KeyRevokeUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewKeyRevokeUsingPOSTParamsWithTimeout(timeout time.Duration) *KeyRevokeUsingPOSTParams {
	var ()
	return &KeyRevokeUsingPOSTParams{

		timeout: timeout,
	}
}

// NewKeyRevokeUsingPOSTParamsWithContext creates a new KeyRevokeUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewKeyRevokeUsingPOSTParamsWithContext(ctx context.Context) *KeyRevokeUsingPOSTParams {
	var ()
	return &KeyRevokeUsingPOSTParams{

		Context: ctx,
	}
}

// NewKeyRevokeUsingPOSTParamsWithHTTPClient creates a new KeyRevokeUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewKeyRevokeUsingPOSTParamsWithHTTPClient(client *http.Client) *KeyRevokeUsingPOSTParams {
	var ()
	return &KeyRevokeUsingPOSTParams{
		HTTPClient: client,
	}
}

/*KeyRevokeUsingPOSTParams contains all the parameters to send to the API endpoint
for the key revoke using p o s t operation typically these are written to a http.Request
*/
type KeyRevokeUsingPOSTParams struct {

	/*ID
	  id

	*/
	ID string
	/*KeyRevocation
	  keyRevocation

	*/
	KeyRevocation *models.KeyRevocation

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) WithTimeout(timeout time.Duration) *KeyRevokeUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) WithContext(ctx context.Context) *KeyRevokeUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) WithHTTPClient(client *http.Client) *KeyRevokeUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) WithID(id string) *KeyRevokeUsingPOSTParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) SetID(id string) {
	o.ID = id
}

// WithKeyRevocation adds the keyRevocation to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) WithKeyRevocation(keyRevocation *models.KeyRevocation) *KeyRevokeUsingPOSTParams {
	o.SetKeyRevocation(keyRevocation)
	return o
}

// SetKeyRevocation adds the keyRevocation to the key revoke using p o s t params
func (o *KeyRevokeUsingPOSTParams) SetKeyRevocation(keyRevocation *models.KeyRevocation) {
	o.KeyRevocation = keyRevocation
}

// WriteToRequest writes these params to a swagger request
func (o *KeyRevokeUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.KeyRevocation != nil {
		if err := r.SetBodyParam(o.KeyRevocation); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
