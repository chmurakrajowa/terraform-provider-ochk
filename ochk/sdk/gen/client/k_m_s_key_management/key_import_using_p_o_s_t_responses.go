// Code generated by go-swagger; DO NOT EDIT.

package k_m_s_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// KeyImportUsingPOSTReader is a Reader for the KeyImportUsingPOST structure.
type KeyImportUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KeyImportUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKeyImportUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewKeyImportUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKeyImportUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewKeyImportUsingPOSTOK creates a KeyImportUsingPOSTOK with default headers values
func NewKeyImportUsingPOSTOK() *KeyImportUsingPOSTOK {
	return &KeyImportUsingPOSTOK{}
}

/*KeyImportUsingPOSTOK handles this case with default header values.

OK
*/
type KeyImportUsingPOSTOK struct {
	Payload *models.ImportKmsKeyResponse
}

func (o *KeyImportUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /kms/key/import][%d] keyImportUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *KeyImportUsingPOSTOK) GetPayload() *models.ImportKmsKeyResponse {
	return o.Payload
}

func (o *KeyImportUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImportKmsKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeyImportUsingPOSTCreated creates a KeyImportUsingPOSTCreated with default headers values
func NewKeyImportUsingPOSTCreated() *KeyImportUsingPOSTCreated {
	return &KeyImportUsingPOSTCreated{}
}

/*KeyImportUsingPOSTCreated handles this case with default header values.

Entity has been imported
*/
type KeyImportUsingPOSTCreated struct {
	Payload *models.ImportKmsKeyResponse
}

func (o *KeyImportUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /kms/key/import][%d] keyImportUsingPOSTCreated  %+v", 201, o.Payload)
}

func (o *KeyImportUsingPOSTCreated) GetPayload() *models.ImportKmsKeyResponse {
	return o.Payload
}

func (o *KeyImportUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImportKmsKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeyImportUsingPOSTBadRequest creates a KeyImportUsingPOSTBadRequest with default headers values
func NewKeyImportUsingPOSTBadRequest() *KeyImportUsingPOSTBadRequest {
	return &KeyImportUsingPOSTBadRequest{}
}

/*KeyImportUsingPOSTBadRequest handles this case with default header values.

Bad request, error occurred. For more details see log messages.
*/
type KeyImportUsingPOSTBadRequest struct {
	Payload *models.ProxyResponseMessage
}

func (o *KeyImportUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /kms/key/import][%d] keyImportUsingPOSTBadRequest  %+v", 400, o.Payload)
}

func (o *KeyImportUsingPOSTBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *KeyImportUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
