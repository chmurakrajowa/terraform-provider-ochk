// Code generated by go-swagger; DO NOT EDIT.

package k_m_s_key_rotation_scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewKeyRotationScheduleUpdateUsingPUTParams creates a new KeyRotationScheduleUpdateUsingPUTParams object
// with the default values initialized.
func NewKeyRotationScheduleUpdateUsingPUTParams() *KeyRotationScheduleUpdateUsingPUTParams {
	var ()
	return &KeyRotationScheduleUpdateUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewKeyRotationScheduleUpdateUsingPUTParamsWithTimeout creates a new KeyRotationScheduleUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewKeyRotationScheduleUpdateUsingPUTParamsWithTimeout(timeout time.Duration) *KeyRotationScheduleUpdateUsingPUTParams {
	var ()
	return &KeyRotationScheduleUpdateUsingPUTParams{

		timeout: timeout,
	}
}

// NewKeyRotationScheduleUpdateUsingPUTParamsWithContext creates a new KeyRotationScheduleUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewKeyRotationScheduleUpdateUsingPUTParamsWithContext(ctx context.Context) *KeyRotationScheduleUpdateUsingPUTParams {
	var ()
	return &KeyRotationScheduleUpdateUsingPUTParams{

		Context: ctx,
	}
}

// NewKeyRotationScheduleUpdateUsingPUTParamsWithHTTPClient creates a new KeyRotationScheduleUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewKeyRotationScheduleUpdateUsingPUTParamsWithHTTPClient(client *http.Client) *KeyRotationScheduleUpdateUsingPUTParams {
	var ()
	return &KeyRotationScheduleUpdateUsingPUTParams{
		HTTPClient: client,
	}
}

/*KeyRotationScheduleUpdateUsingPUTParams contains all the parameters to send to the API endpoint
for the key rotation schedule update using p u t operation typically these are written to a http.Request
*/
type KeyRotationScheduleUpdateUsingPUTParams struct {

	/*KeyID
	  keyId

	*/
	KeyID string
	/*KeyRotationSchedule
	  keyRotationSchedule

	*/
	KeyRotationSchedule *models.KeyRotationSchedule

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) WithTimeout(timeout time.Duration) *KeyRotationScheduleUpdateUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) WithContext(ctx context.Context) *KeyRotationScheduleUpdateUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) WithHTTPClient(client *http.Client) *KeyRotationScheduleUpdateUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeyID adds the keyID to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) WithKeyID(keyID string) *KeyRotationScheduleUpdateUsingPUTParams {
	o.SetKeyID(keyID)
	return o
}

// SetKeyID adds the keyId to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) SetKeyID(keyID string) {
	o.KeyID = keyID
}

// WithKeyRotationSchedule adds the keyRotationSchedule to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) WithKeyRotationSchedule(keyRotationSchedule *models.KeyRotationSchedule) *KeyRotationScheduleUpdateUsingPUTParams {
	o.SetKeyRotationSchedule(keyRotationSchedule)
	return o
}

// SetKeyRotationSchedule adds the keyRotationSchedule to the key rotation schedule update using p u t params
func (o *KeyRotationScheduleUpdateUsingPUTParams) SetKeyRotationSchedule(keyRotationSchedule *models.KeyRotationSchedule) {
	o.KeyRotationSchedule = keyRotationSchedule
}

// WriteToRequest writes these params to a swagger request
func (o *KeyRotationScheduleUpdateUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param keyId
	if err := r.SetPathParam("keyId", o.KeyID); err != nil {
		return err
	}

	if o.KeyRotationSchedule != nil {
		if err := r.SetBodyParam(o.KeyRotationSchedule); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
