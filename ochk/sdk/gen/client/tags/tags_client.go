// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TagCreateUsingPUT(params *TagCreateUsingPUTParams, opts ...ClientOption) (*TagCreateUsingPUTOK, *TagCreateUsingPUTCreated, error)

	TagDeleteUsingDELETE(params *TagDeleteUsingDELETEParams, opts ...ClientOption) (*TagDeleteUsingDELETEOK, error)

	TagGetUsingGET(params *TagGetUsingGETParams, opts ...ClientOption) (*TagGetUsingGETOK, error)

	TagListUsingGET(params *TagListUsingGETParams, opts ...ClientOption) (*TagListUsingGETOK, error)

	TagUpdateUsingPUT(params *TagUpdateUsingPUTParams, opts ...ClientOption) (*TagUpdateUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
TagCreateUsingPUT creates

Create billing tag
*/
func (a *Client) TagCreateUsingPUT(params *TagCreateUsingPUTParams, opts ...ClientOption) (*TagCreateUsingPUTOK, *TagCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagCreateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tagCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TagCreateUsingPUTOK:
		return value, nil, nil
	case *TagCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TagDeleteUsingDELETE deletes

Delete tag
*/
func (a *Client) TagDeleteUsingDELETE(params *TagDeleteUsingDELETEParams, opts ...ClientOption) (*TagDeleteUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagDeleteUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tagDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/tags/{tagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagDeleteUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tagDeleteUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TagGetUsingGET gets

Get tag
*/
func (a *Client) TagGetUsingGET(params *TagGetUsingGETParams, opts ...ClientOption) (*TagGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagGetUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tagGetUsingGET",
		Method:             "GET",
		PathPattern:        "/tags/{tagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tagGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TagListUsingGET lists

List tags
*/
func (a *Client) TagListUsingGET(params *TagListUsingGETParams, opts ...ClientOption) (*TagListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tagListUsingGET",
		Method:             "GET",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tagListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TagUpdateUsingPUT updates

Update tag
*/
func (a *Client) TagUpdateUsingPUT(params *TagUpdateUsingPUTParams, opts ...ClientOption) (*TagUpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tagUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/tags/{tagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagUpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tagUpdateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
