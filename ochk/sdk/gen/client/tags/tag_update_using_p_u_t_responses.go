// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// TagUpdateUsingPUTReader is a Reader for the TagUpdateUsingPUT structure.
type TagUpdateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TagUpdateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTagUpdateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTagUpdateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /tags/{tagId}] tagUpdateUsingPUT", response, response.Code())
	}
}

// NewTagUpdateUsingPUTOK creates a TagUpdateUsingPUTOK with default headers values
func NewTagUpdateUsingPUTOK() *TagUpdateUsingPUTOK {
	return &TagUpdateUsingPUTOK{}
}

/*
TagUpdateUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type TagUpdateUsingPUTOK struct {
	Payload *models.TagUpdateResponse
}

// IsSuccess returns true when this tag update using p u t o k response has a 2xx status code
func (o *TagUpdateUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tag update using p u t o k response has a 3xx status code
func (o *TagUpdateUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tag update using p u t o k response has a 4xx status code
func (o *TagUpdateUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this tag update using p u t o k response has a 5xx status code
func (o *TagUpdateUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this tag update using p u t o k response a status code equal to that given
func (o *TagUpdateUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the tag update using p u t o k response
func (o *TagUpdateUsingPUTOK) Code() int {
	return 200
}

func (o *TagUpdateUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] tagUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *TagUpdateUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] tagUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *TagUpdateUsingPUTOK) GetPayload() *models.TagUpdateResponse {
	return o.Payload
}

func (o *TagUpdateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTagUpdateUsingPUTBadRequest creates a TagUpdateUsingPUTBadRequest with default headers values
func NewTagUpdateUsingPUTBadRequest() *TagUpdateUsingPUTBadRequest {
	return &TagUpdateUsingPUTBadRequest{}
}

/*
TagUpdateUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type TagUpdateUsingPUTBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this tag update using p u t bad request response has a 2xx status code
func (o *TagUpdateUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tag update using p u t bad request response has a 3xx status code
func (o *TagUpdateUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tag update using p u t bad request response has a 4xx status code
func (o *TagUpdateUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this tag update using p u t bad request response has a 5xx status code
func (o *TagUpdateUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this tag update using p u t bad request response a status code equal to that given
func (o *TagUpdateUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the tag update using p u t bad request response
func (o *TagUpdateUsingPUTBadRequest) Code() int {
	return 400
}

func (o *TagUpdateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] tagUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *TagUpdateUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] tagUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *TagUpdateUsingPUTBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *TagUpdateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
