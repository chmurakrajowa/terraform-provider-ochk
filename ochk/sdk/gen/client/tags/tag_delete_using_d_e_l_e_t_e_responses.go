// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// TagDeleteUsingDELETEReader is a Reader for the TagDeleteUsingDELETE structure.
type TagDeleteUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TagDeleteUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTagDeleteUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTagDeleteUsingDELETEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /tags/{tagId}] tagDeleteUsingDELETE", response, response.Code())
	}
}

// NewTagDeleteUsingDELETEOK creates a TagDeleteUsingDELETEOK with default headers values
func NewTagDeleteUsingDELETEOK() *TagDeleteUsingDELETEOK {
	return &TagDeleteUsingDELETEOK{}
}

/*
TagDeleteUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type TagDeleteUsingDELETEOK struct {
	Payload *models.TagDeleteResponse
}

// IsSuccess returns true when this tag delete using d e l e t e o k response has a 2xx status code
func (o *TagDeleteUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tag delete using d e l e t e o k response has a 3xx status code
func (o *TagDeleteUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tag delete using d e l e t e o k response has a 4xx status code
func (o *TagDeleteUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this tag delete using d e l e t e o k response has a 5xx status code
func (o *TagDeleteUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this tag delete using d e l e t e o k response a status code equal to that given
func (o *TagDeleteUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the tag delete using d e l e t e o k response
func (o *TagDeleteUsingDELETEOK) Code() int {
	return 200
}

func (o *TagDeleteUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /tags/{tagId}][%d] tagDeleteUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *TagDeleteUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /tags/{tagId}][%d] tagDeleteUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *TagDeleteUsingDELETEOK) GetPayload() *models.TagDeleteResponse {
	return o.Payload
}

func (o *TagDeleteUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagDeleteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTagDeleteUsingDELETEBadRequest creates a TagDeleteUsingDELETEBadRequest with default headers values
func NewTagDeleteUsingDELETEBadRequest() *TagDeleteUsingDELETEBadRequest {
	return &TagDeleteUsingDELETEBadRequest{}
}

/*
TagDeleteUsingDELETEBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type TagDeleteUsingDELETEBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this tag delete using d e l e t e bad request response has a 2xx status code
func (o *TagDeleteUsingDELETEBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tag delete using d e l e t e bad request response has a 3xx status code
func (o *TagDeleteUsingDELETEBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tag delete using d e l e t e bad request response has a 4xx status code
func (o *TagDeleteUsingDELETEBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this tag delete using d e l e t e bad request response has a 5xx status code
func (o *TagDeleteUsingDELETEBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this tag delete using d e l e t e bad request response a status code equal to that given
func (o *TagDeleteUsingDELETEBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the tag delete using d e l e t e bad request response
func (o *TagDeleteUsingDELETEBadRequest) Code() int {
	return 400
}

func (o *TagDeleteUsingDELETEBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /tags/{tagId}][%d] tagDeleteUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *TagDeleteUsingDELETEBadRequest) String() string {
	return fmt.Sprintf("[DELETE /tags/{tagId}][%d] tagDeleteUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *TagDeleteUsingDELETEBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *TagDeleteUsingDELETEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
