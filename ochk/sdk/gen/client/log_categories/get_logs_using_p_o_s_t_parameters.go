// Code generated by go-swagger; DO NOT EDIT.

package log_categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewGetLogsUsingPOSTParams creates a new GetLogsUsingPOSTParams object
// with the default values initialized.
func NewGetLogsUsingPOSTParams() *GetLogsUsingPOSTParams {
	var ()
	return &GetLogsUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLogsUsingPOSTParamsWithTimeout creates a new GetLogsUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLogsUsingPOSTParamsWithTimeout(timeout time.Duration) *GetLogsUsingPOSTParams {
	var ()
	return &GetLogsUsingPOSTParams{

		timeout: timeout,
	}
}

// NewGetLogsUsingPOSTParamsWithContext creates a new GetLogsUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLogsUsingPOSTParamsWithContext(ctx context.Context) *GetLogsUsingPOSTParams {
	var ()
	return &GetLogsUsingPOSTParams{

		Context: ctx,
	}
}

// NewGetLogsUsingPOSTParamsWithHTTPClient creates a new GetLogsUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLogsUsingPOSTParamsWithHTTPClient(client *http.Client) *GetLogsUsingPOSTParams {
	var ()
	return &GetLogsUsingPOSTParams{
		HTTPClient: client,
	}
}

/*GetLogsUsingPOSTParams contains all the parameters to send to the API endpoint
for the get logs using p o s t operation typically these are written to a http.Request
*/
type GetLogsUsingPOSTParams struct {

	/*DataSize
	  dataSize

	*/
	DataSize int32
	/*LastIndex
	  lastIndex

	*/
	LastIndex int64
	/*LogCategoryID
	  logCategoryId

	*/
	LogCategoryID int32
	/*QueryFilter
	  queryFilter

	*/
	QueryFilter *models.QueryFilter

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) WithTimeout(timeout time.Duration) *GetLogsUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) WithContext(ctx context.Context) *GetLogsUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) WithHTTPClient(client *http.Client) *GetLogsUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDataSize adds the dataSize to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) WithDataSize(dataSize int32) *GetLogsUsingPOSTParams {
	o.SetDataSize(dataSize)
	return o
}

// SetDataSize adds the dataSize to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) SetDataSize(dataSize int32) {
	o.DataSize = dataSize
}

// WithLastIndex adds the lastIndex to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) WithLastIndex(lastIndex int64) *GetLogsUsingPOSTParams {
	o.SetLastIndex(lastIndex)
	return o
}

// SetLastIndex adds the lastIndex to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) SetLastIndex(lastIndex int64) {
	o.LastIndex = lastIndex
}

// WithLogCategoryID adds the logCategoryID to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) WithLogCategoryID(logCategoryID int32) *GetLogsUsingPOSTParams {
	o.SetLogCategoryID(logCategoryID)
	return o
}

// SetLogCategoryID adds the logCategoryId to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) SetLogCategoryID(logCategoryID int32) {
	o.LogCategoryID = logCategoryID
}

// WithQueryFilter adds the queryFilter to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) WithQueryFilter(queryFilter *models.QueryFilter) *GetLogsUsingPOSTParams {
	o.SetQueryFilter(queryFilter)
	return o
}

// SetQueryFilter adds the queryFilter to the get logs using p o s t params
func (o *GetLogsUsingPOSTParams) SetQueryFilter(queryFilter *models.QueryFilter) {
	o.QueryFilter = queryFilter
}

// WriteToRequest writes these params to a swagger request
func (o *GetLogsUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param dataSize
	qrDataSize := o.DataSize
	qDataSize := swag.FormatInt32(qrDataSize)
	if qDataSize != "" {
		if err := r.SetQueryParam("dataSize", qDataSize); err != nil {
			return err
		}
	}

	// query param lastIndex
	qrLastIndex := o.LastIndex
	qLastIndex := swag.FormatInt64(qrLastIndex)
	if qLastIndex != "" {
		if err := r.SetQueryParam("lastIndex", qLastIndex); err != nil {
			return err
		}
	}

	// path param logCategoryId
	if err := r.SetPathParam("logCategoryId", swag.FormatInt32(o.LogCategoryID)); err != nil {
		return err
	}

	if o.QueryFilter != nil {
		if err := r.SetBodyParam(o.QueryFilter); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
