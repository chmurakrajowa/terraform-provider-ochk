// Code generated by go-swagger; DO NOT EDIT.

package log_categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewLogCategoryUpdateUsingPUTParams creates a new LogCategoryUpdateUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLogCategoryUpdateUsingPUTParams() *LogCategoryUpdateUsingPUTParams {
	return &LogCategoryUpdateUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLogCategoryUpdateUsingPUTParamsWithTimeout creates a new LogCategoryUpdateUsingPUTParams object
// with the ability to set a timeout on a request.
func NewLogCategoryUpdateUsingPUTParamsWithTimeout(timeout time.Duration) *LogCategoryUpdateUsingPUTParams {
	return &LogCategoryUpdateUsingPUTParams{
		timeout: timeout,
	}
}

// NewLogCategoryUpdateUsingPUTParamsWithContext creates a new LogCategoryUpdateUsingPUTParams object
// with the ability to set a context for a request.
func NewLogCategoryUpdateUsingPUTParamsWithContext(ctx context.Context) *LogCategoryUpdateUsingPUTParams {
	return &LogCategoryUpdateUsingPUTParams{
		Context: ctx,
	}
}

// NewLogCategoryUpdateUsingPUTParamsWithHTTPClient creates a new LogCategoryUpdateUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewLogCategoryUpdateUsingPUTParamsWithHTTPClient(client *http.Client) *LogCategoryUpdateUsingPUTParams {
	return &LogCategoryUpdateUsingPUTParams{
		HTTPClient: client,
	}
}

/*
LogCategoryUpdateUsingPUTParams contains all the parameters to send to the API endpoint

	for the log category update using p u t operation.

	Typically these are written to a http.Request.
*/
type LogCategoryUpdateUsingPUTParams struct {

	/* LogCategory.

	   logCategory
	*/
	LogCategory *models.LogCategory

	/* LogCategoryID.

	   logCategoryId

	   Format: int32
	*/
	LogCategoryID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the log category update using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LogCategoryUpdateUsingPUTParams) WithDefaults() *LogCategoryUpdateUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the log category update using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LogCategoryUpdateUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) WithTimeout(timeout time.Duration) *LogCategoryUpdateUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) WithContext(ctx context.Context) *LogCategoryUpdateUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) WithHTTPClient(client *http.Client) *LogCategoryUpdateUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogCategory adds the logCategory to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) WithLogCategory(logCategory *models.LogCategory) *LogCategoryUpdateUsingPUTParams {
	o.SetLogCategory(logCategory)
	return o
}

// SetLogCategory adds the logCategory to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) SetLogCategory(logCategory *models.LogCategory) {
	o.LogCategory = logCategory
}

// WithLogCategoryID adds the logCategoryID to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) WithLogCategoryID(logCategoryID int32) *LogCategoryUpdateUsingPUTParams {
	o.SetLogCategoryID(logCategoryID)
	return o
}

// SetLogCategoryID adds the logCategoryId to the log category update using p u t params
func (o *LogCategoryUpdateUsingPUTParams) SetLogCategoryID(logCategoryID int32) {
	o.LogCategoryID = logCategoryID
}

// WriteToRequest writes these params to a swagger request
func (o *LogCategoryUpdateUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.LogCategory != nil {
		if err := r.SetBodyParam(o.LogCategory); err != nil {
			return err
		}
	}

	// path param logCategoryId
	if err := r.SetPathParam("logCategoryId", swag.FormatInt32(o.LogCategoryID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
