// Code generated by go-swagger; DO NOT EDIT.

package log_categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLogCategoriesListUsingGETParams creates a new LogCategoriesListUsingGETParams object
// with the default values initialized.
func NewLogCategoriesListUsingGETParams() *LogCategoriesListUsingGETParams {
	var ()
	return &LogCategoriesListUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLogCategoriesListUsingGETParamsWithTimeout creates a new LogCategoriesListUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLogCategoriesListUsingGETParamsWithTimeout(timeout time.Duration) *LogCategoriesListUsingGETParams {
	var ()
	return &LogCategoriesListUsingGETParams{

		timeout: timeout,
	}
}

// NewLogCategoriesListUsingGETParamsWithContext creates a new LogCategoriesListUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewLogCategoriesListUsingGETParamsWithContext(ctx context.Context) *LogCategoriesListUsingGETParams {
	var ()
	return &LogCategoriesListUsingGETParams{

		Context: ctx,
	}
}

// NewLogCategoriesListUsingGETParamsWithHTTPClient creates a new LogCategoriesListUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLogCategoriesListUsingGETParamsWithHTTPClient(client *http.Client) *LogCategoriesListUsingGETParams {
	var ()
	return &LogCategoriesListUsingGETParams{
		HTTPClient: client,
	}
}

/*LogCategoriesListUsingGETParams contains all the parameters to send to the API endpoint
for the log categories list using g e t operation typically these are written to a http.Request
*/
type LogCategoriesListUsingGETParams struct {

	/*LogCategoryName
	  logCategoryName

	*/
	LogCategoryName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the log categories list using g e t params
func (o *LogCategoriesListUsingGETParams) WithTimeout(timeout time.Duration) *LogCategoriesListUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the log categories list using g e t params
func (o *LogCategoriesListUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the log categories list using g e t params
func (o *LogCategoriesListUsingGETParams) WithContext(ctx context.Context) *LogCategoriesListUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the log categories list using g e t params
func (o *LogCategoriesListUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the log categories list using g e t params
func (o *LogCategoriesListUsingGETParams) WithHTTPClient(client *http.Client) *LogCategoriesListUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the log categories list using g e t params
func (o *LogCategoriesListUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogCategoryName adds the logCategoryName to the log categories list using g e t params
func (o *LogCategoriesListUsingGETParams) WithLogCategoryName(logCategoryName *string) *LogCategoriesListUsingGETParams {
	o.SetLogCategoryName(logCategoryName)
	return o
}

// SetLogCategoryName adds the logCategoryName to the log categories list using g e t params
func (o *LogCategoriesListUsingGETParams) SetLogCategoryName(logCategoryName *string) {
	o.LogCategoryName = logCategoryName
}

// WriteToRequest writes these params to a swagger request
func (o *LogCategoriesListUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LogCategoryName != nil {

		// query param logCategoryName
		var qrLogCategoryName string
		if o.LogCategoryName != nil {
			qrLogCategoryName = *o.LogCategoryName
		}
		qLogCategoryName := qrLogCategoryName
		if qLogCategoryName != "" {
			if err := r.SetQueryParam("logCategoryName", qLogCategoryName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
