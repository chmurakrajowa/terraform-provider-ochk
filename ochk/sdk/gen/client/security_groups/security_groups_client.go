// Code generated by go-swagger; DO NOT EDIT.

package security_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SecurityGroupCreateUsingPUT(params *SecurityGroupCreateUsingPUTParams) (*SecurityGroupCreateUsingPUTOK, *SecurityGroupCreateUsingPUTCreated, error)

	SecurityGroupDeleteUsingDELETE(params *SecurityGroupDeleteUsingDELETEParams) (*SecurityGroupDeleteUsingDELETEOK, *SecurityGroupDeleteUsingDELETECreated, error)

	SecurityGroupGetUsingGET(params *SecurityGroupGetUsingGETParams) (*SecurityGroupGetUsingGETOK, error)

	SecurityGroupListUsingGET(params *SecurityGroupListUsingGETParams) (*SecurityGroupListUsingGETOK, error)

	SecurityGroupUpdateUsingPUT(params *SecurityGroupUpdateUsingPUTParams) (*SecurityGroupUpdateUsingPUTOK, *SecurityGroupUpdateUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SecurityGroupCreateUsingPUT creates

  Create security group in NSX-T
*/
func (a *Client) SecurityGroupCreateUsingPUT(params *SecurityGroupCreateUsingPUTParams) (*SecurityGroupCreateUsingPUTOK, *SecurityGroupCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupCreateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "securityGroupCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/network/security-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecurityGroupCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SecurityGroupCreateUsingPUTOK:
		return value, nil, nil
	case *SecurityGroupCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for security_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecurityGroupDeleteUsingDELETE deletes

  Delete security group from NSX-T
*/
func (a *Client) SecurityGroupDeleteUsingDELETE(params *SecurityGroupDeleteUsingDELETEParams) (*SecurityGroupDeleteUsingDELETEOK, *SecurityGroupDeleteUsingDELETECreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupDeleteUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "securityGroupDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/network/security-groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecurityGroupDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SecurityGroupDeleteUsingDELETEOK:
		return value, nil, nil
	case *SecurityGroupDeleteUsingDELETECreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for security_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecurityGroupGetUsingGET gets

  Get security group from NSX-T
*/
func (a *Client) SecurityGroupGetUsingGET(params *SecurityGroupGetUsingGETParams) (*SecurityGroupGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "securityGroupGetUsingGET",
		Method:             "GET",
		PathPattern:        "/network/security-groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecurityGroupGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityGroupGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for securityGroupGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecurityGroupListUsingGET lists

  List security groups from NSX-T
*/
func (a *Client) SecurityGroupListUsingGET(params *SecurityGroupListUsingGETParams) (*SecurityGroupListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "securityGroupListUsingGET",
		Method:             "GET",
		PathPattern:        "/network/security-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecurityGroupListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityGroupListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for securityGroupListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecurityGroupUpdateUsingPUT updates

  Update security group from NSX-T
*/
func (a *Client) SecurityGroupUpdateUsingPUT(params *SecurityGroupUpdateUsingPUTParams) (*SecurityGroupUpdateUsingPUTOK, *SecurityGroupUpdateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupUpdateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "securityGroupUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/network/security-groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecurityGroupUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SecurityGroupUpdateUsingPUTOK:
		return value, nil, nil
	case *SecurityGroupUpdateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for security_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
