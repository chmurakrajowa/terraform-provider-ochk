// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new logs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for logs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetHistogramCategoryUsingPOST(params *GetHistogramCategoryUsingPOSTParams, opts ...ClientOption) (*GetHistogramCategoryUsingPOSTOK, error)

	GetHistogramCategoryUsingPOST1(params *GetHistogramCategoryUsingPOST1Params, opts ...ClientOption) (*GetHistogramCategoryUsingPOST1OK, error)

	GetHistogramCustomUsingPOST(params *GetHistogramCustomUsingPOSTParams, opts ...ClientOption) (*GetHistogramCustomUsingPOSTOK, error)

	GetHistogramCustomUsingPOST1(params *GetHistogramCustomUsingPOST1Params, opts ...ClientOption) (*GetHistogramCustomUsingPOST1OK, error)

	GetHistogramSeverityUsingPOST(params *GetHistogramSeverityUsingPOSTParams, opts ...ClientOption) (*GetHistogramSeverityUsingPOSTOK, error)

	GetHistogramSeverityUsingPOST1(params *GetHistogramSeverityUsingPOST1Params, opts ...ClientOption) (*GetHistogramSeverityUsingPOST1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetHistogramCategoryUsingPOST gets log histogram by category

Get log histogram by category
*/
func (a *Client) GetHistogramCategoryUsingPOST(params *GetHistogramCategoryUsingPOSTParams, opts ...ClientOption) (*GetHistogramCategoryUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistogramCategoryUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHistogramCategoryUsingPOST",
		Method:             "POST",
		PathPattern:        "/log/histogram/category",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHistogramCategoryUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHistogramCategoryUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHistogramCategoryUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHistogramCategoryUsingPOST1 gets log histogram for user by category

Get log histogram for user by category
*/
func (a *Client) GetHistogramCategoryUsingPOST1(params *GetHistogramCategoryUsingPOST1Params, opts ...ClientOption) (*GetHistogramCategoryUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistogramCategoryUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHistogramCategoryUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/log/histogram/user/category",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHistogramCategoryUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHistogramCategoryUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHistogramCategoryUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHistogramCustomUsingPOST gets log histogram by custom field

Get log histogram by custom field
*/
func (a *Client) GetHistogramCustomUsingPOST(params *GetHistogramCustomUsingPOSTParams, opts ...ClientOption) (*GetHistogramCustomUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistogramCustomUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHistogramCustomUsingPOST",
		Method:             "POST",
		PathPattern:        "/log/histogram/custom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHistogramCustomUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHistogramCustomUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHistogramCustomUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHistogramCustomUsingPOST1 gets log histogram for user by custom field

Get log histogram for user by custom field
*/
func (a *Client) GetHistogramCustomUsingPOST1(params *GetHistogramCustomUsingPOST1Params, opts ...ClientOption) (*GetHistogramCustomUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistogramCustomUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHistogramCustomUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/log/histogram/user/custom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHistogramCustomUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHistogramCustomUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHistogramCustomUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHistogramSeverityUsingPOST gets log histogram by severity

Get log histogram by severity
*/
func (a *Client) GetHistogramSeverityUsingPOST(params *GetHistogramSeverityUsingPOSTParams, opts ...ClientOption) (*GetHistogramSeverityUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistogramSeverityUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHistogramSeverityUsingPOST",
		Method:             "POST",
		PathPattern:        "/log/histogram/severity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHistogramSeverityUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHistogramSeverityUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHistogramSeverityUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHistogramSeverityUsingPOST1 gets log histogram for user by severity

Get log histogram for user by severity
*/
func (a *Client) GetHistogramSeverityUsingPOST1(params *GetHistogramSeverityUsingPOST1Params, opts ...ClientOption) (*GetHistogramSeverityUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistogramSeverityUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHistogramSeverityUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/log/histogram/user/severity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHistogramSeverityUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHistogramSeverityUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHistogramSeverityUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
