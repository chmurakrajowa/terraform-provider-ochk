// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewGetHistogramCategoryUsingPOST1Params creates a new GetHistogramCategoryUsingPOST1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetHistogramCategoryUsingPOST1Params() *GetHistogramCategoryUsingPOST1Params {
	return &GetHistogramCategoryUsingPOST1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetHistogramCategoryUsingPOST1ParamsWithTimeout creates a new GetHistogramCategoryUsingPOST1Params object
// with the ability to set a timeout on a request.
func NewGetHistogramCategoryUsingPOST1ParamsWithTimeout(timeout time.Duration) *GetHistogramCategoryUsingPOST1Params {
	return &GetHistogramCategoryUsingPOST1Params{
		timeout: timeout,
	}
}

// NewGetHistogramCategoryUsingPOST1ParamsWithContext creates a new GetHistogramCategoryUsingPOST1Params object
// with the ability to set a context for a request.
func NewGetHistogramCategoryUsingPOST1ParamsWithContext(ctx context.Context) *GetHistogramCategoryUsingPOST1Params {
	return &GetHistogramCategoryUsingPOST1Params{
		Context: ctx,
	}
}

// NewGetHistogramCategoryUsingPOST1ParamsWithHTTPClient creates a new GetHistogramCategoryUsingPOST1Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetHistogramCategoryUsingPOST1ParamsWithHTTPClient(client *http.Client) *GetHistogramCategoryUsingPOST1Params {
	return &GetHistogramCategoryUsingPOST1Params{
		HTTPClient: client,
	}
}

/*
GetHistogramCategoryUsingPOST1Params contains all the parameters to send to the API endpoint

	for the get histogram category using p o s t 1 operation.

	Typically these are written to a http.Request.
*/
type GetHistogramCategoryUsingPOST1Params struct {

	/* CalendarInterval.

	   calendarInterval
	*/
	CalendarInterval *string

	/* QueryFilter.

	   queryFilter
	*/
	QueryFilter *models.QueryFilter

	/* UserID.

	   userId
	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get histogram category using p o s t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetHistogramCategoryUsingPOST1Params) WithDefaults() *GetHistogramCategoryUsingPOST1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get histogram category using p o s t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetHistogramCategoryUsingPOST1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) WithTimeout(timeout time.Duration) *GetHistogramCategoryUsingPOST1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) WithContext(ctx context.Context) *GetHistogramCategoryUsingPOST1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) WithHTTPClient(client *http.Client) *GetHistogramCategoryUsingPOST1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCalendarInterval adds the calendarInterval to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) WithCalendarInterval(calendarInterval *string) *GetHistogramCategoryUsingPOST1Params {
	o.SetCalendarInterval(calendarInterval)
	return o
}

// SetCalendarInterval adds the calendarInterval to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) SetCalendarInterval(calendarInterval *string) {
	o.CalendarInterval = calendarInterval
}

// WithQueryFilter adds the queryFilter to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) WithQueryFilter(queryFilter *models.QueryFilter) *GetHistogramCategoryUsingPOST1Params {
	o.SetQueryFilter(queryFilter)
	return o
}

// SetQueryFilter adds the queryFilter to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) SetQueryFilter(queryFilter *models.QueryFilter) {
	o.QueryFilter = queryFilter
}

// WithUserID adds the userID to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) WithUserID(userID string) *GetHistogramCategoryUsingPOST1Params {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get histogram category using p o s t 1 params
func (o *GetHistogramCategoryUsingPOST1Params) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetHistogramCategoryUsingPOST1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CalendarInterval != nil {

		// query param calendarInterval
		var qrCalendarInterval string

		if o.CalendarInterval != nil {
			qrCalendarInterval = *o.CalendarInterval
		}
		qCalendarInterval := qrCalendarInterval
		if qCalendarInterval != "" {

			if err := r.SetQueryParam("calendarInterval", qCalendarInterval); err != nil {
				return err
			}
		}
	}
	if o.QueryFilter != nil {
		if err := r.SetBodyParam(o.QueryFilter); err != nil {
			return err
		}
	}

	// query param userId
	qrUserID := o.UserID
	qUserID := qrUserID
	if qUserID != "" {

		if err := r.SetQueryParam("userId", qUserID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
