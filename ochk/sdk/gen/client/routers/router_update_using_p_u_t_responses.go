// Code generated by go-swagger; DO NOT EDIT.

package routers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// RouterUpdateUsingPUTReader is a Reader for the RouterUpdateUsingPUT structure.
type RouterUpdateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouterUpdateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRouterUpdateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewRouterUpdateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRouterUpdateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRouterUpdateUsingPUTOK creates a RouterUpdateUsingPUTOK with default headers values
func NewRouterUpdateUsingPUTOK() *RouterUpdateUsingPUTOK {
	return &RouterUpdateUsingPUTOK{}
}

/* RouterUpdateUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type RouterUpdateUsingPUTOK struct {
	Payload *models.UpdateRouterResponse
}

func (o *RouterUpdateUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}][%d] routerUpdateUsingPUTOK  %+v", 200, o.Payload)
}
func (o *RouterUpdateUsingPUTOK) GetPayload() *models.UpdateRouterResponse {
	return o.Payload
}

func (o *RouterUpdateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateRouterResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouterUpdateUsingPUTCreated creates a RouterUpdateUsingPUTCreated with default headers values
func NewRouterUpdateUsingPUTCreated() *RouterUpdateUsingPUTCreated {
	return &RouterUpdateUsingPUTCreated{}
}

/* RouterUpdateUsingPUTCreated describes a response with status code 201, with default header values.

Entity has been updated
*/
type RouterUpdateUsingPUTCreated struct {
	Payload *models.UpdateRouterResponse
}

func (o *RouterUpdateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}][%d] routerUpdateUsingPUTCreated  %+v", 201, o.Payload)
}
func (o *RouterUpdateUsingPUTCreated) GetPayload() *models.UpdateRouterResponse {
	return o.Payload
}

func (o *RouterUpdateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateRouterResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouterUpdateUsingPUTBadRequest creates a RouterUpdateUsingPUTBadRequest with default headers values
func NewRouterUpdateUsingPUTBadRequest() *RouterUpdateUsingPUTBadRequest {
	return &RouterUpdateUsingPUTBadRequest{}
}

/* RouterUpdateUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type RouterUpdateUsingPUTBadRequest struct {
	Payload *models.ProxyResponseMessage
}

func (o *RouterUpdateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}][%d] routerUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}
func (o *RouterUpdateUsingPUTBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *RouterUpdateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
