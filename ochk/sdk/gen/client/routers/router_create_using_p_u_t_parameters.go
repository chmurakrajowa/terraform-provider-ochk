// Code generated by go-swagger; DO NOT EDIT.

package routers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewRouterCreateUsingPUTParams creates a new RouterCreateUsingPUTParams object
// with the default values initialized.
func NewRouterCreateUsingPUTParams() *RouterCreateUsingPUTParams {
	var ()
	return &RouterCreateUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRouterCreateUsingPUTParamsWithTimeout creates a new RouterCreateUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRouterCreateUsingPUTParamsWithTimeout(timeout time.Duration) *RouterCreateUsingPUTParams {
	var ()
	return &RouterCreateUsingPUTParams{

		timeout: timeout,
	}
}

// NewRouterCreateUsingPUTParamsWithContext creates a new RouterCreateUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewRouterCreateUsingPUTParamsWithContext(ctx context.Context) *RouterCreateUsingPUTParams {
	var ()
	return &RouterCreateUsingPUTParams{

		Context: ctx,
	}
}

// NewRouterCreateUsingPUTParamsWithHTTPClient creates a new RouterCreateUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRouterCreateUsingPUTParamsWithHTTPClient(client *http.Client) *RouterCreateUsingPUTParams {
	var ()
	return &RouterCreateUsingPUTParams{
		HTTPClient: client,
	}
}

/*RouterCreateUsingPUTParams contains all the parameters to send to the API endpoint
for the router create using p u t operation typically these are written to a http.Request
*/
type RouterCreateUsingPUTParams struct {

	/*RouterInstance
	  routerInstance

	*/
	RouterInstance *models.RouterInstance

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the router create using p u t params
func (o *RouterCreateUsingPUTParams) WithTimeout(timeout time.Duration) *RouterCreateUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the router create using p u t params
func (o *RouterCreateUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the router create using p u t params
func (o *RouterCreateUsingPUTParams) WithContext(ctx context.Context) *RouterCreateUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the router create using p u t params
func (o *RouterCreateUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the router create using p u t params
func (o *RouterCreateUsingPUTParams) WithHTTPClient(client *http.Client) *RouterCreateUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the router create using p u t params
func (o *RouterCreateUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRouterInstance adds the routerInstance to the router create using p u t params
func (o *RouterCreateUsingPUTParams) WithRouterInstance(routerInstance *models.RouterInstance) *RouterCreateUsingPUTParams {
	o.SetRouterInstance(routerInstance)
	return o
}

// SetRouterInstance adds the routerInstance to the router create using p u t params
func (o *RouterCreateUsingPUTParams) SetRouterInstance(routerInstance *models.RouterInstance) {
	o.RouterInstance = routerInstance
}

// WriteToRequest writes these params to a swagger request
func (o *RouterCreateUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RouterInstance != nil {
		if err := r.SetBodyParam(o.RouterInstance); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
