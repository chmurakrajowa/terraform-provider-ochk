// Code generated by go-swagger; DO NOT EDIT.

package routers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewRouterUpdateUsingPUTParams creates a new RouterUpdateUsingPUTParams object
// with the default values initialized.
func NewRouterUpdateUsingPUTParams() *RouterUpdateUsingPUTParams {
	var ()
	return &RouterUpdateUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRouterUpdateUsingPUTParamsWithTimeout creates a new RouterUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRouterUpdateUsingPUTParamsWithTimeout(timeout time.Duration) *RouterUpdateUsingPUTParams {
	var ()
	return &RouterUpdateUsingPUTParams{

		timeout: timeout,
	}
}

// NewRouterUpdateUsingPUTParamsWithContext creates a new RouterUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewRouterUpdateUsingPUTParamsWithContext(ctx context.Context) *RouterUpdateUsingPUTParams {
	var ()
	return &RouterUpdateUsingPUTParams{

		Context: ctx,
	}
}

// NewRouterUpdateUsingPUTParamsWithHTTPClient creates a new RouterUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRouterUpdateUsingPUTParamsWithHTTPClient(client *http.Client) *RouterUpdateUsingPUTParams {
	var ()
	return &RouterUpdateUsingPUTParams{
		HTTPClient: client,
	}
}

/*RouterUpdateUsingPUTParams contains all the parameters to send to the API endpoint
for the router update using p u t operation typically these are written to a http.Request
*/
type RouterUpdateUsingPUTParams struct {

	/*RouterID
	  routerId

	*/
	RouterID string
	/*RouterInstance
	  routerInstance

	*/
	RouterInstance *models.RouterInstance

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) WithTimeout(timeout time.Duration) *RouterUpdateUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) WithContext(ctx context.Context) *RouterUpdateUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) WithHTTPClient(client *http.Client) *RouterUpdateUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRouterID adds the routerID to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) WithRouterID(routerID string) *RouterUpdateUsingPUTParams {
	o.SetRouterID(routerID)
	return o
}

// SetRouterID adds the routerId to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) SetRouterID(routerID string) {
	o.RouterID = routerID
}

// WithRouterInstance adds the routerInstance to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) WithRouterInstance(routerInstance *models.RouterInstance) *RouterUpdateUsingPUTParams {
	o.SetRouterInstance(routerInstance)
	return o
}

// SetRouterInstance adds the routerInstance to the router update using p u t params
func (o *RouterUpdateUsingPUTParams) SetRouterInstance(routerInstance *models.RouterInstance) {
	o.RouterInstance = routerInstance
}

// WriteToRequest writes these params to a swagger request
func (o *RouterUpdateUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param routerId
	if err := r.SetPathParam("routerId", o.RouterID); err != nil {
		return err
	}

	if o.RouterInstance != nil {
		if err := r.SetBodyParam(o.RouterInstance); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
