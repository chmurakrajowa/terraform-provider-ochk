// Code generated by go-swagger; DO NOT EDIT.

package routers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// RouterGetUsingGETReader is a Reader for the RouterGetUsingGET structure.
type RouterGetUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouterGetUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRouterGetUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRouterGetUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRouterGetUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRouterGetUsingGETOK creates a RouterGetUsingGETOK with default headers values
func NewRouterGetUsingGETOK() *RouterGetUsingGETOK {
	return &RouterGetUsingGETOK{}
}

/*
RouterGetUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type RouterGetUsingGETOK struct {
	Payload *models.RouterGetResponse
}

// IsSuccess returns true when this router get using g e t o k response has a 2xx status code
func (o *RouterGetUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this router get using g e t o k response has a 3xx status code
func (o *RouterGetUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this router get using g e t o k response has a 4xx status code
func (o *RouterGetUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this router get using g e t o k response has a 5xx status code
func (o *RouterGetUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this router get using g e t o k response a status code equal to that given
func (o *RouterGetUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the router get using g e t o k response
func (o *RouterGetUsingGETOK) Code() int {
	return 200
}

func (o *RouterGetUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /network/routers/{routerId}][%d] routerGetUsingGETOK  %+v", 200, o.Payload)
}

func (o *RouterGetUsingGETOK) String() string {
	return fmt.Sprintf("[GET /network/routers/{routerId}][%d] routerGetUsingGETOK  %+v", 200, o.Payload)
}

func (o *RouterGetUsingGETOK) GetPayload() *models.RouterGetResponse {
	return o.Payload
}

func (o *RouterGetUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RouterGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouterGetUsingGETBadRequest creates a RouterGetUsingGETBadRequest with default headers values
func NewRouterGetUsingGETBadRequest() *RouterGetUsingGETBadRequest {
	return &RouterGetUsingGETBadRequest{}
}

/*
RouterGetUsingGETBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type RouterGetUsingGETBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this router get using g e t bad request response has a 2xx status code
func (o *RouterGetUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this router get using g e t bad request response has a 3xx status code
func (o *RouterGetUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this router get using g e t bad request response has a 4xx status code
func (o *RouterGetUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this router get using g e t bad request response has a 5xx status code
func (o *RouterGetUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this router get using g e t bad request response a status code equal to that given
func (o *RouterGetUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the router get using g e t bad request response
func (o *RouterGetUsingGETBadRequest) Code() int {
	return 400
}

func (o *RouterGetUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /network/routers/{routerId}][%d] routerGetUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *RouterGetUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /network/routers/{routerId}][%d] routerGetUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *RouterGetUsingGETBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *RouterGetUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouterGetUsingGETNotFound creates a RouterGetUsingGETNotFound with default headers values
func NewRouterGetUsingGETNotFound() *RouterGetUsingGETNotFound {
	return &RouterGetUsingGETNotFound{}
}

/*
RouterGetUsingGETNotFound describes a response with status code 404, with default header values.

Entity not found.
*/
type RouterGetUsingGETNotFound struct {
}

// IsSuccess returns true when this router get using g e t not found response has a 2xx status code
func (o *RouterGetUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this router get using g e t not found response has a 3xx status code
func (o *RouterGetUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this router get using g e t not found response has a 4xx status code
func (o *RouterGetUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this router get using g e t not found response has a 5xx status code
func (o *RouterGetUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this router get using g e t not found response a status code equal to that given
func (o *RouterGetUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the router get using g e t not found response
func (o *RouterGetUsingGETNotFound) Code() int {
	return 404
}

func (o *RouterGetUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /network/routers/{routerId}][%d] routerGetUsingGETNotFound ", 404)
}

func (o *RouterGetUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /network/routers/{routerId}][%d] routerGetUsingGETNotFound ", 404)
}

func (o *RouterGetUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
