// Code generated by go-swagger; DO NOT EDIT.

package active_directory_r_s_a_public_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewGetPublicKeyUsingPOSTParams creates a new GetPublicKeyUsingPOSTParams object
// with the default values initialized.
func NewGetPublicKeyUsingPOSTParams() *GetPublicKeyUsingPOSTParams {
	var ()
	return &GetPublicKeyUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPublicKeyUsingPOSTParamsWithTimeout creates a new GetPublicKeyUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPublicKeyUsingPOSTParamsWithTimeout(timeout time.Duration) *GetPublicKeyUsingPOSTParams {
	var ()
	return &GetPublicKeyUsingPOSTParams{

		timeout: timeout,
	}
}

// NewGetPublicKeyUsingPOSTParamsWithContext creates a new GetPublicKeyUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPublicKeyUsingPOSTParamsWithContext(ctx context.Context) *GetPublicKeyUsingPOSTParams {
	var ()
	return &GetPublicKeyUsingPOSTParams{

		Context: ctx,
	}
}

// NewGetPublicKeyUsingPOSTParamsWithHTTPClient creates a new GetPublicKeyUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPublicKeyUsingPOSTParamsWithHTTPClient(client *http.Client) *GetPublicKeyUsingPOSTParams {
	var ()
	return &GetPublicKeyUsingPOSTParams{
		HTTPClient: client,
	}
}

/*GetPublicKeyUsingPOSTParams contains all the parameters to send to the API endpoint
for the get public key using p o s t operation typically these are written to a http.Request
*/
type GetPublicKeyUsingPOSTParams struct {

	/*GetPublicKeyRequest
	  getPublicKeyRequest

	*/
	GetPublicKeyRequest *models.GetPublicKeyRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get public key using p o s t params
func (o *GetPublicKeyUsingPOSTParams) WithTimeout(timeout time.Duration) *GetPublicKeyUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get public key using p o s t params
func (o *GetPublicKeyUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get public key using p o s t params
func (o *GetPublicKeyUsingPOSTParams) WithContext(ctx context.Context) *GetPublicKeyUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get public key using p o s t params
func (o *GetPublicKeyUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get public key using p o s t params
func (o *GetPublicKeyUsingPOSTParams) WithHTTPClient(client *http.Client) *GetPublicKeyUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get public key using p o s t params
func (o *GetPublicKeyUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGetPublicKeyRequest adds the getPublicKeyRequest to the get public key using p o s t params
func (o *GetPublicKeyUsingPOSTParams) WithGetPublicKeyRequest(getPublicKeyRequest *models.GetPublicKeyRequest) *GetPublicKeyUsingPOSTParams {
	o.SetGetPublicKeyRequest(getPublicKeyRequest)
	return o
}

// SetGetPublicKeyRequest adds the getPublicKeyRequest to the get public key using p o s t params
func (o *GetPublicKeyUsingPOSTParams) SetGetPublicKeyRequest(getPublicKeyRequest *models.GetPublicKeyRequest) {
	o.GetPublicKeyRequest = getPublicKeyRequest
}

// WriteToRequest writes these params to a swagger request
func (o *GetPublicKeyUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.GetPublicKeyRequest != nil {
		if err := r.SetBodyParam(o.GetPublicKeyRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
