// Code generated by go-swagger; DO NOT EDIT.

package n_a_t_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new n a t rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for n a t rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NatRuleCreateUsingPUT(params *NatRuleCreateUsingPUTParams, opts ...ClientOption) (*NatRuleCreateUsingPUTOK, *NatRuleCreateUsingPUTCreated, error)

	NatRuleDeleteUsingDELETE(params *NatRuleDeleteUsingDELETEParams, opts ...ClientOption) (*NatRuleDeleteUsingDELETEOK, error)

	NatRuleGetUsingGET(params *NatRuleGetUsingGETParams, opts ...ClientOption) (*NatRuleGetUsingGETOK, error)

	NatRuleListUsingGET(params *NatRuleListUsingGETParams, opts ...ClientOption) (*NatRuleListUsingGETOK, error)

	NatRuleUpdateUsingPUT(params *NatRuleUpdateUsingPUTParams, opts ...ClientOption) (*NatRuleUpdateUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NatRuleCreateUsingPUT creates

  Create NAT rule
*/
func (a *Client) NatRuleCreateUsingPUT(params *NatRuleCreateUsingPUTParams, opts ...ClientOption) (*NatRuleCreateUsingPUTOK, *NatRuleCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNatRuleCreateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "natRuleCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/network/nat/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NatRuleCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NatRuleCreateUsingPUTOK:
		return value, nil, nil
	case *NatRuleCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for n_a_t_rules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NatRuleDeleteUsingDELETE deletes

  Delete NAT rule
*/
func (a *Client) NatRuleDeleteUsingDELETE(params *NatRuleDeleteUsingDELETEParams, opts ...ClientOption) (*NatRuleDeleteUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNatRuleDeleteUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "natRuleDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/network/nat/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NatRuleDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NatRuleDeleteUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for natRuleDeleteUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NatRuleGetUsingGET gets

  Get NAT rule
*/
func (a *Client) NatRuleGetUsingGET(params *NatRuleGetUsingGETParams, opts ...ClientOption) (*NatRuleGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNatRuleGetUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "natRuleGetUsingGET",
		Method:             "GET",
		PathPattern:        "/network/nat/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NatRuleGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NatRuleGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for natRuleGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NatRuleListUsingGET lists

  List NAT rules
*/
func (a *Client) NatRuleListUsingGET(params *NatRuleListUsingGETParams, opts ...ClientOption) (*NatRuleListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNatRuleListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "natRuleListUsingGET",
		Method:             "GET",
		PathPattern:        "/network/nat/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NatRuleListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NatRuleListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for natRuleListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NatRuleUpdateUsingPUT updates

  Update NAT rule
*/
func (a *Client) NatRuleUpdateUsingPUT(params *NatRuleUpdateUsingPUTParams, opts ...ClientOption) (*NatRuleUpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNatRuleUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "natRuleUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/network/nat/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NatRuleUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NatRuleUpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for natRuleUpdateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
