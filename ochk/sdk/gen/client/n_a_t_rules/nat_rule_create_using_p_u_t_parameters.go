// Code generated by go-swagger; DO NOT EDIT.

package n_a_t_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewNatRuleCreateUsingPUTParams creates a new NatRuleCreateUsingPUTParams object
// with the default values initialized.
func NewNatRuleCreateUsingPUTParams() *NatRuleCreateUsingPUTParams {
	var ()
	return &NatRuleCreateUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewNatRuleCreateUsingPUTParamsWithTimeout creates a new NatRuleCreateUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewNatRuleCreateUsingPUTParamsWithTimeout(timeout time.Duration) *NatRuleCreateUsingPUTParams {
	var ()
	return &NatRuleCreateUsingPUTParams{

		timeout: timeout,
	}
}

// NewNatRuleCreateUsingPUTParamsWithContext creates a new NatRuleCreateUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewNatRuleCreateUsingPUTParamsWithContext(ctx context.Context) *NatRuleCreateUsingPUTParams {
	var ()
	return &NatRuleCreateUsingPUTParams{

		Context: ctx,
	}
}

// NewNatRuleCreateUsingPUTParamsWithHTTPClient creates a new NatRuleCreateUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewNatRuleCreateUsingPUTParamsWithHTTPClient(client *http.Client) *NatRuleCreateUsingPUTParams {
	var ()
	return &NatRuleCreateUsingPUTParams{
		HTTPClient: client,
	}
}

/*NatRuleCreateUsingPUTParams contains all the parameters to send to the API endpoint
for the nat rule create using p u t operation typically these are written to a http.Request
*/
type NatRuleCreateUsingPUTParams struct {

	/*NatRuleInstance
	  natRuleInstance

	*/
	NatRuleInstance *models.NATRuleInstance

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the nat rule create using p u t params
func (o *NatRuleCreateUsingPUTParams) WithTimeout(timeout time.Duration) *NatRuleCreateUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nat rule create using p u t params
func (o *NatRuleCreateUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nat rule create using p u t params
func (o *NatRuleCreateUsingPUTParams) WithContext(ctx context.Context) *NatRuleCreateUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nat rule create using p u t params
func (o *NatRuleCreateUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nat rule create using p u t params
func (o *NatRuleCreateUsingPUTParams) WithHTTPClient(client *http.Client) *NatRuleCreateUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nat rule create using p u t params
func (o *NatRuleCreateUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNatRuleInstance adds the natRuleInstance to the nat rule create using p u t params
func (o *NatRuleCreateUsingPUTParams) WithNatRuleInstance(natRuleInstance *models.NATRuleInstance) *NatRuleCreateUsingPUTParams {
	o.SetNatRuleInstance(natRuleInstance)
	return o
}

// SetNatRuleInstance adds the natRuleInstance to the nat rule create using p u t params
func (o *NatRuleCreateUsingPUTParams) SetNatRuleInstance(natRuleInstance *models.NATRuleInstance) {
	o.NatRuleInstance = natRuleInstance
}

// WriteToRequest writes these params to a swagger request
func (o *NatRuleCreateUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NatRuleInstance != nil {
		if err := r.SetBodyParam(o.NatRuleInstance); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
