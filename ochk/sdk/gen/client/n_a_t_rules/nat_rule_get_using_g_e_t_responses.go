// Code generated by go-swagger; DO NOT EDIT.

package n_a_t_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NatRuleGetUsingGETReader is a Reader for the NatRuleGetUsingGET structure.
type NatRuleGetUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NatRuleGetUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNatRuleGetUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNatRuleGetUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNatRuleGetUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewNatRuleGetUsingGETOK creates a NatRuleGetUsingGETOK with default headers values
func NewNatRuleGetUsingGETOK() *NatRuleGetUsingGETOK {
	return &NatRuleGetUsingGETOK{}
}

/*
NatRuleGetUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type NatRuleGetUsingGETOK struct {
	Payload *models.NATRuleGetResponse
}

// IsSuccess returns true when this nat rule get using g e t o k response has a 2xx status code
func (o *NatRuleGetUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this nat rule get using g e t o k response has a 3xx status code
func (o *NatRuleGetUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this nat rule get using g e t o k response has a 4xx status code
func (o *NatRuleGetUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this nat rule get using g e t o k response has a 5xx status code
func (o *NatRuleGetUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this nat rule get using g e t o k response a status code equal to that given
func (o *NatRuleGetUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the nat rule get using g e t o k response
func (o *NatRuleGetUsingGETOK) Code() int {
	return 200
}

func (o *NatRuleGetUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] natRuleGetUsingGETOK  %+v", 200, o.Payload)
}

func (o *NatRuleGetUsingGETOK) String() string {
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] natRuleGetUsingGETOK  %+v", 200, o.Payload)
}

func (o *NatRuleGetUsingGETOK) GetPayload() *models.NATRuleGetResponse {
	return o.Payload
}

func (o *NatRuleGetUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NATRuleGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNatRuleGetUsingGETBadRequest creates a NatRuleGetUsingGETBadRequest with default headers values
func NewNatRuleGetUsingGETBadRequest() *NatRuleGetUsingGETBadRequest {
	return &NatRuleGetUsingGETBadRequest{}
}

/*
NatRuleGetUsingGETBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type NatRuleGetUsingGETBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this nat rule get using g e t bad request response has a 2xx status code
func (o *NatRuleGetUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this nat rule get using g e t bad request response has a 3xx status code
func (o *NatRuleGetUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this nat rule get using g e t bad request response has a 4xx status code
func (o *NatRuleGetUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this nat rule get using g e t bad request response has a 5xx status code
func (o *NatRuleGetUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this nat rule get using g e t bad request response a status code equal to that given
func (o *NatRuleGetUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the nat rule get using g e t bad request response
func (o *NatRuleGetUsingGETBadRequest) Code() int {
	return 400
}

func (o *NatRuleGetUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] natRuleGetUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *NatRuleGetUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] natRuleGetUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *NatRuleGetUsingGETBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *NatRuleGetUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNatRuleGetUsingGETNotFound creates a NatRuleGetUsingGETNotFound with default headers values
func NewNatRuleGetUsingGETNotFound() *NatRuleGetUsingGETNotFound {
	return &NatRuleGetUsingGETNotFound{}
}

/*
NatRuleGetUsingGETNotFound describes a response with status code 404, with default header values.

Entity not found.
*/
type NatRuleGetUsingGETNotFound struct {
}

// IsSuccess returns true when this nat rule get using g e t not found response has a 2xx status code
func (o *NatRuleGetUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this nat rule get using g e t not found response has a 3xx status code
func (o *NatRuleGetUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this nat rule get using g e t not found response has a 4xx status code
func (o *NatRuleGetUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this nat rule get using g e t not found response has a 5xx status code
func (o *NatRuleGetUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this nat rule get using g e t not found response a status code equal to that given
func (o *NatRuleGetUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the nat rule get using g e t not found response
func (o *NatRuleGetUsingGETNotFound) Code() int {
	return 404
}

func (o *NatRuleGetUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] natRuleGetUsingGETNotFound ", 404)
}

func (o *NatRuleGetUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] natRuleGetUsingGETNotFound ", 404)
}

func (o *NatRuleGetUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
