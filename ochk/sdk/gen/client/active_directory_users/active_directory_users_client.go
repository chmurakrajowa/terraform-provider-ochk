// Code generated by go-swagger; DO NOT EDIT.

package active_directory_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new active directory users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for active directory users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateADUserUsingPUT(params *CreateADUserUsingPUTParams) (*CreateADUserUsingPUTOK, *CreateADUserUsingPUTCreated, error)

	DeleteADUserUsingDELETE(params *DeleteADUserUsingDELETEParams) (*DeleteADUserUsingDELETEOK, error)

	GetADUserUsingGET(params *GetADUserUsingGETParams) (*GetADUserUsingGETOK, error)

	ListADUsersUsingGET(params *ListADUsersUsingGETParams) (*ListADUsersUsingGETOK, error)

	SetPasswordADUserUsingPOST(params *SetPasswordADUserUsingPOSTParams) (*SetPasswordADUserUsingPOSTOK, error)

	UpdateADUserUsingPUT(params *UpdateADUserUsingPUTParams) (*UpdateADUserUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateADUserUsingPUT creates user

  Create user
*/
func (a *Client) CreateADUserUsingPUT(params *CreateADUserUsingPUTParams) (*CreateADUserUsingPUTOK, *CreateADUserUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateADUserUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createADUserUsingPUT",
		Method:             "PUT",
		PathPattern:        "/ad/integration/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateADUserUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateADUserUsingPUTOK:
		return value, nil, nil
	case *CreateADUserUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for active_directory_users: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteADUserUsingDELETE deletes user

  Delete user
*/
func (a *Client) DeleteADUserUsingDELETE(params *DeleteADUserUsingDELETEParams) (*DeleteADUserUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteADUserUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteADUserUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/ad/integration/users/{samAccountName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteADUserUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteADUserUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteADUserUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetADUserUsingGET gets user info

  Get user info
*/
func (a *Client) GetADUserUsingGET(params *GetADUserUsingGETParams) (*GetADUserUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetADUserUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getADUserUsingGET",
		Method:             "GET",
		PathPattern:        "/ad/integration/users/{samAccountName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetADUserUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetADUserUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getADUserUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListADUsersUsingGET lists users

  List users
*/
func (a *Client) ListADUsersUsingGET(params *ListADUsersUsingGETParams) (*ListADUsersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListADUsersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listADUsersUsingGET",
		Method:             "GET",
		PathPattern:        "/ad/integration/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListADUsersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListADUsersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listADUsersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetPasswordADUserUsingPOST sets password for user

  Set password for user
*/
func (a *Client) SetPasswordADUserUsingPOST(params *SetPasswordADUserUsingPOSTParams) (*SetPasswordADUserUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPasswordADUserUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPasswordADUserUsingPOST",
		Method:             "POST",
		PathPattern:        "/ad/integration/users/{samAccountName}/setPassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetPasswordADUserUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetPasswordADUserUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setPasswordADUserUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateADUserUsingPUT updates user

  Update user
*/
func (a *Client) UpdateADUserUsingPUT(params *UpdateADUserUsingPUTParams) (*UpdateADUserUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateADUserUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateADUserUsingPUT",
		Method:             "PUT",
		PathPattern:        "/ad/integration/users/{samAccountName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateADUserUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateADUserUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateADUserUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
