// Code generated by go-swagger; DO NOT EDIT.

package active_directory_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewCreateADUserUsingPUTParams creates a new CreateADUserUsingPUTParams object
// with the default values initialized.
func NewCreateADUserUsingPUTParams() *CreateADUserUsingPUTParams {
	var ()
	return &CreateADUserUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateADUserUsingPUTParamsWithTimeout creates a new CreateADUserUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateADUserUsingPUTParamsWithTimeout(timeout time.Duration) *CreateADUserUsingPUTParams {
	var ()
	return &CreateADUserUsingPUTParams{

		timeout: timeout,
	}
}

// NewCreateADUserUsingPUTParamsWithContext creates a new CreateADUserUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateADUserUsingPUTParamsWithContext(ctx context.Context) *CreateADUserUsingPUTParams {
	var ()
	return &CreateADUserUsingPUTParams{

		Context: ctx,
	}
}

// NewCreateADUserUsingPUTParamsWithHTTPClient creates a new CreateADUserUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateADUserUsingPUTParamsWithHTTPClient(client *http.Client) *CreateADUserUsingPUTParams {
	var ()
	return &CreateADUserUsingPUTParams{
		HTTPClient: client,
	}
}

/*CreateADUserUsingPUTParams contains all the parameters to send to the API endpoint
for the create a d user using p u t operation typically these are written to a http.Request
*/
type CreateADUserUsingPUTParams struct {

	/*UserInstance
	  userInstance

	*/
	UserInstance *models.ADUserInstance

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create a d user using p u t params
func (o *CreateADUserUsingPUTParams) WithTimeout(timeout time.Duration) *CreateADUserUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create a d user using p u t params
func (o *CreateADUserUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create a d user using p u t params
func (o *CreateADUserUsingPUTParams) WithContext(ctx context.Context) *CreateADUserUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create a d user using p u t params
func (o *CreateADUserUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create a d user using p u t params
func (o *CreateADUserUsingPUTParams) WithHTTPClient(client *http.Client) *CreateADUserUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create a d user using p u t params
func (o *CreateADUserUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserInstance adds the userInstance to the create a d user using p u t params
func (o *CreateADUserUsingPUTParams) WithUserInstance(userInstance *models.ADUserInstance) *CreateADUserUsingPUTParams {
	o.SetUserInstance(userInstance)
	return o
}

// SetUserInstance adds the userInstance to the create a d user using p u t params
func (o *CreateADUserUsingPUTParams) SetUserInstance(userInstance *models.ADUserInstance) {
	o.UserInstance = userInstance
}

// WriteToRequest writes these params to a swagger request
func (o *CreateADUserUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UserInstance != nil {
		if err := r.SetBodyParam(o.UserInstance); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
