// Code generated by go-swagger; DO NOT EDIT.

package billing_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new billing accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for billing accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AccountCreateUsingPUT(params *AccountCreateUsingPUTParams, opts ...ClientOption) (*AccountCreateUsingPUTOK, *AccountCreateUsingPUTCreated, error)

	AccountDeleteUsingDELETE(params *AccountDeleteUsingDELETEParams, opts ...ClientOption) (*AccountDeleteUsingDELETEOK, *AccountDeleteUsingDELETECreated, error)

	AccountDeleteUsingDELETE1(params *AccountDeleteUsingDELETE1Params, opts ...ClientOption) (*AccountDeleteUsingDELETE1OK, *AccountDeleteUsingDELETE1Created, error)

	AccountGetUsingGET(params *AccountGetUsingGETParams, opts ...ClientOption) (*AccountGetUsingGETOK, error)

	AccountListUsingGET(params *AccountListUsingGETParams, opts ...ClientOption) (*AccountListUsingGETOK, error)

	AccountUpdateUsingPUT(params *AccountUpdateUsingPUTParams, opts ...ClientOption) (*AccountUpdateUsingPUTOK, *AccountUpdateUsingPUTCreated, error)

	AccountUpdateUsingPUT1(params *AccountUpdateUsingPUT1Params, opts ...ClientOption) (*AccountUpdateUsingPUT1OK, *AccountUpdateUsingPUT1Created, error)

	BillingAlarmDefinitionCreateUsingPUT(params *BillingAlarmDefinitionCreateUsingPUTParams, opts ...ClientOption) (*BillingAlarmDefinitionCreateUsingPUTOK, *BillingAlarmDefinitionCreateUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccountCreateUsingPUT creates

Create account
*/
func (a *Client) AccountCreateUsingPUT(params *AccountCreateUsingPUTParams, opts ...ClientOption) (*AccountCreateUsingPUTOK, *AccountCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountCreateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "accountCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/billing/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccountCreateUsingPUTOK:
		return value, nil, nil
	case *AccountCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billing_accounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountDeleteUsingDELETE deletes

Delete account
*/
func (a *Client) AccountDeleteUsingDELETE(params *AccountDeleteUsingDELETEParams, opts ...ClientOption) (*AccountDeleteUsingDELETEOK, *AccountDeleteUsingDELETECreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountDeleteUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "accountDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/billing/accounts/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccountDeleteUsingDELETEOK:
		return value, nil, nil
	case *AccountDeleteUsingDELETECreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billing_accounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountDeleteUsingDELETE1 deletes

Delete billing alarm definition
*/
func (a *Client) AccountDeleteUsingDELETE1(params *AccountDeleteUsingDELETE1Params, opts ...ClientOption) (*AccountDeleteUsingDELETE1OK, *AccountDeleteUsingDELETE1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountDeleteUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "accountDeleteUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/billing/alarm-definition/{alarmDefinitionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountDeleteUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccountDeleteUsingDELETE1OK:
		return value, nil, nil
	case *AccountDeleteUsingDELETE1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billing_accounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountGetUsingGET gets

Get account
*/
func (a *Client) AccountGetUsingGET(params *AccountGetUsingGETParams, opts ...ClientOption) (*AccountGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountGetUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "accountGetUsingGET",
		Method:             "GET",
		PathPattern:        "/billing/accounts/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for accountGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountListUsingGET lists

List accounts
*/
func (a *Client) AccountListUsingGET(params *AccountListUsingGETParams, opts ...ClientOption) (*AccountListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "accountListUsingGET",
		Method:             "GET",
		PathPattern:        "/billing/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for accountListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountUpdateUsingPUT updates

Update account
*/
func (a *Client) AccountUpdateUsingPUT(params *AccountUpdateUsingPUTParams, opts ...ClientOption) (*AccountUpdateUsingPUTOK, *AccountUpdateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "accountUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/billing/accounts/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccountUpdateUsingPUTOK:
		return value, nil, nil
	case *AccountUpdateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billing_accounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountUpdateUsingPUT1 updates

Update billing alarm definition
*/
func (a *Client) AccountUpdateUsingPUT1(params *AccountUpdateUsingPUT1Params, opts ...ClientOption) (*AccountUpdateUsingPUT1OK, *AccountUpdateUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountUpdateUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "accountUpdateUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/billing/alarm-definition/{alarmDefinitionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountUpdateUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccountUpdateUsingPUT1OK:
		return value, nil, nil
	case *AccountUpdateUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billing_accounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingAlarmDefinitionCreateUsingPUT creates

Create billing alarm definition
*/
func (a *Client) BillingAlarmDefinitionCreateUsingPUT(params *BillingAlarmDefinitionCreateUsingPUTParams, opts ...ClientOption) (*BillingAlarmDefinitionCreateUsingPUTOK, *BillingAlarmDefinitionCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingAlarmDefinitionCreateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "billingAlarmDefinitionCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/billing/alarm-definition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingAlarmDefinitionCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BillingAlarmDefinitionCreateUsingPUTOK:
		return value, nil, nil
	case *BillingAlarmDefinitionCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billing_accounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
