// Code generated by go-swagger; DO NOT EDIT.

package billing_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// AccountUpdateUsingPUTReader is a Reader for the AccountUpdateUsingPUT structure.
type AccountUpdateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AccountUpdateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAccountUpdateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAccountUpdateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAccountUpdateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAccountUpdateUsingPUTOK creates a AccountUpdateUsingPUTOK with default headers values
func NewAccountUpdateUsingPUTOK() *AccountUpdateUsingPUTOK {
	return &AccountUpdateUsingPUTOK{}
}

/*
AccountUpdateUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type AccountUpdateUsingPUTOK struct {
	Payload *models.AccountUpdateResponse
}

// IsSuccess returns true when this account update using p u t o k response has a 2xx status code
func (o *AccountUpdateUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this account update using p u t o k response has a 3xx status code
func (o *AccountUpdateUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this account update using p u t o k response has a 4xx status code
func (o *AccountUpdateUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this account update using p u t o k response has a 5xx status code
func (o *AccountUpdateUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this account update using p u t o k response a status code equal to that given
func (o *AccountUpdateUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the account update using p u t o k response
func (o *AccountUpdateUsingPUTOK) Code() int {
	return 200
}

func (o *AccountUpdateUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] accountUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *AccountUpdateUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] accountUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *AccountUpdateUsingPUTOK) GetPayload() *models.AccountUpdateResponse {
	return o.Payload
}

func (o *AccountUpdateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountUpdateUsingPUTCreated creates a AccountUpdateUsingPUTCreated with default headers values
func NewAccountUpdateUsingPUTCreated() *AccountUpdateUsingPUTCreated {
	return &AccountUpdateUsingPUTCreated{}
}

/*
AccountUpdateUsingPUTCreated describes a response with status code 201, with default header values.

Entity has been updated
*/
type AccountUpdateUsingPUTCreated struct {
	Payload *models.AccountUpdateResponse
}

// IsSuccess returns true when this account update using p u t created response has a 2xx status code
func (o *AccountUpdateUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this account update using p u t created response has a 3xx status code
func (o *AccountUpdateUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this account update using p u t created response has a 4xx status code
func (o *AccountUpdateUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this account update using p u t created response has a 5xx status code
func (o *AccountUpdateUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this account update using p u t created response a status code equal to that given
func (o *AccountUpdateUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the account update using p u t created response
func (o *AccountUpdateUsingPUTCreated) Code() int {
	return 201
}

func (o *AccountUpdateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] accountUpdateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *AccountUpdateUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] accountUpdateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *AccountUpdateUsingPUTCreated) GetPayload() *models.AccountUpdateResponse {
	return o.Payload
}

func (o *AccountUpdateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountUpdateUsingPUTBadRequest creates a AccountUpdateUsingPUTBadRequest with default headers values
func NewAccountUpdateUsingPUTBadRequest() *AccountUpdateUsingPUTBadRequest {
	return &AccountUpdateUsingPUTBadRequest{}
}

/*
AccountUpdateUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type AccountUpdateUsingPUTBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this account update using p u t bad request response has a 2xx status code
func (o *AccountUpdateUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this account update using p u t bad request response has a 3xx status code
func (o *AccountUpdateUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this account update using p u t bad request response has a 4xx status code
func (o *AccountUpdateUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this account update using p u t bad request response has a 5xx status code
func (o *AccountUpdateUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this account update using p u t bad request response a status code equal to that given
func (o *AccountUpdateUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the account update using p u t bad request response
func (o *AccountUpdateUsingPUTBadRequest) Code() int {
	return 400
}

func (o *AccountUpdateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] accountUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *AccountUpdateUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] accountUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *AccountUpdateUsingPUTBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *AccountUpdateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
