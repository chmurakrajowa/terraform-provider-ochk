// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_s_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// GfwRuleDeleteUsingDELETEReader is a Reader for the GfwRuleDeleteUsingDELETE structure.
type GfwRuleDeleteUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GfwRuleDeleteUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGfwRuleDeleteUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewGfwRuleDeleteUsingDELETECreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGfwRuleDeleteUsingDELETEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGfwRuleDeleteUsingDELETEOK creates a GfwRuleDeleteUsingDELETEOK with default headers values
func NewGfwRuleDeleteUsingDELETEOK() *GfwRuleDeleteUsingDELETEOK {
	return &GfwRuleDeleteUsingDELETEOK{}
}

/*
GfwRuleDeleteUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type GfwRuleDeleteUsingDELETEOK struct {
	Payload *models.DeleteGFWRuleResponse
}

// IsSuccess returns true when this gfw rule delete using d e l e t e o k response has a 2xx status code
func (o *GfwRuleDeleteUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this gfw rule delete using d e l e t e o k response has a 3xx status code
func (o *GfwRuleDeleteUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gfw rule delete using d e l e t e o k response has a 4xx status code
func (o *GfwRuleDeleteUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this gfw rule delete using d e l e t e o k response has a 5xx status code
func (o *GfwRuleDeleteUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this gfw rule delete using d e l e t e o k response a status code equal to that given
func (o *GfwRuleDeleteUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the gfw rule delete using d e l e t e o k response
func (o *GfwRuleDeleteUsingDELETEOK) Code() int {
	return 200
}

func (o *GfwRuleDeleteUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleDeleteUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *GfwRuleDeleteUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleDeleteUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *GfwRuleDeleteUsingDELETEOK) GetPayload() *models.DeleteGFWRuleResponse {
	return o.Payload
}

func (o *GfwRuleDeleteUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteGFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGfwRuleDeleteUsingDELETECreated creates a GfwRuleDeleteUsingDELETECreated with default headers values
func NewGfwRuleDeleteUsingDELETECreated() *GfwRuleDeleteUsingDELETECreated {
	return &GfwRuleDeleteUsingDELETECreated{}
}

/*
GfwRuleDeleteUsingDELETECreated describes a response with status code 201, with default header values.

Entity has been deleted
*/
type GfwRuleDeleteUsingDELETECreated struct {
	Payload *models.DeleteGFWRuleResponse
}

// IsSuccess returns true when this gfw rule delete using d e l e t e created response has a 2xx status code
func (o *GfwRuleDeleteUsingDELETECreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this gfw rule delete using d e l e t e created response has a 3xx status code
func (o *GfwRuleDeleteUsingDELETECreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gfw rule delete using d e l e t e created response has a 4xx status code
func (o *GfwRuleDeleteUsingDELETECreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this gfw rule delete using d e l e t e created response has a 5xx status code
func (o *GfwRuleDeleteUsingDELETECreated) IsServerError() bool {
	return false
}

// IsCode returns true when this gfw rule delete using d e l e t e created response a status code equal to that given
func (o *GfwRuleDeleteUsingDELETECreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the gfw rule delete using d e l e t e created response
func (o *GfwRuleDeleteUsingDELETECreated) Code() int {
	return 201
}

func (o *GfwRuleDeleteUsingDELETECreated) Error() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleDeleteUsingDELETECreated  %+v", 201, o.Payload)
}

func (o *GfwRuleDeleteUsingDELETECreated) String() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleDeleteUsingDELETECreated  %+v", 201, o.Payload)
}

func (o *GfwRuleDeleteUsingDELETECreated) GetPayload() *models.DeleteGFWRuleResponse {
	return o.Payload
}

func (o *GfwRuleDeleteUsingDELETECreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteGFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGfwRuleDeleteUsingDELETEBadRequest creates a GfwRuleDeleteUsingDELETEBadRequest with default headers values
func NewGfwRuleDeleteUsingDELETEBadRequest() *GfwRuleDeleteUsingDELETEBadRequest {
	return &GfwRuleDeleteUsingDELETEBadRequest{}
}

/*
GfwRuleDeleteUsingDELETEBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type GfwRuleDeleteUsingDELETEBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this gfw rule delete using d e l e t e bad request response has a 2xx status code
func (o *GfwRuleDeleteUsingDELETEBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this gfw rule delete using d e l e t e bad request response has a 3xx status code
func (o *GfwRuleDeleteUsingDELETEBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gfw rule delete using d e l e t e bad request response has a 4xx status code
func (o *GfwRuleDeleteUsingDELETEBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this gfw rule delete using d e l e t e bad request response has a 5xx status code
func (o *GfwRuleDeleteUsingDELETEBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this gfw rule delete using d e l e t e bad request response a status code equal to that given
func (o *GfwRuleDeleteUsingDELETEBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the gfw rule delete using d e l e t e bad request response
func (o *GfwRuleDeleteUsingDELETEBadRequest) Code() int {
	return 400
}

func (o *GfwRuleDeleteUsingDELETEBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleDeleteUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *GfwRuleDeleteUsingDELETEBadRequest) String() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleDeleteUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *GfwRuleDeleteUsingDELETEBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *GfwRuleDeleteUsingDELETEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
