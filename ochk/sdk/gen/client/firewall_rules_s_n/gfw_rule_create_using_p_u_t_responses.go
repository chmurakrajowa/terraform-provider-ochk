// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_s_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// GfwRuleCreateUsingPUTReader is a Reader for the GfwRuleCreateUsingPUT structure.
type GfwRuleCreateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GfwRuleCreateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGfwRuleCreateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewGfwRuleCreateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGfwRuleCreateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /network/routers/{routerId}/rules/s-n] gfwRuleCreateUsingPUT", response, response.Code())
	}
}

// NewGfwRuleCreateUsingPUTOK creates a GfwRuleCreateUsingPUTOK with default headers values
func NewGfwRuleCreateUsingPUTOK() *GfwRuleCreateUsingPUTOK {
	return &GfwRuleCreateUsingPUTOK{}
}

/*
GfwRuleCreateUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type GfwRuleCreateUsingPUTOK struct {
	Payload *models.CreateGFWRuleResponse
}

// IsSuccess returns true when this gfw rule create using p u t o k response has a 2xx status code
func (o *GfwRuleCreateUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this gfw rule create using p u t o k response has a 3xx status code
func (o *GfwRuleCreateUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gfw rule create using p u t o k response has a 4xx status code
func (o *GfwRuleCreateUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this gfw rule create using p u t o k response has a 5xx status code
func (o *GfwRuleCreateUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this gfw rule create using p u t o k response a status code equal to that given
func (o *GfwRuleCreateUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the gfw rule create using p u t o k response
func (o *GfwRuleCreateUsingPUTOK) Code() int {
	return 200
}

func (o *GfwRuleCreateUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n][%d] gfwRuleCreateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *GfwRuleCreateUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n][%d] gfwRuleCreateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *GfwRuleCreateUsingPUTOK) GetPayload() *models.CreateGFWRuleResponse {
	return o.Payload
}

func (o *GfwRuleCreateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateGFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGfwRuleCreateUsingPUTCreated creates a GfwRuleCreateUsingPUTCreated with default headers values
func NewGfwRuleCreateUsingPUTCreated() *GfwRuleCreateUsingPUTCreated {
	return &GfwRuleCreateUsingPUTCreated{}
}

/*
GfwRuleCreateUsingPUTCreated describes a response with status code 201, with default header values.

Entity has been created
*/
type GfwRuleCreateUsingPUTCreated struct {
	Payload *models.CreateGFWRuleResponse
}

// IsSuccess returns true when this gfw rule create using p u t created response has a 2xx status code
func (o *GfwRuleCreateUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this gfw rule create using p u t created response has a 3xx status code
func (o *GfwRuleCreateUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gfw rule create using p u t created response has a 4xx status code
func (o *GfwRuleCreateUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this gfw rule create using p u t created response has a 5xx status code
func (o *GfwRuleCreateUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this gfw rule create using p u t created response a status code equal to that given
func (o *GfwRuleCreateUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the gfw rule create using p u t created response
func (o *GfwRuleCreateUsingPUTCreated) Code() int {
	return 201
}

func (o *GfwRuleCreateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n][%d] gfwRuleCreateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *GfwRuleCreateUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n][%d] gfwRuleCreateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *GfwRuleCreateUsingPUTCreated) GetPayload() *models.CreateGFWRuleResponse {
	return o.Payload
}

func (o *GfwRuleCreateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateGFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGfwRuleCreateUsingPUTBadRequest creates a GfwRuleCreateUsingPUTBadRequest with default headers values
func NewGfwRuleCreateUsingPUTBadRequest() *GfwRuleCreateUsingPUTBadRequest {
	return &GfwRuleCreateUsingPUTBadRequest{}
}

/*
GfwRuleCreateUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type GfwRuleCreateUsingPUTBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this gfw rule create using p u t bad request response has a 2xx status code
func (o *GfwRuleCreateUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this gfw rule create using p u t bad request response has a 3xx status code
func (o *GfwRuleCreateUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gfw rule create using p u t bad request response has a 4xx status code
func (o *GfwRuleCreateUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this gfw rule create using p u t bad request response has a 5xx status code
func (o *GfwRuleCreateUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this gfw rule create using p u t bad request response a status code equal to that given
func (o *GfwRuleCreateUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the gfw rule create using p u t bad request response
func (o *GfwRuleCreateUsingPUTBadRequest) Code() int {
	return 400
}

func (o *GfwRuleCreateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n][%d] gfwRuleCreateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *GfwRuleCreateUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n][%d] gfwRuleCreateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *GfwRuleCreateUsingPUTBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *GfwRuleCreateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
