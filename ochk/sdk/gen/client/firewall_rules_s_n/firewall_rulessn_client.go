// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_s_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new firewall rules s n API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for firewall rules s n API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GfwRuleCreateUsingPUT(params *GfwRuleCreateUsingPUTParams, opts ...ClientOption) (*GfwRuleCreateUsingPUTOK, *GfwRuleCreateUsingPUTCreated, error)

	GfwRuleDeleteUsingDELETE(params *GfwRuleDeleteUsingDELETEParams, opts ...ClientOption) (*GfwRuleDeleteUsingDELETEOK, *GfwRuleDeleteUsingDELETECreated, error)

	GfwRuleGetUsingGET(params *GfwRuleGetUsingGETParams, opts ...ClientOption) (*GfwRuleGetUsingGETOK, error)

	GfwRuleListUsingGET(params *GfwRuleListUsingGETParams, opts ...ClientOption) (*GfwRuleListUsingGETOK, error)

	GfwRuleUpdateUsingPUT(params *GfwRuleUpdateUsingPUTParams, opts ...ClientOption) (*GfwRuleUpdateUsingPUTOK, *GfwRuleUpdateUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GfwRuleCreateUsingPUT creates

Create firewall rule (south-north) in NSX-T
*/
func (a *Client) GfwRuleCreateUsingPUT(params *GfwRuleCreateUsingPUTParams, opts ...ClientOption) (*GfwRuleCreateUsingPUTOK, *GfwRuleCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGfwRuleCreateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gfwRuleCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/network/routers/{routerId}/rules/s-n",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GfwRuleCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GfwRuleCreateUsingPUTOK:
		return value, nil, nil
	case *GfwRuleCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for firewall_rules_s_n: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GfwRuleDeleteUsingDELETE deletes

Delete firewall rule (south-north) from NSX-T
*/
func (a *Client) GfwRuleDeleteUsingDELETE(params *GfwRuleDeleteUsingDELETEParams, opts ...ClientOption) (*GfwRuleDeleteUsingDELETEOK, *GfwRuleDeleteUsingDELETECreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGfwRuleDeleteUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gfwRuleDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/network/routers/{routerId}/rules/s-n/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GfwRuleDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GfwRuleDeleteUsingDELETEOK:
		return value, nil, nil
	case *GfwRuleDeleteUsingDELETECreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for firewall_rules_s_n: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GfwRuleGetUsingGET gets

Get firewall rule (south-north) from NSX-T
*/
func (a *Client) GfwRuleGetUsingGET(params *GfwRuleGetUsingGETParams, opts ...ClientOption) (*GfwRuleGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGfwRuleGetUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gfwRuleGetUsingGET",
		Method:             "GET",
		PathPattern:        "/network/routers/{routerId}/rules/s-n/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GfwRuleGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GfwRuleGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for gfwRuleGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GfwRuleListUsingGET lists

List firewall rules (south-north) from NSX-T
*/
func (a *Client) GfwRuleListUsingGET(params *GfwRuleListUsingGETParams, opts ...ClientOption) (*GfwRuleListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGfwRuleListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gfwRuleListUsingGET",
		Method:             "GET",
		PathPattern:        "/network/routers/{routerId}/rules/s-n",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GfwRuleListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GfwRuleListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for gfwRuleListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GfwRuleUpdateUsingPUT updates

Create firewall rule (south-north) in NSX-T
*/
func (a *Client) GfwRuleUpdateUsingPUT(params *GfwRuleUpdateUsingPUTParams, opts ...ClientOption) (*GfwRuleUpdateUsingPUTOK, *GfwRuleUpdateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGfwRuleUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gfwRuleUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/network/routers/{routerId}/rules/s-n/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GfwRuleUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GfwRuleUpdateUsingPUTOK:
		return value, nil, nil
	case *GfwRuleUpdateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for firewall_rules_s_n: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
