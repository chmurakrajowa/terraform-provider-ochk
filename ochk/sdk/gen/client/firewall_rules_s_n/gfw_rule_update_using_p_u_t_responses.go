// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_s_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// GfwRuleUpdateUsingPUTReader is a Reader for the GfwRuleUpdateUsingPUT structure.
type GfwRuleUpdateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GfwRuleUpdateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGfwRuleUpdateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewGfwRuleUpdateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGfwRuleUpdateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /network/routers/{routerId}/rules/s-n/{ruleId}] gfwRuleUpdateUsingPUT", response, response.Code())
	}
}

// NewGfwRuleUpdateUsingPUTOK creates a GfwRuleUpdateUsingPUTOK with default headers values
func NewGfwRuleUpdateUsingPUTOK() *GfwRuleUpdateUsingPUTOK {
	return &GfwRuleUpdateUsingPUTOK{}
}

/*
GfwRuleUpdateUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type GfwRuleUpdateUsingPUTOK struct {
	Payload *models.UpdateGFWRuleResponse
}

// IsSuccess returns true when this gfw rule update using p u t o k response has a 2xx status code
func (o *GfwRuleUpdateUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this gfw rule update using p u t o k response has a 3xx status code
func (o *GfwRuleUpdateUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gfw rule update using p u t o k response has a 4xx status code
func (o *GfwRuleUpdateUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this gfw rule update using p u t o k response has a 5xx status code
func (o *GfwRuleUpdateUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this gfw rule update using p u t o k response a status code equal to that given
func (o *GfwRuleUpdateUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the gfw rule update using p u t o k response
func (o *GfwRuleUpdateUsingPUTOK) Code() int {
	return 200
}

func (o *GfwRuleUpdateUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *GfwRuleUpdateUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *GfwRuleUpdateUsingPUTOK) GetPayload() *models.UpdateGFWRuleResponse {
	return o.Payload
}

func (o *GfwRuleUpdateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateGFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGfwRuleUpdateUsingPUTCreated creates a GfwRuleUpdateUsingPUTCreated with default headers values
func NewGfwRuleUpdateUsingPUTCreated() *GfwRuleUpdateUsingPUTCreated {
	return &GfwRuleUpdateUsingPUTCreated{}
}

/*
GfwRuleUpdateUsingPUTCreated describes a response with status code 201, with default header values.

Entity has been updated
*/
type GfwRuleUpdateUsingPUTCreated struct {
	Payload *models.UpdateGFWRuleResponse
}

// IsSuccess returns true when this gfw rule update using p u t created response has a 2xx status code
func (o *GfwRuleUpdateUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this gfw rule update using p u t created response has a 3xx status code
func (o *GfwRuleUpdateUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gfw rule update using p u t created response has a 4xx status code
func (o *GfwRuleUpdateUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this gfw rule update using p u t created response has a 5xx status code
func (o *GfwRuleUpdateUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this gfw rule update using p u t created response a status code equal to that given
func (o *GfwRuleUpdateUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the gfw rule update using p u t created response
func (o *GfwRuleUpdateUsingPUTCreated) Code() int {
	return 201
}

func (o *GfwRuleUpdateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleUpdateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *GfwRuleUpdateUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleUpdateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *GfwRuleUpdateUsingPUTCreated) GetPayload() *models.UpdateGFWRuleResponse {
	return o.Payload
}

func (o *GfwRuleUpdateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateGFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGfwRuleUpdateUsingPUTBadRequest creates a GfwRuleUpdateUsingPUTBadRequest with default headers values
func NewGfwRuleUpdateUsingPUTBadRequest() *GfwRuleUpdateUsingPUTBadRequest {
	return &GfwRuleUpdateUsingPUTBadRequest{}
}

/*
GfwRuleUpdateUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type GfwRuleUpdateUsingPUTBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this gfw rule update using p u t bad request response has a 2xx status code
func (o *GfwRuleUpdateUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this gfw rule update using p u t bad request response has a 3xx status code
func (o *GfwRuleUpdateUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this gfw rule update using p u t bad request response has a 4xx status code
func (o *GfwRuleUpdateUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this gfw rule update using p u t bad request response has a 5xx status code
func (o *GfwRuleUpdateUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this gfw rule update using p u t bad request response a status code equal to that given
func (o *GfwRuleUpdateUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the gfw rule update using p u t bad request response
func (o *GfwRuleUpdateUsingPUTBadRequest) Code() int {
	return 400
}

func (o *GfwRuleUpdateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *GfwRuleUpdateUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/s-n/{ruleId}][%d] gfwRuleUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *GfwRuleUpdateUsingPUTBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *GfwRuleUpdateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
