// Code generated by go-swagger; DO NOT EDIT.

package virtual_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// VirtualNetworkGetUsingGETReader is a Reader for the VirtualNetworkGetUsingGET structure.
type VirtualNetworkGetUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VirtualNetworkGetUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVirtualNetworkGetUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVirtualNetworkGetUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVirtualNetworkGetUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVirtualNetworkGetUsingGETOK creates a VirtualNetworkGetUsingGETOK with default headers values
func NewVirtualNetworkGetUsingGETOK() *VirtualNetworkGetUsingGETOK {
	return &VirtualNetworkGetUsingGETOK{}
}

/*
VirtualNetworkGetUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type VirtualNetworkGetUsingGETOK struct {
	Payload *models.VirtualNetworkGetResponse
}

// IsSuccess returns true when this virtual network get using g e t o k response has a 2xx status code
func (o *VirtualNetworkGetUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this virtual network get using g e t o k response has a 3xx status code
func (o *VirtualNetworkGetUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this virtual network get using g e t o k response has a 4xx status code
func (o *VirtualNetworkGetUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this virtual network get using g e t o k response has a 5xx status code
func (o *VirtualNetworkGetUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this virtual network get using g e t o k response a status code equal to that given
func (o *VirtualNetworkGetUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the virtual network get using g e t o k response
func (o *VirtualNetworkGetUsingGETOK) Code() int {
	return 200
}

func (o *VirtualNetworkGetUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] virtualNetworkGetUsingGETOK  %+v", 200, o.Payload)
}

func (o *VirtualNetworkGetUsingGETOK) String() string {
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] virtualNetworkGetUsingGETOK  %+v", 200, o.Payload)
}

func (o *VirtualNetworkGetUsingGETOK) GetPayload() *models.VirtualNetworkGetResponse {
	return o.Payload
}

func (o *VirtualNetworkGetUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VirtualNetworkGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVirtualNetworkGetUsingGETBadRequest creates a VirtualNetworkGetUsingGETBadRequest with default headers values
func NewVirtualNetworkGetUsingGETBadRequest() *VirtualNetworkGetUsingGETBadRequest {
	return &VirtualNetworkGetUsingGETBadRequest{}
}

/*
VirtualNetworkGetUsingGETBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type VirtualNetworkGetUsingGETBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this virtual network get using g e t bad request response has a 2xx status code
func (o *VirtualNetworkGetUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this virtual network get using g e t bad request response has a 3xx status code
func (o *VirtualNetworkGetUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this virtual network get using g e t bad request response has a 4xx status code
func (o *VirtualNetworkGetUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this virtual network get using g e t bad request response has a 5xx status code
func (o *VirtualNetworkGetUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this virtual network get using g e t bad request response a status code equal to that given
func (o *VirtualNetworkGetUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the virtual network get using g e t bad request response
func (o *VirtualNetworkGetUsingGETBadRequest) Code() int {
	return 400
}

func (o *VirtualNetworkGetUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] virtualNetworkGetUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *VirtualNetworkGetUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] virtualNetworkGetUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *VirtualNetworkGetUsingGETBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *VirtualNetworkGetUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVirtualNetworkGetUsingGETNotFound creates a VirtualNetworkGetUsingGETNotFound with default headers values
func NewVirtualNetworkGetUsingGETNotFound() *VirtualNetworkGetUsingGETNotFound {
	return &VirtualNetworkGetUsingGETNotFound{}
}

/*
VirtualNetworkGetUsingGETNotFound describes a response with status code 404, with default header values.

Entity not found.
*/
type VirtualNetworkGetUsingGETNotFound struct {
}

// IsSuccess returns true when this virtual network get using g e t not found response has a 2xx status code
func (o *VirtualNetworkGetUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this virtual network get using g e t not found response has a 3xx status code
func (o *VirtualNetworkGetUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this virtual network get using g e t not found response has a 4xx status code
func (o *VirtualNetworkGetUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this virtual network get using g e t not found response has a 5xx status code
func (o *VirtualNetworkGetUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this virtual network get using g e t not found response a status code equal to that given
func (o *VirtualNetworkGetUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the virtual network get using g e t not found response
func (o *VirtualNetworkGetUsingGETNotFound) Code() int {
	return 404
}

func (o *VirtualNetworkGetUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] virtualNetworkGetUsingGETNotFound ", 404)
}

func (o *VirtualNetworkGetUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] virtualNetworkGetUsingGETNotFound ", 404)
}

func (o *VirtualNetworkGetUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
