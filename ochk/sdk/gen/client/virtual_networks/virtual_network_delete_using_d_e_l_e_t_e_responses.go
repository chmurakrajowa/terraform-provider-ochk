// Code generated by go-swagger; DO NOT EDIT.

package virtual_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// VirtualNetworkDeleteUsingDELETEReader is a Reader for the VirtualNetworkDeleteUsingDELETE structure.
type VirtualNetworkDeleteUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VirtualNetworkDeleteUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVirtualNetworkDeleteUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewVirtualNetworkDeleteUsingDELETECreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVirtualNetworkDeleteUsingDELETEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVirtualNetworkDeleteUsingDELETEOK creates a VirtualNetworkDeleteUsingDELETEOK with default headers values
func NewVirtualNetworkDeleteUsingDELETEOK() *VirtualNetworkDeleteUsingDELETEOK {
	return &VirtualNetworkDeleteUsingDELETEOK{}
}

/*
VirtualNetworkDeleteUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type VirtualNetworkDeleteUsingDELETEOK struct {
	Payload *models.VirtualNetworkDeleteResponse
}

// IsSuccess returns true when this virtual network delete using d e l e t e o k response has a 2xx status code
func (o *VirtualNetworkDeleteUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this virtual network delete using d e l e t e o k response has a 3xx status code
func (o *VirtualNetworkDeleteUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this virtual network delete using d e l e t e o k response has a 4xx status code
func (o *VirtualNetworkDeleteUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this virtual network delete using d e l e t e o k response has a 5xx status code
func (o *VirtualNetworkDeleteUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this virtual network delete using d e l e t e o k response a status code equal to that given
func (o *VirtualNetworkDeleteUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the virtual network delete using d e l e t e o k response
func (o *VirtualNetworkDeleteUsingDELETEOK) Code() int {
	return 200
}

func (o *VirtualNetworkDeleteUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] virtualNetworkDeleteUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *VirtualNetworkDeleteUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] virtualNetworkDeleteUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *VirtualNetworkDeleteUsingDELETEOK) GetPayload() *models.VirtualNetworkDeleteResponse {
	return o.Payload
}

func (o *VirtualNetworkDeleteUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VirtualNetworkDeleteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVirtualNetworkDeleteUsingDELETECreated creates a VirtualNetworkDeleteUsingDELETECreated with default headers values
func NewVirtualNetworkDeleteUsingDELETECreated() *VirtualNetworkDeleteUsingDELETECreated {
	return &VirtualNetworkDeleteUsingDELETECreated{}
}

/*
VirtualNetworkDeleteUsingDELETECreated describes a response with status code 201, with default header values.

Entity has been deleted
*/
type VirtualNetworkDeleteUsingDELETECreated struct {
	Payload *models.VirtualNetworkDeleteResponse
}

// IsSuccess returns true when this virtual network delete using d e l e t e created response has a 2xx status code
func (o *VirtualNetworkDeleteUsingDELETECreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this virtual network delete using d e l e t e created response has a 3xx status code
func (o *VirtualNetworkDeleteUsingDELETECreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this virtual network delete using d e l e t e created response has a 4xx status code
func (o *VirtualNetworkDeleteUsingDELETECreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this virtual network delete using d e l e t e created response has a 5xx status code
func (o *VirtualNetworkDeleteUsingDELETECreated) IsServerError() bool {
	return false
}

// IsCode returns true when this virtual network delete using d e l e t e created response a status code equal to that given
func (o *VirtualNetworkDeleteUsingDELETECreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the virtual network delete using d e l e t e created response
func (o *VirtualNetworkDeleteUsingDELETECreated) Code() int {
	return 201
}

func (o *VirtualNetworkDeleteUsingDELETECreated) Error() string {
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] virtualNetworkDeleteUsingDELETECreated  %+v", 201, o.Payload)
}

func (o *VirtualNetworkDeleteUsingDELETECreated) String() string {
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] virtualNetworkDeleteUsingDELETECreated  %+v", 201, o.Payload)
}

func (o *VirtualNetworkDeleteUsingDELETECreated) GetPayload() *models.VirtualNetworkDeleteResponse {
	return o.Payload
}

func (o *VirtualNetworkDeleteUsingDELETECreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VirtualNetworkDeleteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVirtualNetworkDeleteUsingDELETEBadRequest creates a VirtualNetworkDeleteUsingDELETEBadRequest with default headers values
func NewVirtualNetworkDeleteUsingDELETEBadRequest() *VirtualNetworkDeleteUsingDELETEBadRequest {
	return &VirtualNetworkDeleteUsingDELETEBadRequest{}
}

/*
VirtualNetworkDeleteUsingDELETEBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type VirtualNetworkDeleteUsingDELETEBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this virtual network delete using d e l e t e bad request response has a 2xx status code
func (o *VirtualNetworkDeleteUsingDELETEBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this virtual network delete using d e l e t e bad request response has a 3xx status code
func (o *VirtualNetworkDeleteUsingDELETEBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this virtual network delete using d e l e t e bad request response has a 4xx status code
func (o *VirtualNetworkDeleteUsingDELETEBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this virtual network delete using d e l e t e bad request response has a 5xx status code
func (o *VirtualNetworkDeleteUsingDELETEBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this virtual network delete using d e l e t e bad request response a status code equal to that given
func (o *VirtualNetworkDeleteUsingDELETEBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the virtual network delete using d e l e t e bad request response
func (o *VirtualNetworkDeleteUsingDELETEBadRequest) Code() int {
	return 400
}

func (o *VirtualNetworkDeleteUsingDELETEBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] virtualNetworkDeleteUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *VirtualNetworkDeleteUsingDELETEBadRequest) String() string {
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] virtualNetworkDeleteUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *VirtualNetworkDeleteUsingDELETEBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *VirtualNetworkDeleteUsingDELETEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
