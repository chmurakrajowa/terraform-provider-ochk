// Code generated by go-swagger; DO NOT EDIT.

package virtual_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// VirtualNetworkUpdateUsingPUTReader is a Reader for the VirtualNetworkUpdateUsingPUT structure.
type VirtualNetworkUpdateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VirtualNetworkUpdateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVirtualNetworkUpdateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewVirtualNetworkUpdateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVirtualNetworkUpdateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVirtualNetworkUpdateUsingPUTOK creates a VirtualNetworkUpdateUsingPUTOK with default headers values
func NewVirtualNetworkUpdateUsingPUTOK() *VirtualNetworkUpdateUsingPUTOK {
	return &VirtualNetworkUpdateUsingPUTOK{}
}

/*
VirtualNetworkUpdateUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type VirtualNetworkUpdateUsingPUTOK struct {
	Payload *models.VirtualNetworkUpdateResponse
}

// IsSuccess returns true when this virtual network update using p u t o k response has a 2xx status code
func (o *VirtualNetworkUpdateUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this virtual network update using p u t o k response has a 3xx status code
func (o *VirtualNetworkUpdateUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this virtual network update using p u t o k response has a 4xx status code
func (o *VirtualNetworkUpdateUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this virtual network update using p u t o k response has a 5xx status code
func (o *VirtualNetworkUpdateUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this virtual network update using p u t o k response a status code equal to that given
func (o *VirtualNetworkUpdateUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the virtual network update using p u t o k response
func (o *VirtualNetworkUpdateUsingPUTOK) Code() int {
	return 200
}

func (o *VirtualNetworkUpdateUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{virtualNetworkId}][%d] virtualNetworkUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *VirtualNetworkUpdateUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /networks/{virtualNetworkId}][%d] virtualNetworkUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *VirtualNetworkUpdateUsingPUTOK) GetPayload() *models.VirtualNetworkUpdateResponse {
	return o.Payload
}

func (o *VirtualNetworkUpdateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VirtualNetworkUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVirtualNetworkUpdateUsingPUTCreated creates a VirtualNetworkUpdateUsingPUTCreated with default headers values
func NewVirtualNetworkUpdateUsingPUTCreated() *VirtualNetworkUpdateUsingPUTCreated {
	return &VirtualNetworkUpdateUsingPUTCreated{}
}

/*
VirtualNetworkUpdateUsingPUTCreated describes a response with status code 201, with default header values.

Entity has been updated
*/
type VirtualNetworkUpdateUsingPUTCreated struct {
	Payload *models.VirtualNetworkUpdateResponse
}

// IsSuccess returns true when this virtual network update using p u t created response has a 2xx status code
func (o *VirtualNetworkUpdateUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this virtual network update using p u t created response has a 3xx status code
func (o *VirtualNetworkUpdateUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this virtual network update using p u t created response has a 4xx status code
func (o *VirtualNetworkUpdateUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this virtual network update using p u t created response has a 5xx status code
func (o *VirtualNetworkUpdateUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this virtual network update using p u t created response a status code equal to that given
func (o *VirtualNetworkUpdateUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the virtual network update using p u t created response
func (o *VirtualNetworkUpdateUsingPUTCreated) Code() int {
	return 201
}

func (o *VirtualNetworkUpdateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /networks/{virtualNetworkId}][%d] virtualNetworkUpdateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *VirtualNetworkUpdateUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /networks/{virtualNetworkId}][%d] virtualNetworkUpdateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *VirtualNetworkUpdateUsingPUTCreated) GetPayload() *models.VirtualNetworkUpdateResponse {
	return o.Payload
}

func (o *VirtualNetworkUpdateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VirtualNetworkUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVirtualNetworkUpdateUsingPUTBadRequest creates a VirtualNetworkUpdateUsingPUTBadRequest with default headers values
func NewVirtualNetworkUpdateUsingPUTBadRequest() *VirtualNetworkUpdateUsingPUTBadRequest {
	return &VirtualNetworkUpdateUsingPUTBadRequest{}
}

/*
VirtualNetworkUpdateUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type VirtualNetworkUpdateUsingPUTBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this virtual network update using p u t bad request response has a 2xx status code
func (o *VirtualNetworkUpdateUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this virtual network update using p u t bad request response has a 3xx status code
func (o *VirtualNetworkUpdateUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this virtual network update using p u t bad request response has a 4xx status code
func (o *VirtualNetworkUpdateUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this virtual network update using p u t bad request response has a 5xx status code
func (o *VirtualNetworkUpdateUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this virtual network update using p u t bad request response a status code equal to that given
func (o *VirtualNetworkUpdateUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the virtual network update using p u t bad request response
func (o *VirtualNetworkUpdateUsingPUTBadRequest) Code() int {
	return 400
}

func (o *VirtualNetworkUpdateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /networks/{virtualNetworkId}][%d] virtualNetworkUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *VirtualNetworkUpdateUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /networks/{virtualNetworkId}][%d] virtualNetworkUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *VirtualNetworkUpdateUsingPUTBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *VirtualNetworkUpdateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
