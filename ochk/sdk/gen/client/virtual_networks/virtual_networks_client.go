// Code generated by go-swagger; DO NOT EDIT.

package virtual_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	VirtualNetworkCreateUsingPUT(params *VirtualNetworkCreateUsingPUTParams, opts ...ClientOption) (*VirtualNetworkCreateUsingPUTOK, *VirtualNetworkCreateUsingPUTCreated, error)

	VirtualNetworkDeleteUsingDELETE(params *VirtualNetworkDeleteUsingDELETEParams, opts ...ClientOption) (*VirtualNetworkDeleteUsingDELETEOK, *VirtualNetworkDeleteUsingDELETECreated, error)

	VirtualNetworkGetUsingGET(params *VirtualNetworkGetUsingGETParams, opts ...ClientOption) (*VirtualNetworkGetUsingGETOK, error)

	VirtualNetworkListUsingGET(params *VirtualNetworkListUsingGETParams, opts ...ClientOption) (*VirtualNetworkListUsingGETOK, error)

	VirtualNetworkUpdateUsingPUT(params *VirtualNetworkUpdateUsingPUTParams, opts ...ClientOption) (*VirtualNetworkUpdateUsingPUTOK, *VirtualNetworkUpdateUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  VirtualNetworkCreateUsingPUT creates

  Create virtual network
*/
func (a *Client) VirtualNetworkCreateUsingPUT(params *VirtualNetworkCreateUsingPUTParams, opts ...ClientOption) (*VirtualNetworkCreateUsingPUTOK, *VirtualNetworkCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkCreateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "virtualNetworkCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualNetworkCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkCreateUsingPUTOK:
		return value, nil, nil
	case *VirtualNetworkCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for virtual_networks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VirtualNetworkDeleteUsingDELETE deletes

  Delete virtual network
*/
func (a *Client) VirtualNetworkDeleteUsingDELETE(params *VirtualNetworkDeleteUsingDELETEParams, opts ...ClientOption) (*VirtualNetworkDeleteUsingDELETEOK, *VirtualNetworkDeleteUsingDELETECreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkDeleteUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "virtualNetworkDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/networks/{virtualNetworkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualNetworkDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkDeleteUsingDELETEOK:
		return value, nil, nil
	case *VirtualNetworkDeleteUsingDELETECreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for virtual_networks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VirtualNetworkGetUsingGET gets

  Get virtual network
*/
func (a *Client) VirtualNetworkGetUsingGET(params *VirtualNetworkGetUsingGETParams, opts ...ClientOption) (*VirtualNetworkGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGetUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "virtualNetworkGetUsingGET",
		Method:             "GET",
		PathPattern:        "/networks/{virtualNetworkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualNetworkGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VirtualNetworkGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for virtualNetworkGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VirtualNetworkListUsingGET lists

  List virtual network
*/
func (a *Client) VirtualNetworkListUsingGET(params *VirtualNetworkListUsingGETParams, opts ...ClientOption) (*VirtualNetworkListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "virtualNetworkListUsingGET",
		Method:             "GET",
		PathPattern:        "/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualNetworkListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VirtualNetworkListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for virtualNetworkListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VirtualNetworkUpdateUsingPUT updates

  Update virtual network
*/
func (a *Client) VirtualNetworkUpdateUsingPUT(params *VirtualNetworkUpdateUsingPUTParams, opts ...ClientOption) (*VirtualNetworkUpdateUsingPUTOK, *VirtualNetworkUpdateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "virtualNetworkUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/networks/{virtualNetworkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualNetworkUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkUpdateUsingPUTOK:
		return value, nil, nil
	case *VirtualNetworkUpdateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for virtual_networks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
