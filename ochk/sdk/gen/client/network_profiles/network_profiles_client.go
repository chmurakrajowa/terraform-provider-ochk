// Code generated by go-swagger; DO NOT EDIT.

package network_profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new network profiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network profiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	NetworkProfileGetUsingGET(params *NetworkProfileGetUsingGETParams) (*NetworkProfileGetUsingGETOK, error)

	NetworkProfileListUsingGET(params *NetworkProfileListUsingGETParams) (*NetworkProfileListUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NetworkProfileGetUsingGET gets

  Get network profile
*/
func (a *Client) NetworkProfileGetUsingGET(params *NetworkProfileGetUsingGETParams) (*NetworkProfileGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkProfileGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "networkProfileGetUsingGET",
		Method:             "GET",
		PathPattern:        "/vra/networkprofiles/{networkProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkProfileGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkProfileGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networkProfileGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkProfileListUsingGET lists

  List network profile
*/
func (a *Client) NetworkProfileListUsingGET(params *NetworkProfileListUsingGETParams) (*NetworkProfileListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkProfileListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "networkProfileListUsingGET",
		Method:             "GET",
		PathPattern:        "/vra/networkprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkProfileListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkProfileListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networkProfileListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
