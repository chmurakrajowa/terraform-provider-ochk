// Code generated by go-swagger; DO NOT EDIT.

package subtenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subtenants API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subtenants API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SubtenantCreateUsingPUT(params *SubtenantCreateUsingPUTParams) (*SubtenantCreateUsingPUTOK, *SubtenantCreateUsingPUTCreated, error)

	SubtenantDeleteUsingDELETE(params *SubtenantDeleteUsingDELETEParams) (*SubtenantDeleteUsingDELETEOK, *SubtenantDeleteUsingDELETECreated, error)

	SubtenantGetUsingGET(params *SubtenantGetUsingGETParams) (*SubtenantGetUsingGETOK, error)

	SubtenantListUsingGET(params *SubtenantListUsingGETParams) (*SubtenantListUsingGETOK, error)

	SubtenantUpdateUsingPUT(params *SubtenantUpdateUsingPUTParams) (*SubtenantUpdateUsingPUTOK, *SubtenantUpdateUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SubtenantCreateUsingPUT creates

  Create subtenant (business group)
*/
func (a *Client) SubtenantCreateUsingPUT(params *SubtenantCreateUsingPUTParams) (*SubtenantCreateUsingPUTOK, *SubtenantCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubtenantCreateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subtenantCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/subtenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubtenantCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SubtenantCreateUsingPUTOK:
		return value, nil, nil
	case *SubtenantCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subtenants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubtenantDeleteUsingDELETE deletes

  Delete subtenant
*/
func (a *Client) SubtenantDeleteUsingDELETE(params *SubtenantDeleteUsingDELETEParams) (*SubtenantDeleteUsingDELETEOK, *SubtenantDeleteUsingDELETECreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubtenantDeleteUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subtenantDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/subtenants/{subtenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubtenantDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SubtenantDeleteUsingDELETEOK:
		return value, nil, nil
	case *SubtenantDeleteUsingDELETECreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subtenants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubtenantGetUsingGET gets

  Get subtenant from NSX-T
*/
func (a *Client) SubtenantGetUsingGET(params *SubtenantGetUsingGETParams) (*SubtenantGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubtenantGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subtenantGetUsingGET",
		Method:             "GET",
		PathPattern:        "/subtenants/{subtenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubtenantGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubtenantGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subtenantGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubtenantListUsingGET lists

  List subtenants
*/
func (a *Client) SubtenantListUsingGET(params *SubtenantListUsingGETParams) (*SubtenantListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubtenantListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subtenantListUsingGET",
		Method:             "GET",
		PathPattern:        "/subtenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubtenantListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubtenantListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subtenantListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubtenantUpdateUsingPUT updates

  Update subtenant
*/
func (a *Client) SubtenantUpdateUsingPUT(params *SubtenantUpdateUsingPUTParams) (*SubtenantUpdateUsingPUTOK, *SubtenantUpdateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubtenantUpdateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subtenantUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/subtenants/{subtenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubtenantUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SubtenantUpdateUsingPUTOK:
		return value, nil, nil
	case *SubtenantUpdateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subtenants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
