// Code generated by go-swagger; DO NOT EDIT.

package subtenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewSubtenantUpdateUsingPUTParams creates a new SubtenantUpdateUsingPUTParams object
// with the default values initialized.
func NewSubtenantUpdateUsingPUTParams() *SubtenantUpdateUsingPUTParams {
	var ()
	return &SubtenantUpdateUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSubtenantUpdateUsingPUTParamsWithTimeout creates a new SubtenantUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSubtenantUpdateUsingPUTParamsWithTimeout(timeout time.Duration) *SubtenantUpdateUsingPUTParams {
	var ()
	return &SubtenantUpdateUsingPUTParams{

		timeout: timeout,
	}
}

// NewSubtenantUpdateUsingPUTParamsWithContext creates a new SubtenantUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewSubtenantUpdateUsingPUTParamsWithContext(ctx context.Context) *SubtenantUpdateUsingPUTParams {
	var ()
	return &SubtenantUpdateUsingPUTParams{

		Context: ctx,
	}
}

// NewSubtenantUpdateUsingPUTParamsWithHTTPClient creates a new SubtenantUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSubtenantUpdateUsingPUTParamsWithHTTPClient(client *http.Client) *SubtenantUpdateUsingPUTParams {
	var ()
	return &SubtenantUpdateUsingPUTParams{
		HTTPClient: client,
	}
}

/*SubtenantUpdateUsingPUTParams contains all the parameters to send to the API endpoint
for the subtenant update using p u t operation typically these are written to a http.Request
*/
type SubtenantUpdateUsingPUTParams struct {

	/*SubtenantID
	  subtenantId

	*/
	SubtenantID string
	/*SubtenantInstance
	  subtenantInstance

	*/
	SubtenantInstance *models.SubtenantInstance

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) WithTimeout(timeout time.Duration) *SubtenantUpdateUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) WithContext(ctx context.Context) *SubtenantUpdateUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) WithHTTPClient(client *http.Client) *SubtenantUpdateUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubtenantID adds the subtenantID to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) WithSubtenantID(subtenantID string) *SubtenantUpdateUsingPUTParams {
	o.SetSubtenantID(subtenantID)
	return o
}

// SetSubtenantID adds the subtenantId to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) SetSubtenantID(subtenantID string) {
	o.SubtenantID = subtenantID
}

// WithSubtenantInstance adds the subtenantInstance to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) WithSubtenantInstance(subtenantInstance *models.SubtenantInstance) *SubtenantUpdateUsingPUTParams {
	o.SetSubtenantInstance(subtenantInstance)
	return o
}

// SetSubtenantInstance adds the subtenantInstance to the subtenant update using p u t params
func (o *SubtenantUpdateUsingPUTParams) SetSubtenantInstance(subtenantInstance *models.SubtenantInstance) {
	o.SubtenantInstance = subtenantInstance
}

// WriteToRequest writes these params to a swagger request
func (o *SubtenantUpdateUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param subtenantId
	if err := r.SetPathParam("subtenantId", o.SubtenantID); err != nil {
		return err
	}

	if o.SubtenantInstance != nil {
		if err := r.SetBodyParam(o.SubtenantInstance); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
