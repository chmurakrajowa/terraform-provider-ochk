// Code generated by go-swagger; DO NOT EDIT.

package default_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// ServiceGetUsingGETReader is a Reader for the ServiceGetUsingGET structure.
type ServiceGetUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceGetUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServiceGetUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewServiceGetUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewServiceGetUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewServiceGetUsingGETOK creates a ServiceGetUsingGETOK with default headers values
func NewServiceGetUsingGETOK() *ServiceGetUsingGETOK {
	return &ServiceGetUsingGETOK{}
}

/*ServiceGetUsingGETOK handles this case with default header values.

OK
*/
type ServiceGetUsingGETOK struct {
	Payload *models.ServiceGetResponse
}

func (o *ServiceGetUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /network/default-services/{serviceId}][%d] serviceGetUsingGETOK  %+v", 200, o.Payload)
}

func (o *ServiceGetUsingGETOK) GetPayload() *models.ServiceGetResponse {
	return o.Payload
}

func (o *ServiceGetUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceGetUsingGETBadRequest creates a ServiceGetUsingGETBadRequest with default headers values
func NewServiceGetUsingGETBadRequest() *ServiceGetUsingGETBadRequest {
	return &ServiceGetUsingGETBadRequest{}
}

/*ServiceGetUsingGETBadRequest handles this case with default header values.

Bad request, error occurred. For more details see log messages.
*/
type ServiceGetUsingGETBadRequest struct {
	Payload *models.ProxyResponseMessage
}

func (o *ServiceGetUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /network/default-services/{serviceId}][%d] serviceGetUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *ServiceGetUsingGETBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *ServiceGetUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceGetUsingGETNotFound creates a ServiceGetUsingGETNotFound with default headers values
func NewServiceGetUsingGETNotFound() *ServiceGetUsingGETNotFound {
	return &ServiceGetUsingGETNotFound{}
}

/*ServiceGetUsingGETNotFound handles this case with default header values.

Entity not found.
*/
type ServiceGetUsingGETNotFound struct {
}

func (o *ServiceGetUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /network/default-services/{serviceId}][%d] serviceGetUsingGETNotFound ", 404)
}

func (o *ServiceGetUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
