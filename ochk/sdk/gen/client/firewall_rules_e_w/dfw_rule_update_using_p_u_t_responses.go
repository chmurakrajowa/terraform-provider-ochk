// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_e_w

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// DfwRuleUpdateUsingPUTReader is a Reader for the DfwRuleUpdateUsingPUT structure.
type DfwRuleUpdateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DfwRuleUpdateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDfwRuleUpdateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewDfwRuleUpdateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDfwRuleUpdateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDfwRuleUpdateUsingPUTOK creates a DfwRuleUpdateUsingPUTOK with default headers values
func NewDfwRuleUpdateUsingPUTOK() *DfwRuleUpdateUsingPUTOK {
	return &DfwRuleUpdateUsingPUTOK{}
}

/*
DfwRuleUpdateUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type DfwRuleUpdateUsingPUTOK struct {
	Payload *models.UpdateDFWRuleResponse
}

// IsSuccess returns true when this dfw rule update using p u t o k response has a 2xx status code
func (o *DfwRuleUpdateUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this dfw rule update using p u t o k response has a 3xx status code
func (o *DfwRuleUpdateUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dfw rule update using p u t o k response has a 4xx status code
func (o *DfwRuleUpdateUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this dfw rule update using p u t o k response has a 5xx status code
func (o *DfwRuleUpdateUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this dfw rule update using p u t o k response a status code equal to that given
func (o *DfwRuleUpdateUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the dfw rule update using p u t o k response
func (o *DfwRuleUpdateUsingPUTOK) Code() int {
	return 200
}

func (o *DfwRuleUpdateUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *DfwRuleUpdateUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleUpdateUsingPUTOK  %+v", 200, o.Payload)
}

func (o *DfwRuleUpdateUsingPUTOK) GetPayload() *models.UpdateDFWRuleResponse {
	return o.Payload
}

func (o *DfwRuleUpdateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateDFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDfwRuleUpdateUsingPUTCreated creates a DfwRuleUpdateUsingPUTCreated with default headers values
func NewDfwRuleUpdateUsingPUTCreated() *DfwRuleUpdateUsingPUTCreated {
	return &DfwRuleUpdateUsingPUTCreated{}
}

/*
DfwRuleUpdateUsingPUTCreated describes a response with status code 201, with default header values.

Entity has been updated
*/
type DfwRuleUpdateUsingPUTCreated struct {
	Payload *models.UpdateDFWRuleResponse
}

// IsSuccess returns true when this dfw rule update using p u t created response has a 2xx status code
func (o *DfwRuleUpdateUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this dfw rule update using p u t created response has a 3xx status code
func (o *DfwRuleUpdateUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dfw rule update using p u t created response has a 4xx status code
func (o *DfwRuleUpdateUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this dfw rule update using p u t created response has a 5xx status code
func (o *DfwRuleUpdateUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this dfw rule update using p u t created response a status code equal to that given
func (o *DfwRuleUpdateUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the dfw rule update using p u t created response
func (o *DfwRuleUpdateUsingPUTCreated) Code() int {
	return 201
}

func (o *DfwRuleUpdateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleUpdateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *DfwRuleUpdateUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleUpdateUsingPUTCreated  %+v", 201, o.Payload)
}

func (o *DfwRuleUpdateUsingPUTCreated) GetPayload() *models.UpdateDFWRuleResponse {
	return o.Payload
}

func (o *DfwRuleUpdateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateDFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDfwRuleUpdateUsingPUTBadRequest creates a DfwRuleUpdateUsingPUTBadRequest with default headers values
func NewDfwRuleUpdateUsingPUTBadRequest() *DfwRuleUpdateUsingPUTBadRequest {
	return &DfwRuleUpdateUsingPUTBadRequest{}
}

/*
DfwRuleUpdateUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type DfwRuleUpdateUsingPUTBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this dfw rule update using p u t bad request response has a 2xx status code
func (o *DfwRuleUpdateUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this dfw rule update using p u t bad request response has a 3xx status code
func (o *DfwRuleUpdateUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dfw rule update using p u t bad request response has a 4xx status code
func (o *DfwRuleUpdateUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this dfw rule update using p u t bad request response has a 5xx status code
func (o *DfwRuleUpdateUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this dfw rule update using p u t bad request response a status code equal to that given
func (o *DfwRuleUpdateUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the dfw rule update using p u t bad request response
func (o *DfwRuleUpdateUsingPUTBadRequest) Code() int {
	return 400
}

func (o *DfwRuleUpdateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *DfwRuleUpdateUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleUpdateUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *DfwRuleUpdateUsingPUTBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *DfwRuleUpdateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
