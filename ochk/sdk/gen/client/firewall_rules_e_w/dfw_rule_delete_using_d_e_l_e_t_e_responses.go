// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_e_w

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// DfwRuleDeleteUsingDELETEReader is a Reader for the DfwRuleDeleteUsingDELETE structure.
type DfwRuleDeleteUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DfwRuleDeleteUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDfwRuleDeleteUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewDfwRuleDeleteUsingDELETECreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDfwRuleDeleteUsingDELETEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /network/routers/{routerId}/rules/e-w/{ruleId}] dfwRuleDeleteUsingDELETE", response, response.Code())
	}
}

// NewDfwRuleDeleteUsingDELETEOK creates a DfwRuleDeleteUsingDELETEOK with default headers values
func NewDfwRuleDeleteUsingDELETEOK() *DfwRuleDeleteUsingDELETEOK {
	return &DfwRuleDeleteUsingDELETEOK{}
}

/*
DfwRuleDeleteUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DfwRuleDeleteUsingDELETEOK struct {
	Payload *models.DeleteDFWRuleResponse
}

// IsSuccess returns true when this dfw rule delete using d e l e t e o k response has a 2xx status code
func (o *DfwRuleDeleteUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this dfw rule delete using d e l e t e o k response has a 3xx status code
func (o *DfwRuleDeleteUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dfw rule delete using d e l e t e o k response has a 4xx status code
func (o *DfwRuleDeleteUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this dfw rule delete using d e l e t e o k response has a 5xx status code
func (o *DfwRuleDeleteUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this dfw rule delete using d e l e t e o k response a status code equal to that given
func (o *DfwRuleDeleteUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the dfw rule delete using d e l e t e o k response
func (o *DfwRuleDeleteUsingDELETEOK) Code() int {
	return 200
}

func (o *DfwRuleDeleteUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleDeleteUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DfwRuleDeleteUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleDeleteUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DfwRuleDeleteUsingDELETEOK) GetPayload() *models.DeleteDFWRuleResponse {
	return o.Payload
}

func (o *DfwRuleDeleteUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteDFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDfwRuleDeleteUsingDELETECreated creates a DfwRuleDeleteUsingDELETECreated with default headers values
func NewDfwRuleDeleteUsingDELETECreated() *DfwRuleDeleteUsingDELETECreated {
	return &DfwRuleDeleteUsingDELETECreated{}
}

/*
DfwRuleDeleteUsingDELETECreated describes a response with status code 201, with default header values.

Entity has been deleted
*/
type DfwRuleDeleteUsingDELETECreated struct {
	Payload *models.DeleteDFWRuleResponse
}

// IsSuccess returns true when this dfw rule delete using d e l e t e created response has a 2xx status code
func (o *DfwRuleDeleteUsingDELETECreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this dfw rule delete using d e l e t e created response has a 3xx status code
func (o *DfwRuleDeleteUsingDELETECreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dfw rule delete using d e l e t e created response has a 4xx status code
func (o *DfwRuleDeleteUsingDELETECreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this dfw rule delete using d e l e t e created response has a 5xx status code
func (o *DfwRuleDeleteUsingDELETECreated) IsServerError() bool {
	return false
}

// IsCode returns true when this dfw rule delete using d e l e t e created response a status code equal to that given
func (o *DfwRuleDeleteUsingDELETECreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the dfw rule delete using d e l e t e created response
func (o *DfwRuleDeleteUsingDELETECreated) Code() int {
	return 201
}

func (o *DfwRuleDeleteUsingDELETECreated) Error() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleDeleteUsingDELETECreated  %+v", 201, o.Payload)
}

func (o *DfwRuleDeleteUsingDELETECreated) String() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleDeleteUsingDELETECreated  %+v", 201, o.Payload)
}

func (o *DfwRuleDeleteUsingDELETECreated) GetPayload() *models.DeleteDFWRuleResponse {
	return o.Payload
}

func (o *DfwRuleDeleteUsingDELETECreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteDFWRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDfwRuleDeleteUsingDELETEBadRequest creates a DfwRuleDeleteUsingDELETEBadRequest with default headers values
func NewDfwRuleDeleteUsingDELETEBadRequest() *DfwRuleDeleteUsingDELETEBadRequest {
	return &DfwRuleDeleteUsingDELETEBadRequest{}
}

/*
DfwRuleDeleteUsingDELETEBadRequest describes a response with status code 400, with default header values.

Bad request, error occurred. For more details see log messages.
*/
type DfwRuleDeleteUsingDELETEBadRequest struct {
	Payload *models.ProxyResponseMessage
}

// IsSuccess returns true when this dfw rule delete using d e l e t e bad request response has a 2xx status code
func (o *DfwRuleDeleteUsingDELETEBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this dfw rule delete using d e l e t e bad request response has a 3xx status code
func (o *DfwRuleDeleteUsingDELETEBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dfw rule delete using d e l e t e bad request response has a 4xx status code
func (o *DfwRuleDeleteUsingDELETEBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this dfw rule delete using d e l e t e bad request response has a 5xx status code
func (o *DfwRuleDeleteUsingDELETEBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this dfw rule delete using d e l e t e bad request response a status code equal to that given
func (o *DfwRuleDeleteUsingDELETEBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the dfw rule delete using d e l e t e bad request response
func (o *DfwRuleDeleteUsingDELETEBadRequest) Code() int {
	return 400
}

func (o *DfwRuleDeleteUsingDELETEBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleDeleteUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *DfwRuleDeleteUsingDELETEBadRequest) String() string {
	return fmt.Sprintf("[DELETE /network/routers/{routerId}/rules/e-w/{ruleId}][%d] dfwRuleDeleteUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *DfwRuleDeleteUsingDELETEBadRequest) GetPayload() *models.ProxyResponseMessage {
	return o.Payload
}

func (o *DfwRuleDeleteUsingDELETEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
