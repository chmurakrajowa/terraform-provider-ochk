// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectCreateUsingPUT(params *ProjectCreateUsingPUTParams, opts ...ClientOption) (*ProjectCreateUsingPUTOK, *ProjectCreateUsingPUTCreated, error)

	ProjectDeleteUsingDELETE(params *ProjectDeleteUsingDELETEParams, opts ...ClientOption) (*ProjectDeleteUsingDELETEOK, *ProjectDeleteUsingDELETECreated, error)

	ProjectGetUsingGET(params *ProjectGetUsingGETParams, opts ...ClientOption) (*ProjectGetUsingGETOK, error)

	ProjectListUsingGET(params *ProjectListUsingGETParams, opts ...ClientOption) (*ProjectListUsingGETOK, error)

	ProjectUpdateUsingPUT(params *ProjectUpdateUsingPUTParams, opts ...ClientOption) (*ProjectUpdateUsingPUTOK, *ProjectUpdateUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ProjectCreateUsingPUT creates

Create project
*/
func (a *Client) ProjectCreateUsingPUT(params *ProjectCreateUsingPUTParams, opts ...ClientOption) (*ProjectCreateUsingPUTOK, *ProjectCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectCreateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "projectCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectCreateUsingPUTOK:
		return value, nil, nil
	case *ProjectCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectDeleteUsingDELETE deletes

Delete project
*/
func (a *Client) ProjectDeleteUsingDELETE(params *ProjectDeleteUsingDELETEParams, opts ...ClientOption) (*ProjectDeleteUsingDELETEOK, *ProjectDeleteUsingDELETECreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectDeleteUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "projectDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectDeleteUsingDELETEOK:
		return value, nil, nil
	case *ProjectDeleteUsingDELETECreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectGetUsingGET gets

Get projects
*/
func (a *Client) ProjectGetUsingGET(params *ProjectGetUsingGETParams, opts ...ClientOption) (*ProjectGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "projectGetUsingGET",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projectGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectListUsingGET lists

List projects
*/
func (a *Client) ProjectListUsingGET(params *ProjectListUsingGETParams, opts ...ClientOption) (*ProjectListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "projectListUsingGET",
		Method:             "GET",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projectListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectUpdateUsingPUT updates

Update project
*/
func (a *Client) ProjectUpdateUsingPUT(params *ProjectUpdateUsingPUTParams, opts ...ClientOption) (*ProjectUpdateUsingPUTOK, *ProjectUpdateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "projectUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectUpdateUsingPUTOK:
		return value, nil, nil
	case *ProjectUpdateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
