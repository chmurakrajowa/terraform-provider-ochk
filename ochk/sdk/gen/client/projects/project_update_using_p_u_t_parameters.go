// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewProjectUpdateUsingPUTParams creates a new ProjectUpdateUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewProjectUpdateUsingPUTParams() *ProjectUpdateUsingPUTParams {
	return &ProjectUpdateUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewProjectUpdateUsingPUTParamsWithTimeout creates a new ProjectUpdateUsingPUTParams object
// with the ability to set a timeout on a request.
func NewProjectUpdateUsingPUTParamsWithTimeout(timeout time.Duration) *ProjectUpdateUsingPUTParams {
	return &ProjectUpdateUsingPUTParams{
		timeout: timeout,
	}
}

// NewProjectUpdateUsingPUTParamsWithContext creates a new ProjectUpdateUsingPUTParams object
// with the ability to set a context for a request.
func NewProjectUpdateUsingPUTParamsWithContext(ctx context.Context) *ProjectUpdateUsingPUTParams {
	return &ProjectUpdateUsingPUTParams{
		Context: ctx,
	}
}

// NewProjectUpdateUsingPUTParamsWithHTTPClient creates a new ProjectUpdateUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewProjectUpdateUsingPUTParamsWithHTTPClient(client *http.Client) *ProjectUpdateUsingPUTParams {
	return &ProjectUpdateUsingPUTParams{
		HTTPClient: client,
	}
}

/*
ProjectUpdateUsingPUTParams contains all the parameters to send to the API endpoint

	for the project update using p u t operation.

	Typically these are written to a http.Request.
*/
type ProjectUpdateUsingPUTParams struct {

	/* ProjectID.

	   projectId
	*/
	ProjectID string

	/* ProjectInstance.

	   projectInstance
	*/
	ProjectInstance *models.ProjectInstance

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the project update using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProjectUpdateUsingPUTParams) WithDefaults() *ProjectUpdateUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the project update using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProjectUpdateUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) WithTimeout(timeout time.Duration) *ProjectUpdateUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) WithContext(ctx context.Context) *ProjectUpdateUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) WithHTTPClient(client *http.Client) *ProjectUpdateUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProjectID adds the projectID to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) WithProjectID(projectID string) *ProjectUpdateUsingPUTParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WithProjectInstance adds the projectInstance to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) WithProjectInstance(projectInstance *models.ProjectInstance) *ProjectUpdateUsingPUTParams {
	o.SetProjectInstance(projectInstance)
	return o
}

// SetProjectInstance adds the projectInstance to the project update using p u t params
func (o *ProjectUpdateUsingPUTParams) SetProjectInstance(projectInstance *models.ProjectInstance) {
	o.ProjectInstance = projectInstance
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectUpdateUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}
	if o.ProjectInstance != nil {
		if err := r.SetBodyParam(o.ProjectInstance); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
