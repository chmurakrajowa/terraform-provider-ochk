// Code generated by go-swagger; DO NOT EDIT.

package local_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new local groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for local groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LocalGroupCreateUsingPUT(params *LocalGroupCreateUsingPUTParams, opts ...ClientOption) (*LocalGroupCreateUsingPUTOK, *LocalGroupCreateUsingPUTCreated, error)

	LocalGroupDeleteUsingDELETE(params *LocalGroupDeleteUsingDELETEParams, opts ...ClientOption) (*LocalGroupDeleteUsingDELETEOK, error)

	LocalGroupGetUsingGET(params *LocalGroupGetUsingGETParams, opts ...ClientOption) (*LocalGroupGetUsingGETOK, error)

	LocalGroupListUsingGET(params *LocalGroupListUsingGETParams, opts ...ClientOption) (*LocalGroupListUsingGETOK, error)

	LocalGroupUpdateUsingPUT(params *LocalGroupUpdateUsingPUTParams, opts ...ClientOption) (*LocalGroupUpdateUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  LocalGroupCreateUsingPUT creates

  Create local group
*/
func (a *Client) LocalGroupCreateUsingPUT(params *LocalGroupCreateUsingPUTParams, opts ...ClientOption) (*LocalGroupCreateUsingPUTOK, *LocalGroupCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalGroupCreateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "localGroupCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/groups/local",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocalGroupCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LocalGroupCreateUsingPUTOK:
		return value, nil, nil
	case *LocalGroupCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for local_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LocalGroupDeleteUsingDELETE deletes

  Delete local group
*/
func (a *Client) LocalGroupDeleteUsingDELETE(params *LocalGroupDeleteUsingDELETEParams, opts ...ClientOption) (*LocalGroupDeleteUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalGroupDeleteUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "localGroupDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/groups/local/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocalGroupDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocalGroupDeleteUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for localGroupDeleteUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LocalGroupGetUsingGET gets

  Get local group
*/
func (a *Client) LocalGroupGetUsingGET(params *LocalGroupGetUsingGETParams, opts ...ClientOption) (*LocalGroupGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalGroupGetUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "localGroupGetUsingGET",
		Method:             "GET",
		PathPattern:        "/groups/local/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocalGroupGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocalGroupGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for localGroupGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LocalGroupListUsingGET lists

  List local groups
*/
func (a *Client) LocalGroupListUsingGET(params *LocalGroupListUsingGETParams, opts ...ClientOption) (*LocalGroupListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalGroupListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "localGroupListUsingGET",
		Method:             "GET",
		PathPattern:        "/groups/local",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocalGroupListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocalGroupListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for localGroupListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LocalGroupUpdateUsingPUT updates

  Update local group
*/
func (a *Client) LocalGroupUpdateUsingPUT(params *LocalGroupUpdateUsingPUTParams, opts ...ClientOption) (*LocalGroupUpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalGroupUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "localGroupUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/groups/local/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocalGroupUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocalGroupUpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for localGroupUpdateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
