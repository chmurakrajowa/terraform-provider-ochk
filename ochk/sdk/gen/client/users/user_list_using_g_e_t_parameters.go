// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUserListUsingGETParams creates a new UserListUsingGETParams object
// with the default values initialized.
func NewUserListUsingGETParams() *UserListUsingGETParams {
	var ()
	return &UserListUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserListUsingGETParamsWithTimeout creates a new UserListUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserListUsingGETParamsWithTimeout(timeout time.Duration) *UserListUsingGETParams {
	var ()
	return &UserListUsingGETParams{

		timeout: timeout,
	}
}

// NewUserListUsingGETParamsWithContext creates a new UserListUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserListUsingGETParamsWithContext(ctx context.Context) *UserListUsingGETParams {
	var ()
	return &UserListUsingGETParams{

		Context: ctx,
	}
}

// NewUserListUsingGETParamsWithHTTPClient creates a new UserListUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserListUsingGETParamsWithHTTPClient(client *http.Client) *UserListUsingGETParams {
	var ()
	return &UserListUsingGETParams{
		HTTPClient: client,
	}
}

/*UserListUsingGETParams contains all the parameters to send to the API endpoint
for the user list using g e t operation typically these are written to a http.Request
*/
type UserListUsingGETParams struct {

	/*UserName
	  userName

	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user list using g e t params
func (o *UserListUsingGETParams) WithTimeout(timeout time.Duration) *UserListUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user list using g e t params
func (o *UserListUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user list using g e t params
func (o *UserListUsingGETParams) WithContext(ctx context.Context) *UserListUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user list using g e t params
func (o *UserListUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user list using g e t params
func (o *UserListUsingGETParams) WithHTTPClient(client *http.Client) *UserListUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user list using g e t params
func (o *UserListUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserName adds the userName to the user list using g e t params
func (o *UserListUsingGETParams) WithUserName(userName *string) *UserListUsingGETParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the user list using g e t params
func (o *UserListUsingGETParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *UserListUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UserName != nil {

		// query param userName
		var qrUserName string
		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {
			if err := r.SetQueryParam("userName", qUserName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
