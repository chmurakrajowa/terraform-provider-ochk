// Code generated by go-swagger; DO NOT EDIT.

package billing_tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new billing tags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for billing tags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BillingTagCreateUsingPUT(params *BillingTagCreateUsingPUTParams) (*BillingTagCreateUsingPUTOK, *BillingTagCreateUsingPUTCreated, error)

	BillingTagDeleteUsingDELETE(params *BillingTagDeleteUsingDELETEParams) (*BillingTagDeleteUsingDELETEOK, error)

	BillingTagGetUsingGET(params *BillingTagGetUsingGETParams) (*BillingTagGetUsingGETOK, error)

	BillingTagListUsingGET(params *BillingTagListUsingGETParams) (*BillingTagListUsingGETOK, error)

	BillingTagUpdateUsingPUT(params *BillingTagUpdateUsingPUTParams) (*BillingTagUpdateUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BillingTagCreateUsingPUT creates

  Create billing tag
*/
func (a *Client) BillingTagCreateUsingPUT(params *BillingTagCreateUsingPUTParams) (*BillingTagCreateUsingPUTOK, *BillingTagCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTagCreateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billingTagCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/tags/billingTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingTagCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BillingTagCreateUsingPUTOK:
		return value, nil, nil
	case *BillingTagCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billing_tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BillingTagDeleteUsingDELETE deletes

  Delete billing tag
*/
func (a *Client) BillingTagDeleteUsingDELETE(params *BillingTagDeleteUsingDELETEParams) (*BillingTagDeleteUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTagDeleteUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billingTagDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/tags/billingTags/{billingTagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingTagDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTagDeleteUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billingTagDeleteUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BillingTagGetUsingGET gets

  Get billing tag collection
*/
func (a *Client) BillingTagGetUsingGET(params *BillingTagGetUsingGETParams) (*BillingTagGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTagGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billingTagGetUsingGET",
		Method:             "GET",
		PathPattern:        "/tags/billingTags/{billingTagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingTagGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTagGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billingTagGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BillingTagListUsingGET lists

  List billing tags
*/
func (a *Client) BillingTagListUsingGET(params *BillingTagListUsingGETParams) (*BillingTagListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTagListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billingTagListUsingGET",
		Method:             "GET",
		PathPattern:        "/tags/billingTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingTagListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTagListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billingTagListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BillingTagUpdateUsingPUT updates

  Update billing tag
*/
func (a *Client) BillingTagUpdateUsingPUT(params *BillingTagUpdateUsingPUTParams) (*BillingTagUpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTagUpdateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billingTagUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/tags/billingTags/{billingTagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingTagUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTagUpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billingTagUpdateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
