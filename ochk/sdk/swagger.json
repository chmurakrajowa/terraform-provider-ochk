{
  "swagger": "2.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "iaas-api-proxy.ochk.pilot",
  "basePath": "/",
  "tags": [
    {
      "name": "Active Directory RSA Public Key",
      "description": "Ads Public Key Controller"
    },
    {
      "name": "Active Directory Sync",
      "description": "Sync Controller"
    },
    {
      "name": "Backups",
      "description": "Backup Controller"
    },
    {
      "name": "Billing accounts",
      "description": "Billing Alarm Definition Controller"
    },
    {
      "name": "Custom services",
      "description": "Custom Service Controller"
    },
    {
      "name": "Default services",
      "description": "Service Controller"
    },
    {
      "name": "Deployments",
      "description": "Deployment Controller"
    },
    {
      "name": "Firewall rules E-W",
      "description": "DFW Rule Controller"
    },
    {
      "name": "Firewall rules S-N",
      "description": "GFW Rule Controller"
    },
    {
      "name": "Folder",
      "description": "Folder Controller"
    },
    {
      "name": "IP Collections",
      "description": "Ip Collection Controller"
    },
    {
      "name": "IPAM Available public IP address",
      "description": "Available Public IP Controller"
    },
    {
      "name": "IPAM Public IP Allocations",
      "description": "Public IP Allocation Controller"
    },
    {
      "name": "IPAM services",
      "description": "Ipam Service Controller"
    },
    {
      "name": "KMS Key management",
      "description": "Key Controller"
    },
    {
      "name": "KMS Key rotation scheduler",
      "description": "Key Schedule Controller"
    },
    {
      "name": "Log categories",
      "description": "Log Controller"
    },
    {
      "name": "Log categories (user access)",
      "description": "Log Category Users Controller"
    },
    {
      "name": "Log stats",
      "description": "Log Stats Controller"
    },
    {
      "name": "Log stats user",
      "description": "Log Stats User Controller"
    },
    {
      "name": "Logs",
      "description": "Log Histogram Controller"
    },
    {
      "name": "Logs (user access)",
      "description": "Log User Controller"
    },
    {
      "name": "MCS Secret",
      "description": "Mcs Secret Controller"
    },
    {
      "name": "NAT Rules",
      "description": "NAT Rule Controller"
    },
    {
      "name": "Projects",
      "description": "Project Controller"
    },
    {
      "name": "Requests",
      "description": "Request Controller"
    },
    {
      "name": "Routers",
      "description": "Router Controller"
    },
    {
      "name": "Security groups",
      "description": "Security Group Controller"
    },
    {
      "name": "Snapshots",
      "description": "Snapshot Controller"
    },
    {
      "name": "Tags",
      "description": "Tag Controller"
    },
    {
      "name": "Virtual machines",
      "description": "Vcs Virtual Machine Controller"
    },
    {
      "name": "Virtual networks",
      "description": "Virtual Network Controller"
    },
    {
      "name": "WSO2 Logout Token",
      "description": "WSO Logout Controller"
    },
    {
      "name": "WSO2 Token",
      "description": "WSO Controller"
    },
    {
      "name": "WSO2 UI Logout Token",
      "description": "WSOUI Logout Controller"
    }
  ],
  "paths": {
    "/ads/cer": {
      "post": {
        "tags": [
          "Active Directory RSA Public Key"
        ],
        "summary": "Get public key",
        "description": "Get public key",
        "operationId": "getPublicKeyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "getPublicKeyRequest",
            "description": "getPublicKeyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPublicKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity has been imported",
            "schema": {
              "$ref": "#/definitions/GetPublicKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/ads/sync": {
      "post": {
        "tags": [
          "Active Directory Sync"
        ],
        "summary": "Sync",
        "description": "Sync",
        "operationId": "syncUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createSyncRequest",
            "description": "createSyncRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSyncRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SyncMessageResponse"
            }
          },
          "201": {
            "description": "Entity has been imported",
            "schema": {
              "$ref": "#/definitions/SyncMessageResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/backups/plans": {
      "get": {
        "tags": [
          "Backups"
        ],
        "summary": "List backup plans",
        "description": "List backup plans",
        "operationId": "backupPlanListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "backupPlanName",
            "in": "query",
            "description": "backupPlanName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupPlanListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/backups/plans/{backupPlanId}": {
      "get": {
        "tags": [
          "Backups"
        ],
        "summary": "Get backup plan",
        "description": "Get backup plan",
        "operationId": "backupPlanGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "backupPlanId",
            "in": "path",
            "description": "backupPlanId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupPlanGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/backups/plans/{backupPlanId}/lists": {
      "get": {
        "tags": [
          "Backups"
        ],
        "summary": "List backup lists",
        "description": "List backup lists",
        "operationId": "backupListListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "backupListName",
            "in": "query",
            "description": "backupListName",
            "required": false,
            "type": "string"
          },
          {
            "name": "backupPlanId",
            "in": "path",
            "description": "backupPlanId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupListListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/backups/plans/{backupPlanId}/lists/{backupListId}": {
      "get": {
        "tags": [
          "Backups"
        ],
        "summary": "Get backup list get",
        "description": "Get backup list",
        "operationId": "backupListGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "backupListId",
            "in": "path",
            "description": "backupListId",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupPlanId",
            "in": "path",
            "description": "backupPlanId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupListGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/billing/accounts": {
      "get": {
        "tags": [
          "Billing accounts"
        ],
        "summary": "List",
        "description": "List accounts",
        "operationId": "accountListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Billing accounts"
        ],
        "summary": "Create",
        "description": "Create account",
        "operationId": "accountCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "accountInstance",
            "description": "accountInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/AccountCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/billing/accounts/{accountId}": {
      "get": {
        "tags": [
          "Billing accounts"
        ],
        "summary": "Get",
        "description": "Get account",
        "operationId": "accountGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Billing accounts"
        ],
        "summary": "Update",
        "description": "Update account",
        "operationId": "accountUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "accountInstance",
            "description": "accountInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountUpdateResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/AccountUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Billing accounts"
        ],
        "summary": "Delete",
        "description": "Delete account",
        "operationId": "accountDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountDeleteResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/AccountDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/billing/alarm-definition": {
      "put": {
        "tags": [
          "Billing accounts"
        ],
        "summary": "Create",
        "description": "Create billing alarm definition",
        "operationId": "billingAlarmDefinitionCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "billingAlarmDefinition",
            "description": "billingAlarmDefinition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BillingAlarmDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateBillingAlarmDefinitionResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateBillingAlarmDefinitionResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/billing/alarm-definition/{alarmDefinitionId}": {
      "put": {
        "tags": [
          "Billing accounts"
        ],
        "summary": "Update",
        "description": "Update billing alarm definition",
        "operationId": "accountUpdateUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alarmDefinitionId",
            "in": "path",
            "description": "alarmDefinitionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "billingAlarmDefinition",
            "description": "billingAlarmDefinition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BillingAlarmDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateBillingAlarmDefinitionResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateBillingAlarmDefinitionResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Billing accounts"
        ],
        "summary": "Delete",
        "description": "Delete billing alarm definition",
        "operationId": "accountDeleteUsingDELETE_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alarmDefinitionId",
            "in": "path",
            "description": "alarmDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBillingAlarmDefinitionResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteBillingAlarmDefinitionResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "List",
        "description": "List deployments from server",
        "operationId": "deploymentListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeploymentListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/deployments/{deploymentId}": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "Get",
        "description": "Get deployment object",
        "operationId": "deploymentGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "description": "deploymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeploymentGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/folder/{projectId}": {
      "get": {
        "tags": [
          "Folder"
        ],
        "summary": "List",
        "description": "List folder",
        "operationId": "folderListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderPath",
            "in": "query",
            "description": "folderPath",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/folder/{projectId}/{id}": {
      "get": {
        "tags": [
          "Folder"
        ],
        "summary": "Get",
        "description": "Get folder",
        "operationId": "folderGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/ipam/ipaddress/public/allocation": {
      "get": {
        "tags": [
          "IPAM Public IP Allocations"
        ],
        "summary": "List",
        "description": "List allocations of public IPs",
        "operationId": "allocationListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ipAddress",
            "in": "query",
            "description": "ipAddress",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PublicIpAllocationListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      },
      "put": {
        "tags": [
          "IPAM Public IP Allocations"
        ],
        "summary": "Create",
        "description": "Create public IP allocation object",
        "operationId": "allocationCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "publicIpAllocation",
            "description": "publicIpAllocation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicIpAllocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreatePublicIPAllocationResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreatePublicIPAllocationResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/ipam/ipaddress/public/allocation/{allocationId}": {
      "get": {
        "tags": [
          "IPAM Public IP Allocations"
        ],
        "summary": "Get",
        "description": "Get allocation of public IP",
        "operationId": "allocationGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "description": "allocationId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PublicIpAllocationGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "IPAM Public IP Allocations"
        ],
        "summary": "Update",
        "description": "Update public IP allocation object",
        "operationId": "allocationUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "description": "allocationId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "publicIpAllocation",
            "description": "publicIpAllocation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicIpAllocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/UpdatePublicIPAllocationResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      },
      "delete": {
        "tags": [
          "IPAM Public IP Allocations"
        ],
        "summary": "Delete",
        "description": "Delete public IP allocation object",
        "operationId": "allocationDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "description": "allocationId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeletePublicIPAllocationResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/ipam/ipaddress/public/available": {
      "get": {
        "tags": [
          "IPAM Available public IP address"
        ],
        "summary": "Get",
        "description": "Get IPAM service",
        "operationId": "availablePublicIPGetUsingGET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AvailablePublicIPGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/ipam/services": {
      "get": {
        "tags": [
          "IPAM services"
        ],
        "summary": "List",
        "description": "List IPAM services",
        "operationId": "ipamServicesListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/ipam/services/{serviceId}": {
      "get": {
        "tags": [
          "IPAM services"
        ],
        "summary": "Get",
        "description": "Get IPAM service",
        "operationId": "ipamServiceGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/ipcs": {
      "get": {
        "tags": [
          "IP Collections"
        ],
        "summary": "List",
        "description": "List ip collection",
        "operationId": "ipCollectionListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "IP Collections"
        ],
        "summary": "Create",
        "description": "Create Ip collection",
        "operationId": "ipCollectionCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ipCollection",
            "description": "ipCollection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IpCollection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/IpCollectionCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/ipcs/{ipCollectionId}": {
      "get": {
        "tags": [
          "IP Collections"
        ],
        "summary": "Get",
        "description": "Get ip collection",
        "operationId": "ipCollectionGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ipCollectionId",
            "in": "path",
            "description": "ipCollectionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "IP Collections"
        ],
        "summary": "Update",
        "description": "Update ip collection",
        "operationId": "ipCollectionUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ipCollection",
            "description": "ipCollection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IpCollection"
            }
          },
          {
            "name": "ipCollectionId",
            "in": "path",
            "description": "ipCollectionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IP Collections"
        ],
        "summary": "Delete",
        "description": "Delete ip collection",
        "operationId": "ipCollectionDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "force",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ipCollectionId",
            "in": "path",
            "description": "ipCollectionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key": {
      "get": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "List",
        "description": "List KMS keys",
        "operationId": "keyListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Create",
        "description": "Create key (KMS)",
        "operationId": "keyCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "keyInstance",
            "description": "keyInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateKmsKeyResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/import": {
      "post": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Import",
        "description": "Import key (KMS)",
        "operationId": "keyImportUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "keyImport",
            "description": "keyImport",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyImport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImportKmsKeyResponse"
            }
          },
          "201": {
            "description": "Entity has been imported",
            "schema": {
              "$ref": "#/definitions/ImportKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/{id}": {
      "get": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Get",
        "description": "Get KMS key",
        "operationId": "keyGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "delete": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Delete",
        "description": "Delete key (KMS)",
        "operationId": "keyDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/{id}/export": {
      "post": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Export",
        "description": "Export key (KMS)",
        "operationId": "keyExportUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "keyExport",
            "description": "keyExport",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyExport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Key has been exported successfully.",
            "schema": {
              "$ref": "#/definitions/ExportKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/{id}/revoke": {
      "post": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Revoke",
        "description": "Revoke key (KMS)",
        "operationId": "keyRevokeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "keyRevocation",
            "description": "keyRevocation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyRevocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Key has been revoked.",
            "schema": {
              "$ref": "#/definitions/RevokeKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/{id}/versions": {
      "post": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "New version",
        "description": "Create new key version (KMS)",
        "operationId": "keyNewVersionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "keyNewVersion",
            "description": "keyNewVersion",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KeyNewVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateNewKmsKeyVersionResponse"
            }
          },
          "201": {
            "description": "New key version has been created.",
            "schema": {
              "$ref": "#/definitions/CreateNewKmsKeyVersionResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/schedule": {
      "put": {
        "tags": [
          "KMS Key rotation scheduler"
        ],
        "summary": "Create",
        "description": "Create key rotation schedule (KMS)",
        "operationId": "keyRotationScheduleCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "keyRotationSchedule",
            "description": "keyRotationSchedule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyRotationSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateKeyRotationScheduleResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateKeyRotationScheduleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/schedule/{keyId}": {
      "get": {
        "tags": [
          "KMS Key rotation scheduler"
        ],
        "summary": "Get",
        "description": "Get key rotation schedule (KMS)",
        "operationId": "keyRotationScheduleGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "keyId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyRotationScheduleGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "KMS Key rotation scheduler"
        ],
        "summary": "Update",
        "description": "Update key rotation schedule (KMS)",
        "operationId": "keyRotationScheduleUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "keyId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "keyRotationSchedule",
            "description": "keyRotationSchedule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyRotationSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateKeyRotationScheduleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KMS Key rotation scheduler"
        ],
        "summary": "Delete",
        "description": "Delete key rotation schedule (KMS)",
        "operationId": "keyRotationScheduleDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "keyId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteKeyRotationScheduleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/log/categories": {
      "get": {
        "tags": [
          "Log categories"
        ],
        "summary": "List",
        "description": "List log categories",
        "operationId": "logCategoriesListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "logCategoryName",
            "in": "query",
            "description": "logCategoryName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogCategoryListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/log/categories/{logCategoryId}": {
      "get": {
        "tags": [
          "Log categories"
        ],
        "summary": "Get",
        "description": "Get log category",
        "operationId": "logCategoryGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogCategoryGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Log categories"
        ],
        "summary": "Update",
        "description": "Update log category",
        "operationId": "logCategoryUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "logCategory",
            "description": "logCategory",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogCategory"
            }
          },
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/UpdateLogCategoryResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/log/categories/{logCategoryId}/generate": {
      "post": {
        "tags": [
          "Log categories"
        ],
        "summary": "Get logs",
        "description": "Get logs",
        "operationId": "getLogsUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataSize",
            "in": "query",
            "description": "dataSize",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastIndex",
            "in": "query",
            "description": "lastIndex",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/GetLogsResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/log/categories/{logCategoryId}/generatebydsl": {
      "post": {
        "tags": [
          "Log categories"
        ],
        "summary": "Get logs by DSL query",
        "description": "Get logs by DSL query",
        "operationId": "getLogsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataSize",
            "in": "query",
            "description": "dataSize",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "serializedDslQuery",
            "description": "serializedDslQuery",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/GetLogsResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/log/histogram/category": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Get log histogram by category",
        "description": "Get log histogram by category",
        "operationId": "getHistogramCategoryUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarInterval",
            "in": "query",
            "description": "calendarInterval",
            "required": false,
            "type": "string",
            "enum": [
              "day",
              "hour",
              "minute",
              "month",
              "quarter",
              "week",
              "year"
            ]
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogHistogram"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/histogram/custom": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Get log histogram by custom field",
        "description": "Get log histogram by custom field",
        "operationId": "getHistogramCustomUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarInterval",
            "in": "query",
            "description": "calendarInterval",
            "required": false,
            "type": "string",
            "enum": [
              "day",
              "hour",
              "minute",
              "month",
              "quarter",
              "week",
              "year"
            ]
          },
          {
            "name": "fieldName",
            "in": "query",
            "description": "fieldName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogHistogram"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/histogram/severity": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Get log histogram by severity",
        "description": "Get log histogram by severity",
        "operationId": "getHistogramSeverityUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarInterval",
            "in": "query",
            "description": "calendarInterval",
            "required": false,
            "type": "string",
            "enum": [
              "day",
              "hour",
              "minute",
              "month",
              "quarter",
              "week",
              "year"
            ]
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogHistogram"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/histogram/user/category": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Get log histogram for user by category",
        "description": "Get log histogram for user by category",
        "operationId": "getHistogramCategoryUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarInterval",
            "in": "query",
            "description": "calendarInterval",
            "required": false,
            "type": "string",
            "enum": [
              "day",
              "hour",
              "minute",
              "month",
              "quarter",
              "week",
              "year"
            ]
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogHistogram"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/histogram/user/custom": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Get log histogram for user by custom field",
        "description": "Get log histogram for user by custom field",
        "operationId": "getHistogramCustomUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarInterval",
            "in": "query",
            "description": "calendarInterval",
            "required": false,
            "type": "string",
            "enum": [
              "day",
              "hour",
              "minute",
              "month",
              "quarter",
              "week",
              "year"
            ]
          },
          {
            "name": "fieldName",
            "in": "query",
            "description": "fieldName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogHistogram"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/histogram/user/severity": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Get log histogram for user by severity",
        "description": "Get log histogram for user by severity",
        "operationId": "getHistogramSeverityUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarInterval",
            "in": "query",
            "description": "calendarInterval",
            "required": false,
            "type": "string",
            "enum": [
              "day",
              "hour",
              "minute",
              "month",
              "quarter",
              "week",
              "year"
            ]
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogHistogram"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/stats": {
      "post": {
        "tags": [
          "Log stats"
        ],
        "summary": "Get logs stats",
        "description": "Get logs stats",
        "operationId": "getLogsStatsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogStats"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/stats/user": {
      "post": {
        "tags": [
          "Log stats user"
        ],
        "summary": "Get logs stats",
        "description": "Get logs stats",
        "operationId": "getLogsStatsUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogStats"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/stats/user/{logCategoryId}": {
      "post": {
        "tags": [
          "Log stats user"
        ],
        "summary": "Get log stats per category",
        "description": "Get log stats per category",
        "operationId": "getLogsCountUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogCategoryStats"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/stats/{logCategoryId}": {
      "post": {
        "tags": [
          "Log stats"
        ],
        "summary": "Get log stats per category",
        "description": "Get log stats per category",
        "operationId": "getLogsCountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogCategoryStats"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/user/categories": {
      "get": {
        "tags": [
          "Log categories (user access)"
        ],
        "summary": "List logs categories",
        "description": "List logs categories for user",
        "operationId": "logCategoryListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "logCategoryName",
            "in": "query",
            "description": "logCategoryName",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogCategoryListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/user/categories/{logCategoryId}": {
      "get": {
        "tags": [
          "Log categories (user access)"
        ],
        "summary": "Get log category",
        "description": "Get log category for user",
        "operationId": "logCategoryGetUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogCategoryGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/log/user/categories/{logCategoryId}/generate": {
      "post": {
        "tags": [
          "Logs (user access)"
        ],
        "summary": "Get logs",
        "description": "Get logs",
        "operationId": "getLogsUsingPOST_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataSize",
            "in": "query",
            "description": "dataSize",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastIndex",
            "in": "query",
            "description": "lastIndex",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogsResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/log/user/categories/{logCategoryId}/generatebydsl": {
      "post": {
        "tags": [
          "Logs (user access)"
        ],
        "summary": "Get logs",
        "description": "Get logs",
        "operationId": "getLogsUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataSize",
            "in": "query",
            "description": "dataSize",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "serializedDslQuery",
            "description": "serializedDslQuery",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetLogsResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/mcs/secret": {
      "get": {
        "tags": [
          "MCS Secret"
        ],
        "summary": "Get MCS secret",
        "description": "Get MCS secret",
        "operationId": "mcsGetSecretUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/McsSecretGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/mcs/secret/generate": {
      "post": {
        "tags": [
          "MCS Secret"
        ],
        "summary": "Generate MCS secret",
        "description": "Generate MCS Secret",
        "operationId": "mcsGenerateSecretUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "mcsSecret",
            "description": "mcsSecret",
            "required": true,
            "schema": {
              "$ref": "#/definitions/McsSecret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/McsSecretGenerateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/custom-services": {
      "get": {
        "tags": [
          "Custom services"
        ],
        "summary": "List",
        "description": "List custom services from NSX-T",
        "operationId": "customServiceListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomServiceListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Custom services"
        ],
        "summary": "Create",
        "description": "Create custom service in NSX-T",
        "operationId": "customServiceCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "customServiceInstance",
            "description": "customServiceInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomServiceInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateCustomServiceResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateCustomServiceResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/custom-services/{serviceId}": {
      "get": {
        "tags": [
          "Custom services"
        ],
        "summary": "Get",
        "description": "Get custom service from NSX-T",
        "operationId": "customServiceGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomServiceGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Custom services"
        ],
        "summary": "Update",
        "description": "Update custom service from NSX-T",
        "operationId": "customServiceUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "customServiceInstance",
            "description": "customServiceInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomServiceInstance"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateCustomServiceResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateCustomServiceResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Custom services"
        ],
        "summary": "Delete",
        "description": "Delete custom service from NSX-T",
        "operationId": "customServiceDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "force",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteCustomServiceResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteCustomServiceResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/default-services": {
      "get": {
        "tags": [
          "Default services"
        ],
        "summary": "List",
        "description": "List default services from NSX-T",
        "operationId": "serviceListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/default-services/{serviceId}": {
      "get": {
        "tags": [
          "Default services"
        ],
        "summary": "Get",
        "description": "Get default service from NSX-T",
        "operationId": "serviceGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/network/nat/rules": {
      "get": {
        "tags": [
          "NAT Rules"
        ],
        "summary": "List",
        "description": "List NAT rules",
        "operationId": "natRuleListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NATRuleListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "NAT Rules"
        ],
        "summary": "Create",
        "description": "Create NAT rule",
        "operationId": "natRuleCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "natRuleInstance",
            "description": "natRuleInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NATRuleInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateNATRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateNATRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/nat/rules/{ruleId}": {
      "get": {
        "tags": [
          "NAT Rules"
        ],
        "summary": "Get",
        "description": "Get NAT rule",
        "operationId": "natRuleGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NATRuleGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "NAT Rules"
        ],
        "summary": "Update",
        "description": "Update NAT rule",
        "operationId": "natRuleUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "natRuleInstance",
            "description": "natRuleInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NATRuleInstance"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateNATRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "NAT Rules"
        ],
        "summary": "Delete",
        "description": "Delete NAT rule",
        "operationId": "natRuleDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteNATRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers": {
      "get": {
        "tags": [
          "Routers"
        ],
        "summary": "List",
        "description": "List routers T0/T1 from NSX-T",
        "operationId": "routerListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouterListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Routers"
        ],
        "summary": "Create",
        "description": "Create router T1 in NSX-T",
        "operationId": "routerCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "routerInstance",
            "description": "routerInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateRouterResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateRouterResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}": {
      "get": {
        "tags": [
          "Routers"
        ],
        "summary": "Get",
        "description": "Get router from NSX-T",
        "operationId": "routerGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouterGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Routers"
        ],
        "summary": "Update",
        "description": "Update router T1 from NSX-T",
        "operationId": "routerUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "routerInstance",
            "description": "routerInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateRouterResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateRouterResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Routers"
        ],
        "summary": "Delete",
        "description": "Delete router T1 from NSX-T",
        "operationId": "routerDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteRouterResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteRouterResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}/rules/e-w": {
      "get": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "List",
        "description": "List firewall rules (east-west) from NSX-T",
        "operationId": "dfwRuleListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DFWRuleListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "Create",
        "description": "Create firewall rule (east-west) in NSX-T",
        "operationId": "dfwRuleCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "dfwRule",
            "description": "dfwRule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DFWRule"
            }
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateDFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateDFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}/rules/e-w/{ruleId}": {
      "get": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "Get",
        "description": "Get firewall rule (east-west) from NSX-T",
        "operationId": "dfwRuleGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DFWRuleGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "Update",
        "description": "Update firewall rule (east-west) in NSX-T",
        "operationId": "dfwRuleUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "dfwRule",
            "description": "dfwRule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DFWRule"
            }
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateDFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateDFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "Delete",
        "description": "Delete firewall rule (east-west) from NSX-T",
        "operationId": "dfwRuleDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteDFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteDFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}/rules/s-n": {
      "get": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "List",
        "description": "List firewall rules (south-north) from NSX-T",
        "operationId": "gfwRuleListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GFWRuleListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "Create",
        "description": "Create firewall rule (south-north) in NSX-T",
        "operationId": "gfwRuleCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "gfwRule",
            "description": "gfwRule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GFWRule"
            }
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateGFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateGFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}/rules/s-n/{ruleId}": {
      "get": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "Get",
        "description": "Get firewall rule (south-north) from NSX-T",
        "operationId": "gfwRuleGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GFWRuleGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "Update",
        "description": "Create firewall rule (south-north) in NSX-T",
        "operationId": "gfwRuleUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "gfwRule",
            "description": "gfwRule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GFWRule"
            }
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateGFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateGFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "Delete",
        "description": "Delete firewall rule (south-north) from NSX-T",
        "operationId": "gfwRuleDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteGFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteGFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/security-groups": {
      "get": {
        "tags": [
          "Security groups"
        ],
        "summary": "List",
        "description": "List security groups from NSX-T",
        "operationId": "securityGroupListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityGroupListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Security groups"
        ],
        "summary": "Create",
        "description": "Create security group in NSX-T",
        "operationId": "securityGroupCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "securityGroup",
            "description": "securityGroup",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateSecurityGroupResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateSecurityGroupResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/security-groups/{groupId}": {
      "get": {
        "tags": [
          "Security groups"
        ],
        "summary": "Get",
        "description": "Get security group from NSX-T",
        "operationId": "securityGroupGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityGroupGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Security groups"
        ],
        "summary": "Update",
        "description": "Update security group from NSX-T",
        "operationId": "securityGroupUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "securityGroup",
            "description": "securityGroup",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateSecurityGroupResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateSecurityGroupResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Security groups"
        ],
        "summary": "Delete",
        "description": "Delete security group from NSX-T",
        "operationId": "securityGroupDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "force",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteSecurityGroupResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteSecurityGroupResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/networks": {
      "get": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "List",
        "description": "List virtual network",
        "operationId": "virtualNetworkListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "Create",
        "description": "Create virtual network",
        "operationId": "virtualNetworkCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "virtualNetworkInstance",
            "description": "virtualNetworkInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetworkInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/networks/{virtualNetworkId}": {
      "get": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "Get",
        "description": "Get virtual network",
        "operationId": "virtualNetworkGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualNetworkId",
            "in": "path",
            "description": "virtualNetworkId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "Update",
        "description": "Update virtual network",
        "operationId": "virtualNetworkUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualNetworkId",
            "in": "path",
            "description": "virtualNetworkId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "virtualNetworkInstance",
            "description": "virtualNetworkInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetworkInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkUpdateResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "Delete",
        "description": "Delete virtual network",
        "operationId": "virtualNetworkDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualNetworkId",
            "in": "path",
            "description": "virtualNetworkId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkDeleteResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List",
        "description": "List projects",
        "operationId": "projectListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Create",
        "description": "Create project",
        "operationId": "projectCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "projectInstance",
            "description": "projectInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/ProjectCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get",
        "description": "Get projects",
        "operationId": "projectGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update",
        "description": "Update project",
        "operationId": "projectUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "projectInstance",
            "description": "projectInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectUpdateResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/ProjectUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete",
        "description": "Delete project",
        "operationId": "projectDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectDeleteResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/ProjectDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/request/": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "List",
        "description": "List IaaS requests.",
        "operationId": "requestListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "active",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestInstanceListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/request/{requestId}": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Get",
        "description": "Get IaaS requests.",
        "operationId": "requestGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "requestId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestInstanceGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List",
        "description": "List tags",
        "operationId": "tagListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagValue",
            "in": "query",
            "description": "tagValue",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Create",
        "description": "Create billing tag",
        "operationId": "tagCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "tag",
            "description": "tag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/TagCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/tags/{tagId}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get",
        "description": "Get tag",
        "operationId": "tagGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Update",
        "description": "Update tag",
        "operationId": "tagUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "tag",
            "description": "tag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "updateMembers",
            "in": "query",
            "description": "updateMembers",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete",
        "description": "Delete tag",
        "operationId": "tagDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/snapshots": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "List",
        "description": "List vSphere vCenter virtual machines snapshots",
        "operationId": "snapshotListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SnapshotListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/snapshots/{snapshotId}": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Get",
        "description": "Get vSphere vCenter virtual machine snapshot",
        "operationId": "snapshotGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SnapshotGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/vcs/virtual-machines": {
      "get": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "List",
        "description": "List vSphere vCenter virtual machines",
        "operationId": "vcsVirtualMachineListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Create",
        "description": "Create vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "virtualMachine",
            "description": "virtualMachine",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}": {
      "get": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Get",
        "description": "Get vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Update",
        "description": "Update vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "virtualMachine",
            "description": "virtualMachine",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineInstance"
            }
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Delete",
        "description": "Delete vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}/removeAllSnapshots": {
      "post": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Reset",
        "description": "Reset vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineRemoveAllSnapshotsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemoveAllSnapshotsResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}/reset": {
      "post": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Reset",
        "description": "Reset vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineResetUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResetVirtualMachineResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}/snapshots": {
      "get": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "List snapshots",
        "description": "List virtual machine snapshot(s)",
        "operationId": "vcsVirtualMachineSnapshotListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/SnapshotListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Create snapshot",
        "description": "Create virtual machine snapshot",
        "operationId": "vcsVirtualMachineSnapshotCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ramSnapshot",
            "in": "query",
            "description": "ramSnapshot",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "snapshotInstance",
            "description": "snapshotInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnapshotInstance"
            }
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateSnapshotResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateSnapshotResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}/snapshots/{snapshotId}": {
      "get": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Get snapshot",
        "description": "Get virtual machine snapshot",
        "operationId": "vcsVirtualMachineSnapshotGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/SnapshotGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Delete snapshot",
        "description": "Delete virtual machine snapshot",
        "operationId": "vcsVirtualMachineSnapshotDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/DeleteSnapshotResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}/snapshots/{snapshotId}/revert": {
      "post": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Revert to snapshot",
        "description": "Revert to virtual machine snapshot",
        "operationId": "vcsVirtualMachineSnapshotRevertUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/RevertSnapshotResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/wso2/logout": {
      "post": {
        "tags": [
          "WSO2 Logout Token"
        ],
        "summary": "Get",
        "description": "Logout token",
        "operationId": "logoutTokenUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/wso2/token": {
      "post": {
        "tags": [
          "WSO2 Token"
        ],
        "summary": "Get",
        "description": "Generate authorization token",
        "operationId": "getTokenUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "wsoTokenRequest",
            "description": "wsoTokenRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WSOTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WSOTokenResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/wso2/ui/logout": {
      "post": {
        "tags": [
          "WSO2 UI Logout Token"
        ],
        "summary": "Get",
        "description": "Logout token",
        "operationId": "logoutTokenUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/wso2/ui/token": {
      "post": {
        "tags": [
          "WSO2 Token"
        ],
        "summary": "Get",
        "description": "Generate authorization token",
        "operationId": "getTokenUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "wsoUITokenRequest",
            "description": "wsoUITokenRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WSOUITokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WSOTokenResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccountCreateResponse": {
      "type": "object",
      "properties": {
        "accountInstance": {
          "$ref": "#/definitions/AccountInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "AccountCreateResponse"
    },
    "AccountDeleteResponse": {
      "type": "object",
      "properties": {
        "accountInstance": {
          "$ref": "#/definitions/AccountInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "AccountDeleteResponse"
    },
    "AccountGetResponse": {
      "type": "object",
      "properties": {
        "accountInstance": {
          "$ref": "#/definitions/AccountInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "AccountGetResponse"
    },
    "AccountInstance": {
      "type": "object",
      "properties": {
        "accountDescription": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "alarms": {
          "type": "boolean"
        },
        "cost": {
          "type": "number",
          "format": "float"
        },
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "discount": {
          "type": "number",
          "format": "float"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountProjectInstance"
          }
        }
      },
      "title": "AccountInstance"
    },
    "AccountListResponse": {
      "type": "object",
      "properties": {
        "accountInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "AccountListResponse"
    },
    "AccountProjectInstance": {
      "type": "object",
      "properties": {
        "cost": {
          "type": "number",
          "format": "float"
        },
        "cpuReserved": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "limitEnabled": {
          "type": "boolean"
        },
        "memoryReservedSizeMB": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "storageReservedSizeGB": {
          "type": "integer",
          "format": "int64"
        },
        "vrfId": {
          "type": "string"
        }
      },
      "title": "AccountProjectInstance"
    },
    "AccountUpdateResponse": {
      "type": "object",
      "properties": {
        "accountInstance": {
          "$ref": "#/definitions/AccountInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "AccountUpdateResponse"
    },
    "AvailablePublicIPGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "publicIpAddress": {
          "$ref": "#/definitions/PublicIpAddress"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "AvailablePublicIPGetResponse"
    },
    "BackupList": {
      "type": "object",
      "properties": {
        "backupListCode": {
          "type": "string"
        },
        "backupListId": {
          "type": "string"
        },
        "backupListName": {
          "type": "string"
        }
      },
      "title": "BackupList"
    },
    "BackupListGetResponse": {
      "type": "object",
      "properties": {
        "backupList": {
          "$ref": "#/definitions/BackupList"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BackupListGetResponse"
    },
    "BackupListListResponse": {
      "type": "object",
      "properties": {
        "backupListCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackupList"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BackupListListResponse"
    },
    "BackupPlan": {
      "type": "object",
      "properties": {
        "backupPlanId": {
          "type": "string"
        },
        "backupPlanName": {
          "type": "string"
        }
      },
      "title": "BackupPlan"
    },
    "BackupPlanGetResponse": {
      "type": "object",
      "properties": {
        "backupPlan": {
          "$ref": "#/definitions/BackupPlan"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BackupPlanGetResponse"
    },
    "BackupPlanListResponse": {
      "type": "object",
      "properties": {
        "backupPlanCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackupPlan"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BackupPlanListResponse"
    },
    "BillingAlarmDefinition": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "alarmDefinitionDescription": {
          "type": "string"
        },
        "alarmDefinitionId": {
          "type": "string"
        },
        "alarmDefinitionName": {
          "type": "string"
        },
        "alarmEnabled": {
          "type": "boolean"
        },
        "allCriteriaMustBeMeet": {
          "type": "boolean"
        },
        "blockResourceDeployment": {
          "type": "boolean"
        },
        "cpuAllocationAlarmEnabled": {
          "type": "boolean"
        },
        "cpuAllocationOperator": {
          "type": "string",
          "enum": [
            "EQUALS",
            "HIGHER",
            "LOWER"
          ]
        },
        "cpuAllocationThresholdValue": {
          "type": "number",
          "format": "float"
        },
        "cpuUsageAlarmEnabled": {
          "type": "boolean"
        },
        "cpuUsageOperator": {
          "type": "string",
          "enum": [
            "EQUALS",
            "HIGHER",
            "LOWER"
          ]
        },
        "cpuUsageThresholdValue": {
          "type": "number",
          "format": "float"
        },
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "groupInstanceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupInstance"
          }
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "ramAllocationAlarmEnabled": {
          "type": "boolean"
        },
        "ramAllocationOperator": {
          "type": "string",
          "enum": [
            "EQUALS",
            "HIGHER",
            "LOWER"
          ]
        },
        "ramAllocationThresholdValue": {
          "type": "number",
          "format": "float"
        },
        "ramUsageAlarmEnabled": {
          "type": "boolean"
        },
        "ramUsageOperator": {
          "type": "string",
          "enum": [
            "EQUALS",
            "HIGHER",
            "LOWER"
          ]
        },
        "ramUsageThresholdValue": {
          "type": "number",
          "format": "float"
        },
        "sendEMailNotification": {
          "type": "boolean"
        },
        "sendNotification": {
          "type": "boolean"
        },
        "storageAllocationAlarmEnabled": {
          "type": "boolean"
        },
        "storageAllocationOperator": {
          "type": "string",
          "enum": [
            "EQUALS",
            "HIGHER",
            "LOWER"
          ]
        },
        "storageAllocationThresholdValue": {
          "type": "number",
          "format": "float"
        },
        "storageUsageAlarmEnabled": {
          "type": "boolean"
        },
        "storageUsageOperator": {
          "type": "string",
          "enum": [
            "EQUALS",
            "HIGHER",
            "LOWER"
          ]
        },
        "storageUsageThresholdValue": {
          "type": "number",
          "format": "float"
        },
        "tagId": {
          "type": "integer",
          "format": "int32"
        },
        "totalCostThresholdValue": {
          "type": "number",
          "format": "float"
        },
        "totalCostUsageAlarmEnabled": {
          "type": "boolean"
        },
        "totalCostUsageOperator": {
          "type": "string",
          "enum": [
            "EQUALS",
            "HIGHER",
            "LOWER"
          ]
        },
        "userInstanceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInstance"
          }
        }
      },
      "title": "BillingAlarmDefinition"
    },
    "CreateBillingAlarmDefinitionResponse": {
      "type": "object",
      "properties": {
        "billingAlarmDefinition": {
          "$ref": "#/definitions/BillingAlarmDefinition"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateBillingAlarmDefinitionResponse"
    },
    "CreateCustomServiceResponse": {
      "type": "object",
      "properties": {
        "customServiceId": {
          "type": "string"
        },
        "customServiceInstance": {
          "$ref": "#/definitions/CustomServiceInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateCustomServiceResponse"
    },
    "CreateDFWRuleResponse": {
      "type": "object",
      "properties": {
        "dfwRule": {
          "$ref": "#/definitions/DFWRule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateDFWRuleResponse"
    },
    "CreateGFWRuleResponse": {
      "type": "object",
      "properties": {
        "gfwRule": {
          "$ref": "#/definitions/GFWRule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateGFWRuleResponse"
    },
    "CreateKeyRotationScheduleResponse": {
      "type": "object",
      "properties": {
        "keyRotationSchedule": {
          "$ref": "#/definitions/KeyRotationSchedule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateKeyRotationScheduleResponse"
    },
    "CreateKmsKeyResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateKmsKeyResponse"
    },
    "CreateNATRuleResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "natRuleInstance": {
          "$ref": "#/definitions/NATRuleInstance"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateNATRuleResponse"
    },
    "CreateNewKmsKeyVersionResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateNewKmsKeyVersionResponse"
    },
    "CreatePublicIPAllocationResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "publicIpAllocation": {
          "$ref": "#/definitions/PublicIpAllocation"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreatePublicIPAllocationResponse"
    },
    "CreateRouterResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "routerId": {
          "type": "string"
        },
        "routerInstance": {
          "$ref": "#/definitions/RouterInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateRouterResponse"
    },
    "CreateSecurityGroupResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "securityGroup": {
          "$ref": "#/definitions/SecurityGroup"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateSecurityGroupResponse"
    },
    "CreateSnapshotResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "snapshotInstance": {
          "$ref": "#/definitions/SnapshotInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateSnapshotResponse"
    },
    "CreateSyncRequest": {
      "type": "object",
      "properties": {
        "encodedContent": {
          "type": "string"
        }
      },
      "title": "CreateSyncRequest"
    },
    "CustomServiceGetResponse": {
      "type": "object",
      "properties": {
        "customServiceInstance": {
          "$ref": "#/definitions/CustomServiceInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CustomServiceGetResponse"
    },
    "CustomServiceInstance": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "l4PortSetEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/L4PortSetEntry"
          }
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagInstance"
          }
        }
      },
      "title": "CustomServiceInstance"
    },
    "CustomServiceListResponse": {
      "type": "object",
      "properties": {
        "customServiceInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomServiceInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CustomServiceListResponse"
    },
    "DFWRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "ALLOW",
            "DROP",
            "REJECT"
          ]
        },
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "customServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomServiceInstance"
          }
        },
        "defaultServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          }
        },
        "destination": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        },
        "direction": {
          "type": "string",
          "enum": [
            "IN",
            "IN_OUT",
            "OUT"
          ]
        },
        "disabled": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "ipProtocol": {
          "type": "string",
          "enum": [
            "IPV4",
            "IPV4_IPV6",
            "IPV6"
          ]
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "projectId": {
          "type": "string"
        },
        "ruleId": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        },
        "source": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        }
      },
      "title": "DFWRule"
    },
    "DFWRuleGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "ruleInstance": {
          "$ref": "#/definitions/DFWRule"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DFWRuleGetResponse"
    },
    "DFWRuleListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "ruleInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DFWRule"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DFWRuleListResponse"
    },
    "DeleteBillingAlarmDefinitionResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteBillingAlarmDefinitionResponse"
    },
    "DeleteCustomServiceResponse": {
      "type": "object",
      "properties": {
        "customServiceInstance": {
          "$ref": "#/definitions/CustomServiceInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "status": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteCustomServiceResponse"
    },
    "DeleteDFWRuleResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteDFWRuleResponse"
    },
    "DeleteGFWRuleResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteGFWRuleResponse"
    },
    "DeleteKeyRotationScheduleResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteKeyRotationScheduleResponse"
    },
    "DeleteKmsKeyResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteKmsKeyResponse"
    },
    "DeleteNATRuleResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteNATRuleResponse"
    },
    "DeletePublicIPAllocationResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeletePublicIPAllocationResponse"
    },
    "DeleteRouterResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "routerInstance": {
          "$ref": "#/definitions/RouterInstance"
        },
        "status": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteRouterResponse"
    },
    "DeleteSecurityGroupResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteSecurityGroupResponse"
    },
    "DeleteSnapshotResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteSnapshotResponse"
    },
    "DeploymentGetResponse": {
      "type": "object",
      "properties": {
        "deploymentInstance": {
          "$ref": "#/definitions/DeploymentInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeploymentGetResponse"
    },
    "DeploymentInstance": {
      "type": "object",
      "properties": {
        "byol": {
          "type": "boolean"
        },
        "customSpecificationId": {
          "type": "string"
        },
        "deploymentCategory": {
          "type": "string",
          "enum": [
            "LINUX",
            "WINDOWS"
          ]
        },
        "deploymentId": {
          "type": "string"
        },
        "deploymentInitialSizeGB": {
          "type": "number",
          "format": "float"
        },
        "deploymentInitialSizeMB": {
          "type": "number",
          "format": "float"
        },
        "deploymentTemplatePattern": {
          "type": "string"
        },
        "deploymentType": {
          "type": "string",
          "enum": [
            "ISO",
            "OVF",
            "TEMPLATE"
          ]
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "isoName": {
          "type": "string"
        },
        "ovfName": {
          "type": "string"
        }
      },
      "title": "DeploymentInstance"
    },
    "DeploymentListResponse": {
      "type": "object",
      "properties": {
        "deploymentInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeploymentListResponse"
    },
    "DeploymentParam": {
      "type": "object",
      "properties": {
        "paramName": {
          "type": "string"
        },
        "paramType": {
          "type": "string",
          "enum": [
            "HOST_NAME",
            "LOGIN_PASSWORD",
            "LOGIN_SSH_KEY",
            "LOGIN_USERNAME",
            "NET_DNS_PRIMARY",
            "NET_DNS_SEARCH",
            "NET_DNS_SECONDARY",
            "NET_DNS_SUFFIX",
            "NET_IP_ADDR_01",
            "NET_IP_BROADCAST_01",
            "NET_IP_GATEWAY_01",
            "NET_IP_MASK_01",
            "NET_WINS_ALTERNATIVE",
            "NET_WINS_PREFERRED"
          ]
        },
        "paramValue": {
          "type": "string"
        }
      },
      "title": "DeploymentParam"
    },
    "ElkResponse": {
      "type": "object",
      "properties": {
        "hits": {
          "$ref": "#/definitions/Hits"
        },
        "timed_out": {
          "type": "boolean"
        }
      },
      "title": "ElkResponse"
    },
    "EncryptionInstance": {
      "type": "object",
      "properties": {
        "encrypt": {
          "type": "boolean"
        },
        "encryptionKeyId": {
          "type": "string"
        },
        "encryptionProviderId": {
          "type": "string"
        },
        "managed": {
          "type": "boolean"
        },
        "recryptOperation": {
          "type": "string",
          "enum": [
            "DEEP",
            "NONE",
            "SHALLOW"
          ]
        }
      },
      "title": "EncryptionInstance"
    },
    "ExportKmsKeyResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ExportKmsKeyResponse"
    },
    "FieldGroup": {
      "type": "object",
      "properties": {
        "fieldValue": {
          "type": "string"
        },
        "logCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "FieldGroup"
    },
    "FolderGetResponse": {
      "type": "object",
      "properties": {
        "folderInstance": {
          "$ref": "#/definitions/FolderInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "FolderGetResponse"
    },
    "FolderInstance": {
      "type": "object",
      "properties": {
        "builtIn": {
          "type": "boolean"
        },
        "folderPath": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "inherit": {
          "type": "boolean"
        },
        "lvl": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "FolderInstance"
    },
    "FolderListResponse": {
      "type": "object",
      "properties": {
        "folderInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "FolderListResponse"
    },
    "GFWRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "ALLOW",
            "DROP",
            "REJECT"
          ]
        },
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "customServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomServiceInstance"
          }
        },
        "defaultServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          }
        },
        "destination": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        },
        "direction": {
          "type": "string",
          "enum": [
            "IN",
            "IN_OUT",
            "OUT"
          ]
        },
        "disabled": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "ipProtocol": {
          "type": "string",
          "enum": [
            "IPV4",
            "IPV4_IPV6",
            "IPV6"
          ]
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "projectId": {
          "type": "string"
        },
        "ruleId": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterInstance"
          }
        },
        "source": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        }
      },
      "title": "GFWRule"
    },
    "GFWRuleGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "ruleInstance": {
          "$ref": "#/definitions/GFWRule"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GFWRuleGetResponse"
    },
    "GFWRuleListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "ruleInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GFWRule"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GFWRuleListResponse"
    },
    "GetLogCategoryStats": {
      "type": "object",
      "properties": {
        "logCategoryStats": {
          "$ref": "#/definitions/LogCategoryStats"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GetLogCategoryStats"
    },
    "GetLogHistogram": {
      "type": "object",
      "properties": {
        "logHistogram": {
          "$ref": "#/definitions/LogHistogram"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GetLogHistogram"
    },
    "GetLogStats": {
      "type": "object",
      "properties": {
        "logCategoryStats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogCategoryStats"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GetLogStats"
    },
    "GetLogsResponse": {
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/ElkResponse"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GetLogsResponse"
    },
    "GetPublicKeyRequest": {
      "type": "object",
      "properties": {
        "sha256CheckSum": {
          "type": "string"
        }
      },
      "title": "GetPublicKeyRequest"
    },
    "GetPublicKeyResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "rsaPublicKey": {
          "$ref": "#/definitions/RSAPublicKey"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GetPublicKeyResponse"
    },
    "GroupInstance": {
      "type": "object",
      "properties": {
        "dn": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupInstance"
          }
        },
        "name": {
          "type": "string"
        },
        "samAccountName": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInstance"
          }
        }
      },
      "title": "GroupInstance"
    },
    "Hit": {
      "type": "object",
      "properties": {
        "_source": {
          "$ref": "#/definitions/Source"
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "title": "Hit"
    },
    "Hits": {
      "type": "object",
      "properties": {
        "hits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hit"
          }
        },
        "total": {
          "$ref": "#/definitions/Total"
        }
      },
      "title": "Hits"
    },
    "ImportKmsKeyResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ImportKmsKeyResponse"
    },
    "IpCollection": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ipCollectionAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "memberType": {
          "type": "string",
          "enum": [
            "IPCOLLECTION",
            "SEGMENT",
            "VIRTUAL_MACHINE"
          ]
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        }
      },
      "title": "IpCollection"
    },
    "IpCollectionCreateResponse": {
      "type": "object",
      "properties": {
        "ipCollection": {
          "$ref": "#/definitions/IpCollection"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionCreateResponse"
    },
    "IpCollectionDeleteResponse": {
      "type": "object",
      "properties": {
        "ipCollection": {
          "$ref": "#/definitions/IpCollection"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionDeleteResponse"
    },
    "IpCollectionListResponse": {
      "type": "object",
      "properties": {
        "ipCollectionSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpCollection"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionListResponse"
    },
    "IpCollectionResponse": {
      "type": "object",
      "properties": {
        "ipCollection": {
          "$ref": "#/definitions/IpCollection"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionResponse"
    },
    "IpCollectionUpdateResponse": {
      "type": "object",
      "properties": {
        "ipCollection": {
          "$ref": "#/definitions/IpCollection"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionUpdateResponse"
    },
    "IsoInstance": {
      "type": "object",
      "properties": {
        "connected": {
          "type": "boolean"
        },
        "connectedAtPowerOn": {
          "type": "boolean"
        },
        "isoFileName": {
          "type": "string"
        }
      },
      "title": "IsoInstance"
    },
    "KeyExport": {
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "enum": [
            "pkcs1",
            "pkcs8"
          ]
        },
        "wrapPublicKey": {
          "type": "string"
        }
      },
      "title": "KeyExport"
    },
    "KeyGetResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "KeyGetResponse"
    },
    "KeyImport": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "keyName": {
          "type": "string"
        },
        "keyUsageList": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CERTIFICATE_SIGN",
              "CONTENT_COMMITMENT",
              "CRL_SIGN",
              "DECRYPT",
              "DERIVE_KEY",
              "ENCRYPT",
              "EXPORT_KEY",
              "FPE_DECRYPT",
              "FPE_ENCRYPT",
              "GENERATE_CRYPTOGRAM",
              "GENERATE_MAC",
              "KEY_AGREEMENT",
              "SIGN",
              "TRANSLATE_DECRYPT",
              "TRANSLATE_ENCRYPT",
              "TRANSLATE_UNWRAP",
              "TRANSLATE_WRAP",
              "UNWRAP_KEY",
              "VALIDATE_CRYPTOGRAM",
              "VERIFY",
              "VERIFY_MAC",
              "WRAP_KEY"
            ]
          }
        },
        "material": {
          "type": "string"
        },
        "privateKeyIdToUnwrap": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "KeyImport"
    },
    "KeyInstance": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "activationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "algorithm": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "defaultIV": {
          "type": "string"
        },
        "devAccount": {
          "type": "string"
        },
        "emptyMaterial": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "keyUsageList": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CERTIFICATE_SIGN",
              "CONTENT_COMMITMENT",
              "CRL_SIGN",
              "DECRYPT",
              "DERIVE_KEY",
              "ENCRYPT",
              "EXPORT_KEY",
              "FPE_DECRYPT",
              "FPE_ENCRYPT",
              "GENERATE_CRYPTOGRAM",
              "GENERATE_MAC",
              "KEY_AGREEMENT",
              "SIGN",
              "TRANSLATE_DECRYPT",
              "TRANSLATE_ENCRYPT",
              "TRANSLATE_UNWRAP",
              "TRANSLATE_WRAP",
              "UNWRAP_KEY",
              "VALIDATE_CRYPTOGRAM",
              "VERIFY",
              "VERIFY_MAC",
              "WRAP_KEY"
            ]
          }
        },
        "managed": {
          "type": "boolean"
        },
        "material": {
          "type": "string"
        },
        "muid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "neverExportable": {
          "type": "boolean"
        },
        "neverExported": {
          "type": "boolean"
        },
        "objectType": {
          "type": "string"
        },
        "publickey": {
          "type": "string"
        },
        "revocationReason": {
          "type": "string",
          "enum": [
            "AffiliationChanged",
            "CACompromise",
            "CessationOfOperation",
            "KeyCompromise",
            "PrivilegeWithdrawn",
            "Superseded",
            "Unspecified"
          ]
        },
        "sha1Fingerprint": {
          "type": "string"
        },
        "sha256Fingerprint": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "type": "string"
        },
        "undeletable": {
          "type": "boolean"
        },
        "unexportable": {
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "uri": {
          "type": "string"
        },
        "usage": {
          "type": "string"
        },
        "usageMask": {
          "type": "integer",
          "format": "int32"
        },
        "uuid": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "KeyInstance"
    },
    "KeyListResponse": {
      "type": "object",
      "properties": {
        "keyInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "KeyListResponse"
    },
    "KeyNewVersion": {
      "type": "object",
      "properties": {
        "material": {
          "type": "string"
        },
        "privateKeyIdToUnwrap": {
          "type": "string"
        }
      },
      "title": "KeyNewVersion"
    },
    "KeyRevocation": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "enum": [
            "AffiliationChanged",
            "CACompromise",
            "CessationOfOperation",
            "KeyCompromise",
            "PrivilegeWithdrawn",
            "Superseded",
            "Unspecified"
          ]
        }
      },
      "title": "KeyRevocation"
    },
    "KeyRotationSchedule": {
      "type": "object",
      "properties": {
        "cycle": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "entryId": {
          "type": "integer",
          "format": "int32"
        },
        "intervalHours": {
          "type": "integer",
          "format": "int32"
        },
        "keyId": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "staticDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "KeyRotationSchedule"
    },
    "KeyRotationScheduleGetResponse": {
      "type": "object",
      "properties": {
        "keyRotationSchedule": {
          "$ref": "#/definitions/KeyRotationSchedule"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "KeyRotationScheduleGetResponse"
    },
    "L4PortSetEntry": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "destinationPorts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string"
        },
        "l4PortSetEntryId": {
          "type": "string"
        },
        "l4Protocol": {
          "type": "string",
          "enum": [
            "TCP",
            "UDP"
          ]
        },
        "parentPath": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "relativePath": {
          "type": "string"
        },
        "resourceType": {
          "$ref": "#/definitions/ResourceType"
        },
        "sourcePorts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "L4PortSetEntry"
    },
    "LicSettings": {
      "type": "object",
      "properties": {
        "byolEnabled": {
          "type": "boolean"
        },
        "osType": {
          "type": "string",
          "enum": [
            "LINUX",
            "WINDOWS"
          ]
        },
        "useDedicatedHosts": {
          "type": "boolean"
        }
      },
      "title": "LicSettings"
    },
    "LogCategory": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "logCategoryDescription": {
          "type": "string"
        },
        "logCategoryId": {
          "type": "integer",
          "format": "int32"
        },
        "logCategoryName": {
          "type": "string"
        },
        "retentionDays": {
          "type": "integer",
          "format": "int32"
        },
        "searchCode": {
          "type": "string"
        }
      },
      "title": "LogCategory"
    },
    "LogCategoryGetResponse": {
      "type": "object",
      "properties": {
        "logCategory": {
          "$ref": "#/definitions/LogCategory"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "LogCategoryGetResponse"
    },
    "LogCategoryListResponse": {
      "type": "object",
      "properties": {
        "logCategoryCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogCategory"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "LogCategoryListResponse"
    },
    "LogCategoryStats": {
      "type": "object",
      "properties": {
        "logCategory": {
          "$ref": "#/definitions/LogCategory"
        },
        "logsCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "LogCategoryStats"
    },
    "LogHistogram": {
      "type": "object",
      "properties": {
        "timestampGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimestampGroup"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "LogHistogram"
    },
    "McsSecret": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string"
        }
      },
      "title": "McsSecret"
    },
    "McsSecretGenerateResponse": {
      "type": "object",
      "properties": {
        "mcsSecret": {
          "$ref": "#/definitions/McsSecret"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "McsSecretGenerateResponse"
    },
    "McsSecretGetResponse": {
      "type": "object",
      "properties": {
        "mcsSecret": {
          "$ref": "#/definitions/McsSecret"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "McsSecretGetResponse"
    },
    "NATRuleGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "natRuleInstance": {
          "$ref": "#/definitions/NATRuleInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "NATRuleGetResponse"
    },
    "NATRuleInstance": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "DNAT",
            "NO_SNAT",
            "SNAT"
          ]
        },
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "description": {
          "type": "string"
        },
        "destinationNetwork": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "firewallMatch": {
          "type": "string",
          "enum": [
            "BYPASS",
            "MATCH_EXTERNAL_ADDRESS",
            "MATCH_INTERNAL_ADDRESS"
          ]
        },
        "logging": {
          "type": "boolean"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "natType": {
          "type": "string",
          "enum": [
            "AUTO",
            "MANUAL"
          ]
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "ruleId": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "serviceInstance": {
          "$ref": "#/definitions/ServiceInstance"
        },
        "sourceNetwork": {
          "type": "string"
        },
        "tierZeroRouter": {
          "$ref": "#/definitions/RouterInstance"
        },
        "translatedNetwork": {
          "type": "string"
        },
        "translatedPorts": {
          "type": "string"
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "NATRuleInstance"
    },
    "NATRuleListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "natRuleInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NATRuleInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "NATRuleListResponse"
    },
    "Position": {
      "type": "object",
      "properties": {
        "reviseOperation": {
          "type": "string",
          "enum": [
            "AFTER",
            "BEFORE",
            "BOTTOM",
            "TOP"
          ]
        },
        "ruleId": {
          "type": "string"
        }
      },
      "title": "Position"
    },
    "ProjectCreateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "projectInstance": {
          "$ref": "#/definitions/ProjectInstance"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ProjectCreateResponse"
    },
    "ProjectDeleteResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ProjectDeleteResponse"
    },
    "ProjectGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "projectInstance": {
          "$ref": "#/definitions/ProjectInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ProjectGetResponse"
    },
    "ProjectInstance": {
      "type": "object",
      "properties": {
        "cpuReserved": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "limitEnabled": {
          "type": "boolean"
        },
        "memoryReservedSizeMB": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "storageReservedSizeGB": {
          "type": "integer",
          "format": "int64"
        },
        "vrfId": {
          "type": "string"
        }
      },
      "title": "ProjectInstance"
    },
    "ProjectListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "projectInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ProjectListResponse"
    },
    "ProjectUpdateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "projectInstance": {
          "$ref": "#/definitions/ProjectInstance"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ProjectUpdateResponse"
    },
    "ProxyResponseMessage": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ProxyResponseMessage"
    },
    "PublicIpAddress": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "ipAddressId": {
          "type": "string"
        }
      },
      "title": "PublicIpAddress"
    },
    "PublicIpAllocation": {
      "type": "object",
      "properties": {
        "allocationId": {
          "type": "integer",
          "format": "int32"
        },
        "assignmentDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicIpAddress": {
          "$ref": "#/definitions/PublicIpAddress"
        },
        "serviceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          }
        },
        "services": {
          "type": "string"
        }
      },
      "title": "PublicIpAllocation"
    },
    "PublicIpAllocationGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "publicIpAllocation": {
          "$ref": "#/definitions/PublicIpAllocation"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "PublicIpAllocationGetResponse"
    },
    "PublicIpAllocationListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "publicIpAllocationCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicIpAllocation"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "PublicIpAllocationListResponse"
    },
    "QueryFilter": {
      "type": "object",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "id": {
          "type": "string"
        },
        "logSeverity": {
          "type": "string",
          "enum": [
            "ALERT",
            "CRITICAL",
            "DEBUG",
            "DEFAULT",
            "EMERGENCY",
            "ERROR",
            "FATAL",
            "INFO",
            "NOTICE",
            "WARN",
            "WARNING"
          ]
        },
        "queryString": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "userName": {
          "type": "string"
        }
      },
      "title": "QueryFilter"
    },
    "RSAPublicKey": {
      "type": "object",
      "properties": {
        "base64": {
          "type": "string"
        }
      },
      "title": "RSAPublicKey"
    },
    "RemoveAllSnapshotsResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RemoveAllSnapshotsResponse"
    },
    "RequestInstance": {
      "type": "object",
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lastErrorMessage": {
          "type": "string"
        },
        "requestBody": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        },
        "requestMessageList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestMessage"
          }
        },
        "requestPhase": {
          "type": "string",
          "enum": [
            "CANCELLED",
            "FINISHED",
            "NEW",
            "PROCESSING",
            "QUEUEING",
            "TIMEOUT"
          ]
        },
        "requestStatus": {
          "type": "string",
          "enum": [
            "FAILED",
            "SUCCESS"
          ]
        },
        "requestType": {
          "type": "string",
          "enum": [
            "ADS_SYNC",
            "AD_GROUP_CREATE",
            "AD_GROUP_DELETE",
            "AD_GROUP_MODIFY",
            "AD_USER_CREATE",
            "AD_USER_DELETE",
            "AD_USER_DISABLE",
            "AD_USER_ENABLE",
            "AD_USER_MODIFY",
            "BILLING_ACCOUNT_CREATE",
            "BILLING_ACCOUNT_DELETE",
            "BILLING_ACCOUNT_UPDATE",
            "BILLING_ALARM_DEFINITION_CREATE",
            "BILLING_ALARM_DEFINITION_DELETE",
            "BILLING_ALARM_DEFINITION_UPDATE",
            "CATALOG_ENTITLEMENT_CREATE",
            "CATALOG_ENTITLEMENT_DELETE",
            "CATALOG_ENTITLEMENT_UPDATE",
            "CUSTOM_SERVICE_CREATE",
            "CUSTOM_SERVICE_DELETE",
            "CUSTOM_SERVICE_MODIFY",
            "FIREWALL_DFW_RULE_CREATE",
            "FIREWALL_DFW_RULE_DELETE",
            "FIREWALL_DFW_RULE_UPDATE",
            "FIREWALL_GFW_RULE_CREATE",
            "FIREWALL_GFW_RULE_DELETE",
            "FIREWALL_GFW_RULE_UPDATE",
            "GROUP_CREATE",
            "GROUP_DELETE",
            "GROUP_MEMBER_CREATE",
            "GROUP_MEMBER_DELETE",
            "GROUP_UPDATE",
            "IPAM_PUBLIC_IP_ALLOCATION_CREATE",
            "IPAM_PUBLIC_IP_ALLOCATION_DELETE",
            "IPAM_PUBLIC_IP_ALLOCATION_UPDATE",
            "IPCOLLECTION_CREATE",
            "IPCOLLECTION_DELETE",
            "IPCOLLECTION_UPDATE",
            "KMS_KEY_CREATE",
            "KMS_KEY_DELETE",
            "KMS_KEY_EXPORT",
            "KMS_KEY_IMPORT",
            "KMS_KEY_NEW_VERSION",
            "KMS_KEY_REVOKE",
            "KMS_KEY_ROTATION_SCHEDULE_CREATE",
            "KMS_KEY_ROTATION_SCHEDULE_DELETE",
            "KMS_KEY_ROTATION_SCHEDULE_UPDATE",
            "NAT_RULE_CREATE",
            "NAT_RULE_DELETE",
            "NAT_RULE_UPDATE",
            "NETWORK_CREATE",
            "NETWORK_DELETE",
            "NETWORK_UPDATE",
            "PROJECT_CREATE",
            "PROJECT_DELETE",
            "PROJECT_UPDATE",
            "ROUTER_CREATE",
            "ROUTER_DELETE",
            "ROUTER_UPDATE",
            "SECURITY_GROUP_CREATE",
            "SECURITY_GROUP_DELETE",
            "SECURITY_GROUP_UPDATE",
            "SEGMENT_CREATE",
            "SEGMENT_DELETE",
            "SEGMENT_UPDATE",
            "SNAPSHOT_CREATE",
            "SNAPSHOT_DELETE",
            "SNAPSHOT_REVERT",
            "TAG_CREATE",
            "TAG_DELETE",
            "TAG_UPDATE",
            "UPDATE_LOG_CATEGORY",
            "VIRTUAL_MACHINE_CREATE",
            "VIRTUAL_MACHINE_DELETE",
            "VIRTUAL_MACHINE_REMOVE_ALL_SNAPSHOTS",
            "VIRTUAL_MACHINE_RESET",
            "VIRTUAL_MACHINE_UPDATE"
          ]
        },
        "requestor": {
          "type": "string"
        },
        "requestorId": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RequestInstance"
    },
    "RequestInstanceGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RequestInstanceGetResponse"
    },
    "RequestInstanceListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstanceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RequestInstanceListResponse"
    },
    "RequestMessage": {
      "type": "object",
      "properties": {
        "messageDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "messageValue": {
          "type": "string"
        }
      },
      "title": "RequestMessage"
    },
    "ResetVirtualMachineResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ResetVirtualMachineResponse"
    },
    "ResourceType": {
      "type": "object",
      "properties": {
        "resourceTypeId": {
          "type": "integer",
          "format": "int32"
        },
        "resourceTypeName": {
          "type": "string"
        }
      },
      "title": "ResourceType"
    },
    "RevertSnapshotResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RevertSnapshotResponse"
    },
    "RevokeKmsKeyResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RevokeKmsKeyResponse"
    },
    "RouterGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "routerInstance": {
          "$ref": "#/definitions/RouterInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RouterGetResponse"
    },
    "RouterInstance": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "folderPath": {
          "type": "string"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "parentT0Id": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "routerId": {
          "type": "string"
        },
        "routerType": {
          "type": "string",
          "enum": [
            "TIER0",
            "TIER1"
          ]
        }
      },
      "title": "RouterInstance"
    },
    "RouterListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "routerCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RouterListResponse"
    },
    "SecurityGroup": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroupMember"
          }
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        }
      },
      "title": "SecurityGroup"
    },
    "SecurityGroupGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "securityGroup": {
          "$ref": "#/definitions/SecurityGroup"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SecurityGroupGetResponse"
    },
    "SecurityGroupListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "securityGroupCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SecurityGroupListResponse"
    },
    "SecurityGroupMember": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "memberType": {
          "type": "string",
          "enum": [
            "IPCOLLECTION",
            "SEGMENT",
            "VIRTUAL_MACHINE"
          ]
        }
      },
      "title": "SecurityGroupMember"
    },
    "SegmentSubnetInstance": {
      "type": "object",
      "properties": {
        "dhcpRanges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gatewayAddressCIDR": {
          "type": "string"
        },
        "networkCIDR": {
          "type": "string"
        },
        "segmentSubnetId": {
          "type": "string"
        }
      },
      "title": "SegmentSubnetInstance"
    },
    "ServiceGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "serviceInstance": {
          "$ref": "#/definitions/ServiceInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ServiceGetResponse"
    },
    "ServiceInstance": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        }
      },
      "title": "ServiceInstance"
    },
    "ServiceListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "serviceInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ServiceListResponse"
    },
    "SnapshotGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "snapshotInstance": {
          "$ref": "#/definitions/SnapshotInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SnapshotGetResponse"
    },
    "SnapshotInstance": {
      "type": "object",
      "properties": {
        "childSnapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SnapshotInstance"
          }
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "powerState": {
          "type": "string",
          "enum": [
            "poweredOff",
            "poweredOn",
            "suspended"
          ]
        },
        "quiesced": {
          "type": "boolean"
        },
        "snapshotDescription": {
          "type": "string"
        },
        "snapshotId": {
          "type": "string"
        },
        "snapshotName": {
          "type": "string"
        },
        "virtualMachineId": {
          "type": "string"
        }
      },
      "title": "SnapshotInstance"
    },
    "SnapshotListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "snapshotInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SnapshotInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SnapshotListResponse"
    },
    "Source": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "jsonPayload": {
          "type": "object"
        },
        "receiveTimestamp": {
          "type": "object"
        },
        "resource": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "user": {
          "type": "string"
        }
      },
      "title": "Source"
    },
    "SyncMessageResponse": {
      "type": "object",
      "properties": {
        "messageId": {
          "type": "string"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SyncMessageResponse"
    },
    "Tag": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "relatedVirtualMachines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "tagId": {
          "type": "integer",
          "format": "int32"
        },
        "tagValue": {
          "type": "string"
        }
      },
      "title": "Tag"
    },
    "TagCreateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "tag": {
          "$ref": "#/definitions/Tag"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "TagCreateResponse"
    },
    "TagDeleteResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "TagDeleteResponse"
    },
    "TagGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "tag": {
          "$ref": "#/definitions/Tag"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "TagGetResponse"
    },
    "TagInstance": {
      "type": "object",
      "properties": {
        "scope": {
          "type": "string"
        },
        "tagId": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "TagInstance"
    },
    "TagListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "tagCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "TagListResponse"
    },
    "TagUpdateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "tag": {
          "$ref": "#/definitions/Tag"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "TagUpdateResponse"
    },
    "TimestampGroup": {
      "type": "object",
      "properties": {
        "dateAsString": {
          "type": "string"
        },
        "dateKey": {
          "type": "string"
        },
        "fieldGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldGroup"
          }
        },
        "logCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "TimestampGroup"
    },
    "Total": {
      "type": "object",
      "properties": {
        "lastIndex": {
          "type": "integer",
          "format": "int64"
        },
        "relation": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Total"
    },
    "UpdateBillingAlarmDefinitionResponse": {
      "type": "object",
      "properties": {
        "billingAlarmDefinition": {
          "$ref": "#/definitions/BillingAlarmDefinition"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateBillingAlarmDefinitionResponse"
    },
    "UpdateCustomServiceResponse": {
      "type": "object",
      "properties": {
        "customServiceInstance": {
          "$ref": "#/definitions/CustomServiceInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateCustomServiceResponse"
    },
    "UpdateDFWRuleResponse": {
      "type": "object",
      "properties": {
        "dfwRule": {
          "$ref": "#/definitions/DFWRule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateDFWRuleResponse"
    },
    "UpdateGFWRuleResponse": {
      "type": "object",
      "properties": {
        "gfwRule": {
          "$ref": "#/definitions/GFWRule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateGFWRuleResponse"
    },
    "UpdateKeyRotationScheduleResponse": {
      "type": "object",
      "properties": {
        "keyRotationSchedule": {
          "$ref": "#/definitions/KeyRotationSchedule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateKeyRotationScheduleResponse"
    },
    "UpdateLogCategoryResponse": {
      "type": "object",
      "properties": {
        "logCategory": {
          "$ref": "#/definitions/LogCategory"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateLogCategoryResponse"
    },
    "UpdateNATRuleResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "natRuleInstance": {
          "$ref": "#/definitions/NATRuleInstance"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateNATRuleResponse"
    },
    "UpdatePublicIPAllocationResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "publicIpAllocation": {
          "$ref": "#/definitions/PublicIpAllocation"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdatePublicIPAllocationResponse"
    },
    "UpdateRouterResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "routerInstance": {
          "$ref": "#/definitions/RouterInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateRouterResponse"
    },
    "UpdateSecurityGroupResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "securityGroup": {
          "$ref": "#/definitions/SecurityGroup"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateSecurityGroupResponse"
    },
    "UserInstance": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "title": "UserInstance"
    },
    "VcsVirtualMachineCreateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstance": {
          "$ref": "#/definitions/VcsVirtualMachineInstance"
        }
      },
      "title": "VcsVirtualMachineCreateResponse"
    },
    "VcsVirtualMachineDeleteResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstance": {
          "$ref": "#/definitions/VcsVirtualMachineInstance"
        }
      },
      "title": "VcsVirtualMachineDeleteResponse"
    },
    "VcsVirtualMachineGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstance": {
          "$ref": "#/definitions/VcsVirtualMachineInstance"
        }
      },
      "title": "VcsVirtualMachineGetResponse"
    },
    "VcsVirtualMachineInstance": {
      "type": "object",
      "properties": {
        "additionalVirtualDiskDeviceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualDiskDevice"
          }
        },
        "backupListCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackupList"
          }
        },
        "cpuCount": {
          "type": "integer",
          "format": "int32"
        },
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "deploymentInstance": {
          "$ref": "#/definitions/DeploymentInstance"
        },
        "deploymentParams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentParam"
          }
        },
        "dnsSearchSuffix": {
          "type": "string"
        },
        "dnsSuffix": {
          "type": "string"
        },
        "encryptionInstance": {
          "$ref": "#/definitions/EncryptionInstance"
        },
        "folderPath": {
          "type": "string"
        },
        "initialPassword": {
          "type": "string"
        },
        "initialUserName": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "isoInstance": {
          "$ref": "#/definitions/IsoInstance"
        },
        "licSettings": {
          "$ref": "#/definitions/LicSettings"
        },
        "memorySizeMB": {
          "type": "integer",
          "format": "int32"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "osType": {
          "type": "string",
          "enum": [
            "LINUX",
            "WINDOWS"
          ]
        },
        "osVirtualDiskDevice": {
          "$ref": "#/definitions/VirtualDiskDevice"
        },
        "ovfIpConfiguration": {
          "type": "boolean"
        },
        "powerState": {
          "type": "string",
          "enum": [
            "poweredOff",
            "poweredOn",
            "suspended"
          ]
        },
        "primaryDnsAddress": {
          "type": "string"
        },
        "primaryWinsAddress": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "secondaryDnsAddress": {
          "type": "string"
        },
        "secondaryWinsAddress": {
          "type": "string"
        },
        "sshKey": {
          "type": "string"
        },
        "storagePolicy": {
          "type": "string",
          "enum": [
            "ENTERPRISE",
            "STANDARD_W1",
            "STANDARD_W2"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "virtualMachineId": {
          "type": "string"
        },
        "virtualMachineName": {
          "type": "string"
        },
        "virtualNetworkDevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetworkDevice"
          }
        }
      },
      "title": "VcsVirtualMachineInstance"
    },
    "VcsVirtualMachineListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VcsVirtualMachineInstance"
          }
        }
      },
      "title": "VcsVirtualMachineListResponse"
    },
    "VcsVirtualMachineUpdateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstance": {
          "$ref": "#/definitions/VcsVirtualMachineInstance"
        }
      },
      "title": "VcsVirtualMachineUpdateResponse"
    },
    "VirtualDiskDevice": {
      "type": "object",
      "properties": {
        "controllerId": {
          "type": "integer",
          "format": "int32"
        },
        "lunId": {
          "type": "integer",
          "format": "int32"
        },
        "sizeMB": {
          "type": "integer",
          "format": "int64"
        },
        "virtualDiskDeviceType": {
          "type": "string",
          "enum": [
            "SCSI"
          ]
        }
      },
      "title": "VirtualDiskDevice"
    },
    "VirtualNetworkCreateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkCreateResponse"
    },
    "VirtualNetworkDeleteResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkDeleteResponse"
    },
    "VirtualNetworkDevice": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string"
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkDevice"
    },
    "VirtualNetworkGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkGetResponse"
    },
    "VirtualNetworkInstance": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "folderPath": {
          "type": "string"
        },
        "gatewayAddress": {
          "type": "string"
        },
        "ipamEnabled": {
          "type": "boolean"
        },
        "projectId": {
          "type": "string"
        },
        "routerRefId": {
          "type": "string"
        },
        "subnet": {
          "$ref": "#/definitions/SegmentSubnetInstance"
        },
        "subnetMask": {
          "type": "string"
        },
        "virtualNetworkId": {
          "type": "string"
        }
      },
      "title": "VirtualNetworkInstance"
    },
    "VirtualNetworkListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetworkInstance"
          }
        }
      },
      "title": "VirtualNetworkListResponse"
    },
    "VirtualNetworkUpdateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkUpdateResponse"
    },
    "WSOTokenRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "title": "WSOTokenRequest"
    },
    "WSOTokenResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "token": {
          "type": "string"
        }
      },
      "title": "WSOTokenResponse"
    },
    "WSOUITokenRequest": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        }
      },
      "title": "WSOUITokenRequest"
    }
  }
}
