{
  "swagger": "2.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "iaas-api-proxy.ochk.pilot",
  "basePath": "/",
  "tags": [
    {
      "name": "Active Directory RSA Public Key",
      "description": "Ads Public Key Controller"
    },
    {
      "name": "Active Directory Sync",
      "description": "Sync Controller"
    },
    {
      "name": "Backups",
      "description": "Backup Controller"
    },
    {
      "name": "Billing tags",
      "description": "Billing Tag Controller"
    },
    {
      "name": "Context profiles",
      "description": "Context Profile Controller"
    },
    {
      "name": "Custom services",
      "description": "Custom Service Controller"
    },
    {
      "name": "Default services",
      "description": "Service Controller"
    },
    {
      "name": "Deployments",
      "description": "Deployment Controller"
    },
    {
      "name": "Edge Clusters",
      "description": "Edge Cluster Controller"
    },
    {
      "name": "Firewall rules E-W",
      "description": "DFW Rule Controller"
    },
    {
      "name": "Firewall rules S-N",
      "description": "GFW Rule Controller"
    },
    {
      "name": "Gateway policies",
      "description": "Gateway Policy Controller"
    },
    {
      "name": "Groups",
      "description": "Groups Controller"
    },
    {
      "name": "IP Collections",
      "description": "Ip Collection Controller"
    },
    {
      "name": "KMS Key management",
      "description": "Key Controller"
    },
    {
      "name": "KMS Key rotation scheduler",
      "description": "Key Schedule Controller"
    },
    {
      "name": "Log categories",
      "description": "Log Controller"
    },
    {
      "name": "Logical ports",
      "description": "Logical Port Controller"
    },
    {
      "name": "MCS Secret",
      "description": "Mcs Secret Controller"
    },
    {
      "name": "Network profiles",
      "description": "Network Profile Controller"
    },
    {
      "name": "Networks",
      "description": "Vcs Network Controller"
    },
    {
      "name": "Principals",
      "description": "Principal Controller"
    },
    {
      "name": "Requests",
      "description": "Request Controller"
    },
    {
      "name": "Resource pools",
      "description": "Resource Pool Controller"
    },
    {
      "name": "Routers",
      "description": "Router Controller"
    },
    {
      "name": "Security groups",
      "description": "Security Group Controller"
    },
    {
      "name": "Security policies",
      "description": "Security Policy Controller"
    },
    {
      "name": "Snapshots",
      "description": "Snapshot Controller"
    },
    {
      "name": "Subtenant custom groups",
      "description": "Subtenant Group Member Controller"
    },
    {
      "name": "Subtenants",
      "description": "Subtenant Controller"
    },
    {
      "name": "System tags",
      "description": "System Tag Controller"
    },
    {
      "name": "Users",
      "description": "Users Controller"
    },
    {
      "name": "Virtual machine overall reports",
      "description": "Virtual Machine Performance Report Controller"
    },
    {
      "name": "Virtual machine performance reports",
      "description": "Virtual Machine Overall Report Controller"
    },
    {
      "name": "Virtual machines",
      "description": "Vcs Virtual Machine Controller"
    },
    {
      "name": "Virtual machines (NSX)",
      "description": "Virtual Machine Controller"
    },
    {
      "name": "Virtual networks",
      "description": "Virtual Network Controller"
    },
    {
      "name": "vIDM",
      "description": "VIDM Controller"
    }
  ],
  "paths": {
    "/ads/cer": {
      "post": {
        "tags": [
          "Active Directory RSA Public Key"
        ],
        "summary": "Get public key",
        "description": "Get public key",
        "operationId": "getPublicKeyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "getPublicKeyRequest",
            "description": "getPublicKeyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPublicKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity has been imported",
            "schema": {
              "$ref": "#/definitions/GetPublicKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/ads/sync": {
      "post": {
        "tags": [
          "Active Directory Sync"
        ],
        "summary": "Sync",
        "description": "Sync",
        "operationId": "syncUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createSyncRequest",
            "description": "createSyncRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSyncRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SyncMessageResponse"
            }
          },
          "201": {
            "description": "Entity has been imported",
            "schema": {
              "$ref": "#/definitions/SyncMessageResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/backups/plans": {
      "get": {
        "tags": [
          "Backups"
        ],
        "summary": "List backup plans",
        "description": "List backup plans",
        "operationId": "backupPlanListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "backupPlanName",
            "in": "query",
            "description": "backupPlanName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupPlanListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/backups/plans/{backupPlanId}": {
      "get": {
        "tags": [
          "Backups"
        ],
        "summary": "Get backup plan",
        "description": "Get backup plan",
        "operationId": "backupPlanGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "backupPlanId",
            "in": "path",
            "description": "backupPlanId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupPlanGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/backups/plans/{backupPlanId}/lists": {
      "get": {
        "tags": [
          "Backups"
        ],
        "summary": "List backup lists",
        "description": "List backup lists",
        "operationId": "backupListListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "backupListName",
            "in": "query",
            "description": "backupListName",
            "required": false,
            "type": "string"
          },
          {
            "name": "backupPlanId",
            "in": "path",
            "description": "backupPlanId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupListListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          }
        }
      }
    },
    "/backups/plans/{backupPlanId}/lists/{backupListId}": {
      "get": {
        "tags": [
          "Backups"
        ],
        "summary": "Get backup list get",
        "description": "Get backup list",
        "operationId": "backupListGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "backupListId",
            "in": "path",
            "description": "backupListId",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupPlanId",
            "in": "path",
            "description": "backupPlanId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupListGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages."
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/billing/virtual-machine/performance": {
      "get": {
        "tags": [
          "Virtual machine overall reports"
        ],
        "summary": "List",
        "description": "Get virtual machine performance report",
        "operationId": "virtualMachinePerformanceReportListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualMachinePerformanceReportGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/billing/virtual-machine/summary": {
      "get": {
        "tags": [
          "Virtual machine performance reports"
        ],
        "summary": "List",
        "description": "Get virtual machine overall report",
        "operationId": "virtualMachineOverallReportGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualMachineSummaryReportGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "List",
        "description": "List deployments from server",
        "operationId": "deploymentListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeploymentListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/deployments/{deploymentId}": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "Get",
        "description": "Get deployment object",
        "operationId": "deploymentGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "description": "deploymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeploymentGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List",
        "description": "List users from vra/core",
        "operationId": "groupListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/groups/{groupId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get",
        "description": "Get user",
        "operationId": "groupGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/identity/principals/{principalId}": {
      "get": {
        "tags": [
          "Principals"
        ],
        "summary": "Get",
        "description": "Get principal",
        "operationId": "principalGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "principalId",
            "in": "path",
            "description": "principalId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrincipalGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/ipcs": {
      "get": {
        "tags": [
          "IP Collections"
        ],
        "summary": "List",
        "description": "List ip collection",
        "operationId": "ipCollectionListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "IP Collections"
        ],
        "summary": "Create",
        "description": "Create Ip collection",
        "operationId": "ipCollectionCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ipCollection",
            "description": "ipCollection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IpCollection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/IpCollectionCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/ipcs/{ipCollectionId}": {
      "get": {
        "tags": [
          "IP Collections"
        ],
        "summary": "Get",
        "description": "Get ip collection",
        "operationId": "ipCollectionGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ipCollectionId",
            "in": "path",
            "description": "ipCollectionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "IP Collections"
        ],
        "summary": "Update",
        "description": "Update ip collection",
        "operationId": "ipCollectionUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ipCollection",
            "description": "ipCollection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IpCollection"
            }
          },
          {
            "name": "ipCollectionId",
            "in": "path",
            "description": "ipCollectionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IP Collections"
        ],
        "summary": "Delete",
        "description": "Delete ip collection",
        "operationId": "ipCollectionDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ipCollectionId",
            "in": "path",
            "description": "ipCollectionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpCollectionDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key": {
      "get": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "List",
        "description": "List KMS keys",
        "operationId": "keyListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Create",
        "description": "Create key (KMS)",
        "operationId": "keyCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "keyInstance",
            "description": "keyInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateKmsKeyResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/import": {
      "post": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Import",
        "description": "Import key (KMS)",
        "operationId": "keyImportUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "keyImport",
            "description": "keyImport",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyImport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImportKmsKeyResponse"
            }
          },
          "201": {
            "description": "Entity has been imported",
            "schema": {
              "$ref": "#/definitions/ImportKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/{id}": {
      "get": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Get",
        "description": "Get KMS key",
        "operationId": "keyGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "delete": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Delete",
        "description": "Delete key (KMS)",
        "operationId": "keyDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/{id}/export": {
      "post": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Export",
        "description": "Export key (KMS)",
        "operationId": "keyExportUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "keyExport",
            "description": "keyExport",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyExport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Key has been exported successfully.",
            "schema": {
              "$ref": "#/definitions/ExportKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/{id}/revoke": {
      "post": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "Revoke",
        "description": "Revoke key (KMS)",
        "operationId": "keyRevokeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "keyRevocation",
            "description": "keyRevocation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyRevocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Key has been revoked.",
            "schema": {
              "$ref": "#/definitions/RevokeKmsKeyResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/key/{id}/versions": {
      "post": {
        "tags": [
          "KMS Key management"
        ],
        "summary": "New version",
        "description": "Create new key version (KMS)",
        "operationId": "keyNewVersionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "keyNewVersion",
            "description": "keyNewVersion",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KeyNewVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateNewKmsKeyVersionResponse"
            }
          },
          "201": {
            "description": "New key version has been created.",
            "schema": {
              "$ref": "#/definitions/CreateNewKmsKeyVersionResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/schedule": {
      "put": {
        "tags": [
          "KMS Key rotation scheduler"
        ],
        "summary": "Create",
        "description": "Create key rotation schedule (KMS)",
        "operationId": "keyRotationScheduleCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "keyRotationSchedule",
            "description": "keyRotationSchedule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyRotationSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateKeyRotationScheduleResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateKeyRotationScheduleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/kms/schedule/{keyId}": {
      "get": {
        "tags": [
          "KMS Key rotation scheduler"
        ],
        "summary": "Get",
        "description": "Get key rotation schedule (KMS)",
        "operationId": "keyRotationScheduleGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "keyId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyRotationScheduleGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "KMS Key rotation scheduler"
        ],
        "summary": "Update",
        "description": "Update key rotation schedule (KMS)",
        "operationId": "keyRotationScheduleUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "keyId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "keyRotationSchedule",
            "description": "keyRotationSchedule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyRotationSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateKeyRotationScheduleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KMS Key rotation scheduler"
        ],
        "summary": "Delete",
        "description": "Delete key rotation schedule (KMS)",
        "operationId": "keyRotationScheduleDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "keyId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteKeyRotationScheduleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/log/categories": {
      "get": {
        "tags": [
          "Log categories"
        ],
        "summary": "List",
        "description": "List log categories",
        "operationId": "logCategoriesListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "logCategoryName",
            "in": "query",
            "description": "logCategoryName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogCategoryListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/log/categories/{logCategoryId}": {
      "get": {
        "tags": [
          "Log categories"
        ],
        "summary": "Get",
        "description": "Get log category",
        "operationId": "logCategoryGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogCategoryGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Log categories"
        ],
        "summary": "Update",
        "description": "Update log category",
        "operationId": "logCategoryUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "logCategory",
            "description": "logCategory",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogCategory"
            }
          },
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/UpdateLogCategoryResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/log/categories/{logCategoryId}/generate": {
      "post": {
        "tags": [
          "Log categories"
        ],
        "summary": "Get logs",
        "description": "Get logs",
        "operationId": "getLogsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataSize",
            "in": "query",
            "description": "dataSize",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastIndex",
            "in": "query",
            "description": "lastIndex",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "logCategoryId",
            "in": "path",
            "description": "logCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "queryFilter",
            "description": "queryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/GetLogsResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/mcs/secret": {
      "get": {
        "tags": [
          "MCS Secret"
        ],
        "summary": "Get MCS secret",
        "description": "Get MCS secret",
        "operationId": "mcsGetSecretUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/McsSecretGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/mcs/secret/generate": {
      "post": {
        "tags": [
          "MCS Secret"
        ],
        "summary": "Generate MCS secret",
        "description": "Generate MCS Secret",
        "operationId": "mcsGenerateSecretUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "mcsSecret",
            "description": "mcsSecret",
            "required": true,
            "schema": {
              "$ref": "#/definitions/McsSecret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/McsSecretGenerateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/context-profiles": {
      "get": {
        "tags": [
          "Context profiles"
        ],
        "summary": "List",
        "description": "List context profiles from NSX-T",
        "operationId": "contextProfileListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContextProfileListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/custom-services": {
      "get": {
        "tags": [
          "Custom services"
        ],
        "summary": "List",
        "description": "List custom services from NSX-T",
        "operationId": "customServiceListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomServiceListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Custom services"
        ],
        "summary": "Create",
        "description": "Create custom service in NSX-T",
        "operationId": "customServiceCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "customServiceInstance",
            "description": "customServiceInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomServiceInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateCustomServiceResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateCustomServiceResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/custom-services/{serviceId}": {
      "get": {
        "tags": [
          "Custom services"
        ],
        "summary": "Get",
        "description": "Get custom service from NSX-T",
        "operationId": "customServiceGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomServiceGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Custom services"
        ],
        "summary": "Update",
        "description": "Update custom service from NSX-T",
        "operationId": "customServiceUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "customServiceInstance",
            "description": "customServiceInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomServiceInstance"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateCustomServiceResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateCustomServiceResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Custom services"
        ],
        "summary": "Delete",
        "description": "Delete custom service from NSX-T",
        "operationId": "customServiceDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteCustomServiceResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteCustomServiceResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/default-services": {
      "get": {
        "tags": [
          "Default services"
        ],
        "summary": "List",
        "description": "List default services from NSX-T",
        "operationId": "serviceListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/default-services/{serviceId}": {
      "get": {
        "tags": [
          "Default services"
        ],
        "summary": "Get",
        "description": "Get default service from NSX-T",
        "operationId": "serviceGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/network/edge-clusters": {
      "get": {
        "tags": [
          "Edge Clusters"
        ],
        "summary": "List",
        "description": "List edge clusters from NSX-T",
        "operationId": "logicalPortListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EdgeClusterListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/edge-clusters/{edgeClusterId}": {
      "get": {
        "tags": [
          "Edge Clusters"
        ],
        "summary": "Get",
        "description": "Get edge cluster from NSX-T",
        "operationId": "edgeClusterGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "edgeClusterId",
            "in": "path",
            "description": "edgeClusterId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EdgeClusterGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/network/firewall/gateway-policies": {
      "get": {
        "tags": [
          "Gateway policies"
        ],
        "summary": "List",
        "description": "List gateway policies from NSX-T",
        "operationId": "gatewayPolicyListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GatewayPolicyListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/firewall/gateway-policies/{gatewayPolicyId}": {
      "get": {
        "tags": [
          "Gateway policies"
        ],
        "summary": "Get",
        "description": "Get gateway policies from NSX-T",
        "operationId": "gatewayPolicyGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayPolicyId",
            "in": "path",
            "description": "gatewayPolicyId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GatewayPolicyGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/network/firewall/security-policies": {
      "get": {
        "tags": [
          "Security policies"
        ],
        "summary": "List",
        "description": "List security policies from NSX-T",
        "operationId": "securityPolicyListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityPolicyListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/firewall/security-policies/{SecurityPolicyId}": {
      "get": {
        "tags": [
          "Security policies"
        ],
        "summary": "Get",
        "description": "Get security policy from NSX-T",
        "operationId": "securityPolicyGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SecurityPolicyId",
            "in": "path",
            "description": "SecurityPolicyId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityPolicyGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/network/logical-ports": {
      "get": {
        "tags": [
          "Logical ports"
        ],
        "summary": "List",
        "description": "List logical ports from NSX-T",
        "operationId": "logicalPortListUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogicalPortListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/logical-ports/{logicalPortId}": {
      "get": {
        "tags": [
          "Logical ports"
        ],
        "summary": "Get",
        "description": "Get logical port from NSX-T",
        "operationId": "logicalPortGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "logicalPortId",
            "in": "path",
            "description": "logicalPortId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogicalPortGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/network/routers": {
      "get": {
        "tags": [
          "Routers"
        ],
        "summary": "List",
        "description": "List routers T0/T1 from NSX-T",
        "operationId": "routerListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouterListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Routers"
        ],
        "summary": "Create",
        "description": "Create router T1 in NSX-T",
        "operationId": "routerCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "routerInstance",
            "description": "routerInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateRouterResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateRouterResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}": {
      "get": {
        "tags": [
          "Routers"
        ],
        "summary": "Get",
        "description": "Get router from NSX-T",
        "operationId": "routerGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouterGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Routers"
        ],
        "summary": "Update",
        "description": "Update router T1 from NSX-T",
        "operationId": "routerUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "routerInstance",
            "description": "routerInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateRouterResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateRouterResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Routers"
        ],
        "summary": "Delete",
        "description": "Delete router T1 from NSX-T",
        "operationId": "routerDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteRouterResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteRouterResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}/rules/e-w": {
      "get": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "List",
        "description": "List firewall rules (east-west) from NSX-T",
        "operationId": "dfwRuleListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DFWRuleListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "Create",
        "description": "Create firewall rule (east-west) in NSX-T",
        "operationId": "dfwRuleCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "dfwRule",
            "description": "dfwRule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DFWRule"
            }
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateDFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateDFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}/rules/e-w/{ruleId}": {
      "get": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "Get",
        "description": "Get firewall rule (east-west) from NSX-T",
        "operationId": "dfwRuleGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DFWRuleGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "Update",
        "description": "Update firewall rule (east-west) in NSX-T",
        "operationId": "dfwRuleUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "dfwRule",
            "description": "dfwRule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DFWRule"
            }
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateDFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateDFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Firewall rules E-W"
        ],
        "summary": "Delete",
        "description": "Delete firewall rule (east-west) from NSX-T",
        "operationId": "dfwRuleDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteDFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteDFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}/rules/s-n": {
      "get": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "List",
        "description": "List firewall rules (south-north) from NSX-T",
        "operationId": "gfwRuleListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GFWRuleListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "Create",
        "description": "Create firewall rule (south-north) in NSX-T",
        "operationId": "gfwRuleCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "gfwRule",
            "description": "gfwRule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GFWRule"
            }
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateGFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateGFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/routers/{routerId}/rules/s-n/{ruleId}": {
      "get": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "Get",
        "description": "Get firewall rule (south-north) from NSX-T",
        "operationId": "gfwRuleGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GFWRuleGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "Update",
        "description": "Create firewall rule (south-north) in NSX-T",
        "operationId": "gfwRuleUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "gfwRule",
            "description": "gfwRule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GFWRule"
            }
          },
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateGFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateGFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Firewall rules S-N"
        ],
        "summary": "Delete",
        "description": "Delete firewall rule (south-north) from NSX-T",
        "operationId": "gfwRuleDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "routerId",
            "in": "path",
            "description": "routerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteGFWRuleResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteGFWRuleResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/security-groups": {
      "get": {
        "tags": [
          "Security groups"
        ],
        "summary": "List",
        "description": "List security groups from NSX-T",
        "operationId": "securityGroupListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityGroupListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Security groups"
        ],
        "summary": "Create",
        "description": "Create security group in NSX-T",
        "operationId": "securityGroupCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "securityGroup",
            "description": "securityGroup",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateSecurityGroupResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateSecurityGroupResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/security-groups/{groupId}": {
      "get": {
        "tags": [
          "Security groups"
        ],
        "summary": "Get",
        "description": "Get security group from NSX-T",
        "operationId": "securityGroupGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityGroupGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Security groups"
        ],
        "summary": "Update",
        "description": "Update security group from NSX-T",
        "operationId": "securityGroupUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "securityGroup",
            "description": "securityGroup",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateSecurityGroupResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateSecurityGroupResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Security groups"
        ],
        "summary": "Delete",
        "description": "Delete security group from NSX-T",
        "operationId": "securityGroupDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteSecurityGroupResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/DeleteSecurityGroupResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/virtual-machines": {
      "get": {
        "tags": [
          "Virtual machines (NSX)"
        ],
        "summary": "List virtual machines",
        "description": "List virtual machines from NSX-T level",
        "operationId": "virtualMachineListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualMachineListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/network/virtual-machines/{virtualMachineId}": {
      "get": {
        "tags": [
          "Virtual machines (NSX)"
        ],
        "summary": "Get",
        "description": "Get virtual machine from NSX-T",
        "operationId": "virtualMachineGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualMachineGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/networks": {
      "get": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "List",
        "description": "List virtual network",
        "operationId": "virtualNetworkListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "Create",
        "description": "Create virtual network",
        "operationId": "virtualNetworkCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "virtualNetworkInstance",
            "description": "virtualNetworkInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetworkInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/networks/{virtualNetworkId}": {
      "get": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "Get",
        "description": "Get virtual network",
        "operationId": "virtualNetworkGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualNetworkId",
            "in": "path",
            "description": "virtualNetworkId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "Update",
        "description": "Update virtual network",
        "operationId": "virtualNetworkUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualNetworkId",
            "in": "path",
            "description": "virtualNetworkId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "virtualNetworkInstance",
            "description": "virtualNetworkInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetworkInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkUpdateResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Virtual networks"
        ],
        "summary": "Delete",
        "description": "Delete virtual network",
        "operationId": "virtualNetworkDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualNetworkId",
            "in": "path",
            "description": "virtualNetworkId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkDeleteResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/request/": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "List",
        "description": "List IaaS requests.",
        "operationId": "requestListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "active",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestInstanceListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/request/{requestId}": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Get",
        "description": "Get IaaS requests.",
        "operationId": "requestGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "requestId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestInstanceGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/subtenants": {
      "get": {
        "tags": [
          "Subtenants"
        ],
        "summary": "List",
        "description": "List subtenants",
        "operationId": "subtenantListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubtenantListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subtenants"
        ],
        "summary": "Create",
        "description": "Create subtenant (business group)",
        "operationId": "subtenantCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "subtenantInstance",
            "description": "subtenantInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubtenantInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubtenantCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/SubtenantCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/subtenants/{subtenantId}": {
      "get": {
        "tags": [
          "Subtenants"
        ],
        "summary": "Get",
        "description": "Get subtenant from NSX-T",
        "operationId": "subtenantGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubtenantGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Subtenants"
        ],
        "summary": "Update",
        "description": "Update subtenant",
        "operationId": "subtenantUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "subtenantInstance",
            "description": "subtenantInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubtenantInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubtenantUpdateResponse"
            }
          },
          "201": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/SubtenantUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subtenants"
        ],
        "summary": "Delete",
        "description": "Delete subtenant",
        "operationId": "subtenantDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubtenantDeleteResponse"
            }
          },
          "201": {
            "description": "Entity has been deleted",
            "schema": {
              "$ref": "#/definitions/SubtenantDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/subtenants/{subtenantId}/groups": {
      "get": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "List",
        "description": "List custom groups for subtenant",
        "operationId": "subtenantGroupListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/subtenants/{subtenantId}/groups/{groupId}": {
      "get": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "Get",
        "description": "Get custom groups for subtenant",
        "operationId": "subtenantGroupGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "Update",
        "description": "Update custom group membership in vRealize Automation",
        "operationId": "subtenantGroupUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "groupInstance",
            "description": "groupInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupInstance"
            }
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Entity has been updated",
            "schema": {
              "$ref": "#/definitions/UpdateGroupResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/subtenants/{subtenantId}/groups/{parentGroupId}/members/groups": {
      "get": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "List",
        "description": "List groups IAAS API group members",
        "operationId": "groupMemberListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentGroupId",
            "in": "path",
            "description": "parentGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "Create",
        "description": "Add group member of custom group in vRealize Automation",
        "operationId": "groupMemberCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "groupInstance",
            "description": "groupInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupInstance"
            }
          },
          {
            "name": "parentGroupId",
            "in": "path",
            "description": "parentGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateGroupMemberResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateGroupMemberResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/subtenants/{subtenantId}/groups/{parentGroupId}/members/groups/{groupId}": {
      "get": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "Get",
        "description": "Get group IAAS API group member",
        "operationId": "groupMemberGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentGroupId",
            "in": "path",
            "description": "parentGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "Delete",
        "description": "Delete group member of custom group from vRealize Automation",
        "operationId": "groupMemberDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentGroupId",
            "in": "path",
            "description": "parentGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteGroupMemberResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/subtenants/{subtenantId}/groups/{parentGroupId}/members/users": {
      "get": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "List",
        "description": "List user IAAS API group members",
        "operationId": "userMemberListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentGroupId",
            "in": "path",
            "description": "parentGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "Create",
        "description": "Add user member of custom group in vRealize Automation",
        "operationId": "userMemberCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "parentGroupId",
            "in": "path",
            "description": "parentGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "userInstance",
            "description": "userInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateUserMemberResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateUserMemberResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/subtenants/{subtenantId}/groups/{parentGroupId}/members/users/{userId}": {
      "get": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "Get",
        "description": "Get user IAAS API group member",
        "operationId": "userMemberGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "parentGroupId",
            "in": "path",
            "description": "parentGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Subtenant custom groups"
        ],
        "summary": "Delete",
        "description": "Delete user member of custom group from vRealize Automation",
        "operationId": "userMemberDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "parentGroupId",
            "in": "path",
            "description": "parentGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtenantId",
            "in": "path",
            "description": "subtenantId",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteUserMemberResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/tags/billingTags": {
      "get": {
        "tags": [
          "Billing tags"
        ],
        "summary": "List",
        "description": "List billing tags",
        "operationId": "billingTagListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagValue",
            "in": "query",
            "description": "tagValue",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BillingTagListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Billing tags"
        ],
        "summary": "Create",
        "description": "Create billing tag",
        "operationId": "billingTagCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "billingTag",
            "description": "billingTag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BillingTag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BillingTagCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/BillingTagCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/tags/billingTags/{billingTagId}": {
      "get": {
        "tags": [
          "Billing tags"
        ],
        "summary": "Get",
        "description": "Get billing tag collection",
        "operationId": "billingTagGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "billingTagId",
            "in": "path",
            "description": "billingTagId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BillingTagGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Billing tags"
        ],
        "summary": "Update",
        "description": "Update billing tag",
        "operationId": "billingTagUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "billingTag",
            "description": "billingTag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BillingTag"
            }
          },
          {
            "name": "billingTagId",
            "in": "path",
            "description": "billingTagId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BillingTagUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Billing tags"
        ],
        "summary": "Delete",
        "description": "Delete billing tag",
        "operationId": "billingTagDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "billingTagId",
            "in": "path",
            "description": "billingTagId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BillingTagDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/tags/systemTags": {
      "get": {
        "tags": [
          "System tags"
        ],
        "summary": "List",
        "description": "List system tags",
        "operationId": "systemTagListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagValue",
            "in": "query",
            "description": "tagValue",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemTagListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "System tags"
        ],
        "summary": "Create",
        "description": "Create system tag",
        "operationId": "systemTagCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "systemTag",
            "description": "systemTag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemTag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemTagCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/SystemTagCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/tags/systemTags/{systemTagId}": {
      "get": {
        "tags": [
          "System tags"
        ],
        "summary": "Get",
        "description": "Get System tag collection",
        "operationId": "systemTagGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemTagId",
            "in": "path",
            "description": "systemTagId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemTagGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "System tags"
        ],
        "summary": "Update",
        "description": "Update system tag",
        "operationId": "systemTagUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "systemTag",
            "description": "systemTag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemTag"
            }
          },
          {
            "name": "systemTagId",
            "in": "path",
            "description": "systemTagId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemTagUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "System tags"
        ],
        "summary": "Delete",
        "description": "Delete system tag",
        "operationId": "systemTagDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemTagId",
            "in": "path",
            "description": "systemTagId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemTagDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List",
        "description": "List users from vra/core",
        "operationId": "userListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "description": "userName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get",
        "description": "Get user",
        "operationId": "userGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/vcs/networks": {
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "List",
        "description": "List vSphere vCenter networks",
        "operationId": "vcsVirtualMachineListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NetworkListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/networks/{networkId}": {
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "Get",
        "description": "Get vSphere vCenter networks",
        "operationId": "vcsVirtualMachineGroupGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkId",
            "in": "path",
            "description": "networkId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NetworkGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/vcs/resourcepools": {
      "get": {
        "tags": [
          "Resource pools"
        ],
        "summary": "List",
        "description": "List resource pools",
        "operationId": "vcsResourcePoolsListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourcePoolName",
            "in": "query",
            "description": "resourcePoolName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VcsResourcePoolsListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/resourcepools/{resourcePoolId}": {
      "get": {
        "tags": [
          "Resource pools"
        ],
        "summary": "Get",
        "description": "Get resource pools",
        "operationId": "vcsResourcePoolsGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourcePoolId",
            "in": "path",
            "description": "resourcePoolId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VcsResourcePoolsGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/vcs/snapshots": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "List",
        "description": "List vSphere vCenter virtual machines snapshots",
        "operationId": "snapshotListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SnapshotListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/snapshots/{snapshotId}": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Get",
        "description": "Get vSphere vCenter virtual machine snapshot",
        "operationId": "snapshotGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SnapshotGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    },
    "/vcs/virtual-machines": {
      "get": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "List",
        "description": "List vSphere vCenter virtual machines",
        "operationId": "vcsVirtualMachineListUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Create",
        "description": "Create vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "virtualMachine",
            "description": "virtualMachine",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineCreateResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineCreateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}": {
      "get": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Get",
        "description": "Get vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineGroupGetUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      },
      "put": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Update",
        "description": "Update vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineUpdateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "virtualMachine",
            "description": "virtualMachine",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineInstance"
            }
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Delete",
        "description": "Delete vSphere vCenter virtual machine",
        "operationId": "vcsVirtualMachineDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/VcsVirtualMachineDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}/snapshots": {
      "get": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "List snapshots",
        "description": "List virtual machine snapshot(s)",
        "operationId": "vcsVirtualMachineSnapshotListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/SnapshotListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Create snapshot",
        "description": "Create virtual machine snapshot",
        "operationId": "vcsVirtualMachineSnapshotCreateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ramSnapshot",
            "in": "query",
            "description": "ramSnapshot",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "snapshotInstance",
            "description": "snapshotInstance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnapshotInstance"
            }
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateSnapshotResponse"
            }
          },
          "201": {
            "description": "Entity has been created",
            "schema": {
              "$ref": "#/definitions/CreateSnapshotResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}/snapshots/{snapshotId}": {
      "get": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Get snapshot",
        "description": "Get virtual machine snapshot",
        "operationId": "vcsVirtualMachineSnapshotGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/SnapshotGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Delete snapshot",
        "description": "Delete virtual machine snapshot",
        "operationId": "vcsVirtualMachineSnapshotDeleteUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/DeleteSnapshotResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vcs/virtual-machines/{virtualMachineId}/snapshots/{snapshotId}/revert": {
      "post": {
        "tags": [
          "Virtual machines"
        ],
        "summary": "Revert to snapshot",
        "description": "Revert to virtual machine snapshot",
        "operationId": "vcsVirtualMachineSnapshotRevertUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "name": "virtualMachineId",
            "in": "path",
            "description": "virtualMachineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been completed successfully",
            "schema": {
              "$ref": "#/definitions/RevertSnapshotResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vidm/token": {
      "post": {
        "tags": [
          "vIDM"
        ],
        "summary": "Get",
        "description": "Generate authorization token",
        "operationId": "getTokenUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "vidmTokenRequest",
            "description": "vidmTokenRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VIDMTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VIDMTokenResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vra/networkprofiles": {
      "get": {
        "tags": [
          "Network profiles"
        ],
        "summary": "List",
        "description": "List network profile",
        "operationId": "networkProfileListUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "displayName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NetworkProfileListResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          }
        }
      }
    },
    "/vra/networkprofiles/{networkProfileId}": {
      "get": {
        "tags": [
          "Network profiles"
        ],
        "summary": "Get",
        "description": "Get network profile",
        "operationId": "networkProfileGetUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "networkProfileId",
            "in": "path",
            "description": "networkProfileId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NetworkProfileGetResponse"
            }
          },
          "400": {
            "description": "Bad request, error occurred. For more details see log messages.",
            "schema": {
              "$ref": "#/definitions/ProxyResponseMessage"
            }
          },
          "404": {
            "description": "Entity not found."
          }
        }
      }
    }
  },
  "definitions": {
    "AttributeInstance": {
      "type": "object",
      "properties": {
        "attributeId": {
          "type": "integer",
          "format": "int32"
        },
        "attributeKey": {
          "type": "string"
        },
        "attributeValueList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeValueInstance"
          }
        },
        "dataType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isALGType": {
          "type": "boolean"
        },
        "subAttributeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubAttributeInstance"
          }
        }
      },
      "title": "AttributeInstance"
    },
    "AttributeValueInstance": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "valueId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "AttributeValueInstance"
    },
    "BackupList": {
      "type": "object",
      "properties": {
        "backupListCode": {
          "type": "string"
        },
        "backupListId": {
          "type": "string"
        },
        "backupListName": {
          "type": "string"
        }
      },
      "title": "BackupList"
    },
    "BackupListGetResponse": {
      "type": "object",
      "properties": {
        "backupList": {
          "$ref": "#/definitions/BackupList"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BackupListGetResponse"
    },
    "BackupListListResponse": {
      "type": "object",
      "properties": {
        "backupListCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackupList"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BackupListListResponse"
    },
    "BackupPlan": {
      "type": "object",
      "properties": {
        "backupPlanId": {
          "type": "string"
        },
        "backupPlanName": {
          "type": "string"
        }
      },
      "title": "BackupPlan"
    },
    "BackupPlanGetResponse": {
      "type": "object",
      "properties": {
        "backupPlan": {
          "$ref": "#/definitions/BackupPlan"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BackupPlanGetResponse"
    },
    "BackupPlanListResponse": {
      "type": "object",
      "properties": {
        "backupPlanCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackupPlan"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BackupPlanListResponse"
    },
    "BillingTag": {
      "type": "object",
      "properties": {
        "billingTagId": {
          "type": "integer",
          "format": "int32"
        },
        "tagValue": {
          "type": "string"
        }
      },
      "title": "BillingTag"
    },
    "BillingTagCreateResponse": {
      "type": "object",
      "properties": {
        "billingTag": {
          "$ref": "#/definitions/BillingTag"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BillingTagCreateResponse"
    },
    "BillingTagDeleteResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BillingTagDeleteResponse"
    },
    "BillingTagGetResponse": {
      "type": "object",
      "properties": {
        "billingTag": {
          "$ref": "#/definitions/BillingTag"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BillingTagGetResponse"
    },
    "BillingTagListResponse": {
      "type": "object",
      "properties": {
        "billingTagCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BillingTag"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BillingTagListResponse"
    },
    "BillingTagUpdateResponse": {
      "type": "object",
      "properties": {
        "billingTag": {
          "$ref": "#/definitions/BillingTag"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "BillingTagUpdateResponse"
    },
    "ContextProfileInstance": {
      "type": "object",
      "properties": {
        "attributeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeInstance"
          }
        },
        "contextProfileId": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "protection": {
          "type": "string"
        },
        "resourceType": {
          "$ref": "#/definitions/ResourceType"
        }
      },
      "title": "ContextProfileInstance"
    },
    "ContextProfileListResponse": {
      "type": "object",
      "properties": {
        "contextProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContextProfileInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ContextProfileListResponse"
    },
    "CreateCustomServiceResponse": {
      "type": "object",
      "properties": {
        "customServiceId": {
          "type": "string"
        },
        "customServiceInstance": {
          "$ref": "#/definitions/CustomServiceInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateCustomServiceResponse"
    },
    "CreateDFWRuleResponse": {
      "type": "object",
      "properties": {
        "dfwRule": {
          "$ref": "#/definitions/DFWRule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateDFWRuleResponse"
    },
    "CreateGFWRuleResponse": {
      "type": "object",
      "properties": {
        "gfwRule": {
          "$ref": "#/definitions/GFWRule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateGFWRuleResponse"
    },
    "CreateGroupMemberResponse": {
      "type": "object",
      "properties": {
        "groupInstance": {
          "$ref": "#/definitions/GroupInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateGroupMemberResponse"
    },
    "CreateKeyRotationScheduleResponse": {
      "type": "object",
      "properties": {
        "keyRotationSchedule": {
          "$ref": "#/definitions/KeyRotationSchedule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateKeyRotationScheduleResponse"
    },
    "CreateKmsKeyResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateKmsKeyResponse"
    },
    "CreateNewKmsKeyVersionResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateNewKmsKeyVersionResponse"
    },
    "CreateRouterResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "routerId": {
          "type": "string"
        },
        "routerInstance": {
          "$ref": "#/definitions/RouterInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateRouterResponse"
    },
    "CreateSecurityGroupResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "securityGroup": {
          "$ref": "#/definitions/SecurityGroup"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateSecurityGroupResponse"
    },
    "CreateSnapshotResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "snapshotInstance": {
          "$ref": "#/definitions/SnapshotInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CreateSnapshotResponse"
    },
    "CreateSyncRequest": {
      "type": "object",
      "properties": {
        "encodedContent": {
          "type": "string"
        }
      },
      "title": "CreateSyncRequest"
    },
    "CreateUserMemberResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "userInstance": {
          "$ref": "#/definitions/UserInstance"
        }
      },
      "title": "CreateUserMemberResponse"
    },
    "CustomServiceGetResponse": {
      "type": "object",
      "properties": {
        "customServiceInstance": {
          "$ref": "#/definitions/CustomServiceInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CustomServiceGetResponse"
    },
    "CustomServiceInstance": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "l4PortSetEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/L4PortSetEntry"
          }
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagInstance"
          }
        }
      },
      "title": "CustomServiceInstance"
    },
    "CustomServiceListResponse": {
      "type": "object",
      "properties": {
        "customServiceInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomServiceInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "CustomServiceListResponse"
    },
    "DFWRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "ALLOW",
            "DROP",
            "REJECT"
          ]
        },
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "customServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomServiceInstance"
          }
        },
        "defaultServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          }
        },
        "destination": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        },
        "direction": {
          "type": "string",
          "enum": [
            "IN",
            "IN_OUT",
            "OUT"
          ]
        },
        "disabled": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "ipProtocol": {
          "type": "string",
          "enum": [
            "IPV4",
            "IPV4_IPV6",
            "IPV6"
          ]
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "ruleId": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        },
        "source": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        }
      },
      "title": "DFWRule"
    },
    "DFWRuleGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "ruleInstance": {
          "$ref": "#/definitions/DFWRule"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DFWRuleGetResponse"
    },
    "DFWRuleListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "ruleInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DFWRule"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DFWRuleListResponse"
    },
    "DeleteCustomServiceResponse": {
      "type": "object",
      "properties": {
        "customServiceInstance": {
          "$ref": "#/definitions/CustomServiceInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "status": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteCustomServiceResponse"
    },
    "DeleteDFWRuleResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteDFWRuleResponse"
    },
    "DeleteGFWRuleResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteGFWRuleResponse"
    },
    "DeleteGroupMemberResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteGroupMemberResponse"
    },
    "DeleteKeyRotationScheduleResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteKeyRotationScheduleResponse"
    },
    "DeleteKmsKeyResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteKmsKeyResponse"
    },
    "DeleteRouterResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "routerInstance": {
          "$ref": "#/definitions/RouterInstance"
        },
        "status": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteRouterResponse"
    },
    "DeleteSecurityGroupResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteSecurityGroupResponse"
    },
    "DeleteSnapshotResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteSnapshotResponse"
    },
    "DeleteUserMemberResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeleteUserMemberResponse"
    },
    "DeploymentGetResponse": {
      "type": "object",
      "properties": {
        "deploymentInstance": {
          "$ref": "#/definitions/DeploymentInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeploymentGetResponse"
    },
    "DeploymentInstance": {
      "type": "object",
      "properties": {
        "deploymentId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      },
      "title": "DeploymentInstance"
    },
    "DeploymentListResponse": {
      "type": "object",
      "properties": {
        "deploymentInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "DeploymentListResponse"
    },
    "EdgeClusterGetResponse": {
      "type": "object",
      "properties": {
        "edgeClusterInstance": {
          "$ref": "#/definitions/EdgeClusterInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "EdgeClusterGetResponse"
    },
    "EdgeClusterInstance": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "edgeClusterId": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "title": "EdgeClusterInstance"
    },
    "EdgeClusterListResponse": {
      "type": "object",
      "properties": {
        "edgeClusterCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeClusterInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "EdgeClusterListResponse"
    },
    "ElkResponse": {
      "type": "object",
      "properties": {
        "hits": {
          "$ref": "#/definitions/Hits"
        },
        "timed_out": {
          "type": "boolean"
        }
      },
      "title": "ElkResponse"
    },
    "EncryptionInstance": {
      "type": "object",
      "properties": {
        "encrypt": {
          "type": "boolean"
        },
        "encryptionKeyId": {
          "type": "string"
        },
        "encryptionProviderId": {
          "type": "string"
        },
        "managed": {
          "type": "boolean"
        },
        "recryptOperation": {
          "type": "string",
          "enum": [
            "DEEP",
            "NONE",
            "SHALLOW"
          ]
        }
      },
      "title": "EncryptionInstance"
    },
    "ExportKmsKeyResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ExportKmsKeyResponse"
    },
    "GFWRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "ALLOW",
            "DROP",
            "REJECT"
          ]
        },
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "customServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomServiceInstance"
          }
        },
        "defaultServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          }
        },
        "destination": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        },
        "direction": {
          "type": "string",
          "enum": [
            "IN",
            "IN_OUT",
            "OUT"
          ]
        },
        "disabled": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "ipProtocol": {
          "type": "string",
          "enum": [
            "IPV4",
            "IPV4_IPV6",
            "IPV6"
          ]
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "ruleId": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterInstance"
          }
        },
        "source": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        }
      },
      "title": "GFWRule"
    },
    "GFWRuleGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "ruleInstance": {
          "$ref": "#/definitions/GFWRule"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GFWRuleGetResponse"
    },
    "GFWRuleListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "ruleInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GFWRule"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GFWRuleListResponse"
    },
    "GatewayPolicy": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "gatewayPolicyId": {
          "type": "string"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        }
      },
      "title": "GatewayPolicy"
    },
    "GatewayPolicyGetResponse": {
      "type": "object",
      "properties": {
        "gatewayPolicy": {
          "$ref": "#/definitions/GatewayPolicy"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GatewayPolicyGetResponse"
    },
    "GatewayPolicyListResponse": {
      "type": "object",
      "properties": {
        "gatewayPolicyCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GatewayPolicy"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GatewayPolicyListResponse"
    },
    "GetLogsResponse": {
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/ElkResponse"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GetLogsResponse"
    },
    "GetPublicKeyRequest": {
      "type": "object",
      "properties": {
        "sha256CheckSum": {
          "type": "string"
        }
      },
      "title": "GetPublicKeyRequest"
    },
    "GetPublicKeyResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "rsaPublicKey": {
          "$ref": "#/definitions/RSAPublicKey"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GetPublicKeyResponse"
    },
    "GroupGetResponse": {
      "type": "object",
      "properties": {
        "groupInstance": {
          "$ref": "#/definitions/GroupInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GroupGetResponse"
    },
    "GroupInstance": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "fqdn": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "groupInstanceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupInstance"
          }
        },
        "groupType": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "SSO"
          ]
        },
        "name": {
          "type": "string"
        },
        "netbios": {
          "type": "string"
        },
        "principalId": {
          "$ref": "#/definitions/PrincipalId"
        },
        "principalName": {
          "type": "string"
        },
        "userInstanceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInstance"
          }
        }
      },
      "title": "GroupInstance"
    },
    "GroupListResponse": {
      "type": "object",
      "properties": {
        "groupInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "GroupListResponse"
    },
    "Hit": {
      "type": "object",
      "properties": {
        "_source": {
          "$ref": "#/definitions/Source"
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "title": "Hit"
    },
    "Hits": {
      "type": "object",
      "properties": {
        "hits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hit"
          }
        },
        "total": {
          "$ref": "#/definitions/Total"
        }
      },
      "title": "Hits"
    },
    "ImportKmsKeyResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ImportKmsKeyResponse"
    },
    "IpCollection": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ipCollectionAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "memberType": {
          "type": "string",
          "enum": [
            "IPCOLLECTION",
            "IPSET",
            "LOGICAL_PORT",
            "VIRTUAL_MACHINE"
          ]
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        }
      },
      "title": "IpCollection"
    },
    "IpCollectionCreateResponse": {
      "type": "object",
      "properties": {
        "ipCollection": {
          "$ref": "#/definitions/IpCollection"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionCreateResponse"
    },
    "IpCollectionDeleteResponse": {
      "type": "object",
      "properties": {
        "ipCollection": {
          "$ref": "#/definitions/IpCollection"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionDeleteResponse"
    },
    "IpCollectionListResponse": {
      "type": "object",
      "properties": {
        "ipCollectionSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpCollection"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionListResponse"
    },
    "IpCollectionResponse": {
      "type": "object",
      "properties": {
        "ipCollection": {
          "$ref": "#/definitions/IpCollection"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionResponse"
    },
    "IpCollectionUpdateResponse": {
      "type": "object",
      "properties": {
        "ipCollection": {
          "$ref": "#/definitions/IpCollection"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "IpCollectionUpdateResponse"
    },
    "IsoInstance": {
      "type": "object",
      "properties": {
        "connected": {
          "type": "boolean"
        },
        "connectedAtPowerOn": {
          "type": "boolean"
        },
        "isoFileName": {
          "type": "string"
        }
      },
      "title": "IsoInstance"
    },
    "KeyExport": {
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "enum": [
            "pkcs1",
            "pkcs8"
          ]
        },
        "wrapPublicKey": {
          "type": "string"
        }
      },
      "title": "KeyExport"
    },
    "KeyGetResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "KeyGetResponse"
    },
    "KeyImport": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "keyName": {
          "type": "string"
        },
        "keyUsageList": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CERTIFICATE_SIGN",
              "CONTENT_COMMITMENT",
              "CRL_SIGN",
              "DECRYPT",
              "DERIVE_KEY",
              "ENCRYPT",
              "EXPORT_KEY",
              "FPE_DECRYPT",
              "FPE_ENCRYPT",
              "GENERATE_CRYPTOGRAM",
              "GENERATE_MAC",
              "KEY_AGREEMENT",
              "SIGN",
              "TRANSLATE_DECRYPT",
              "TRANSLATE_ENCRYPT",
              "TRANSLATE_UNWRAP",
              "TRANSLATE_WRAP",
              "UNWRAP_KEY",
              "VALIDATE_CRYPTOGRAM",
              "VERIFY",
              "VERIFY_MAC",
              "WRAP_KEY"
            ]
          }
        },
        "material": {
          "type": "string"
        },
        "privateKeyIdToUnwrap": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "KeyImport"
    },
    "KeyInstance": {
      "type": "object",
      "properties": {
        "activationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "algorithm": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "defaultIV": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "keyUsageList": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CERTIFICATE_SIGN",
              "CONTENT_COMMITMENT",
              "CRL_SIGN",
              "DECRYPT",
              "DERIVE_KEY",
              "ENCRYPT",
              "EXPORT_KEY",
              "FPE_DECRYPT",
              "FPE_ENCRYPT",
              "GENERATE_CRYPTOGRAM",
              "GENERATE_MAC",
              "KEY_AGREEMENT",
              "SIGN",
              "TRANSLATE_DECRYPT",
              "TRANSLATE_ENCRYPT",
              "TRANSLATE_UNWRAP",
              "TRANSLATE_WRAP",
              "UNWRAP_KEY",
              "VALIDATE_CRYPTOGRAM",
              "VERIFY",
              "VERIFY_MAC",
              "WRAP_KEY"
            ]
          }
        },
        "material": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "objectType": {
          "type": "string"
        },
        "revocationReason": {
          "type": "string",
          "enum": [
            "AffiliationChanged",
            "CACompromise",
            "CessationOfOperation",
            "KeyCompromise",
            "PrivilegeWithdrawn",
            "Superseded",
            "Unspecified"
          ]
        },
        "sha1Fingerprint": {
          "type": "string"
        },
        "sha256Fingerprint": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "KeyInstance"
    },
    "KeyListResponse": {
      "type": "object",
      "properties": {
        "keyInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyInstance"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "KeyListResponse"
    },
    "KeyNewVersion": {
      "type": "object",
      "properties": {
        "material": {
          "type": "string"
        },
        "privateKeyIdToUnwrap": {
          "type": "string"
        }
      },
      "title": "KeyNewVersion"
    },
    "KeyRevocation": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "enum": [
            "AffiliationChanged",
            "CACompromise",
            "CessationOfOperation",
            "KeyCompromise",
            "PrivilegeWithdrawn",
            "Superseded",
            "Unspecified"
          ]
        }
      },
      "title": "KeyRevocation"
    },
    "KeyRotationSchedule": {
      "type": "object",
      "properties": {
        "cycle": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "entryId": {
          "type": "integer",
          "format": "int32"
        },
        "intervalHours": {
          "type": "integer",
          "format": "int32"
        },
        "keyId": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "staticDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "KeyRotationSchedule"
    },
    "KeyRotationScheduleGetResponse": {
      "type": "object",
      "properties": {
        "keyRotationSchedule": {
          "$ref": "#/definitions/KeyRotationSchedule"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "KeyRotationScheduleGetResponse"
    },
    "L4PortSetEntry": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "destinationPorts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string"
        },
        "l4PortSetEntryId": {
          "type": "string"
        },
        "l4Protocol": {
          "type": "string",
          "enum": [
            "TCP",
            "UDP"
          ]
        },
        "parentPath": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "relativePath": {
          "type": "string"
        },
        "resourceType": {
          "$ref": "#/definitions/ResourceType"
        },
        "sourcePorts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "L4PortSetEntry"
    },
    "LicSettings": {
      "type": "object",
      "properties": {
        "byolEnabled": {
          "type": "boolean"
        },
        "osType": {
          "type": "string",
          "enum": [
            "LINUX",
            "WINDOWS"
          ]
        },
        "useDedicatedHosts": {
          "type": "boolean"
        }
      },
      "title": "LicSettings"
    },
    "LogCategory": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "logCategoryDescription": {
          "type": "string"
        },
        "logCategoryId": {
          "type": "integer",
          "format": "int32"
        },
        "logCategoryName": {
          "type": "string"
        },
        "retentionDays": {
          "type": "integer",
          "format": "int32"
        },
        "searchCode": {
          "type": "string"
        }
      },
      "title": "LogCategory"
    },
    "LogCategoryGetResponse": {
      "type": "object",
      "properties": {
        "logCategory": {
          "$ref": "#/definitions/LogCategory"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "LogCategoryGetResponse"
    },
    "LogCategoryListResponse": {
      "type": "object",
      "properties": {
        "logCategoryCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogCategory"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "LogCategoryListResponse"
    },
    "LogicalPort": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "LogicalPort"
    },
    "LogicalPortGetResponse": {
      "type": "object",
      "properties": {
        "logicalPort": {
          "$ref": "#/definitions/LogicalPort"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "LogicalPortGetResponse"
    },
    "LogicalPortListResponse": {
      "type": "object",
      "properties": {
        "logicalPortCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogicalPort"
          }
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "LogicalPortListResponse"
    },
    "McsSecret": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string"
        }
      },
      "title": "McsSecret"
    },
    "McsSecretGenerateResponse": {
      "type": "object",
      "properties": {
        "mcsSecret": {
          "$ref": "#/definitions/McsSecret"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "McsSecretGenerateResponse"
    },
    "McsSecretGetResponse": {
      "type": "object",
      "properties": {
        "mcsSecret": {
          "$ref": "#/definitions/McsSecret"
        },
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "McsSecretGetResponse"
    },
    "NetworkGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsNetworkInstance": {
          "$ref": "#/definitions/VCSNetworkInstance"
        }
      },
      "title": "NetworkGetResponse"
    },
    "NetworkListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsNetworkInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VCSNetworkInstance"
          }
        }
      },
      "title": "NetworkListResponse"
    },
    "NetworkProfileGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "networkProfile": {
          "$ref": "#/definitions/NetworkProfileInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "NetworkProfileGetResponse"
    },
    "NetworkProfileInstance": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "definedRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StaticIPv4Range"
          }
        },
        "description": {
          "type": "string"
        },
        "dnsSearchSuffix": {
          "type": "string"
        },
        "dnsSuffix": {
          "type": "string"
        },
        "gatewayAddress": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isHidden": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "lastModifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "networkProfileId": {
          "type": "string"
        },
        "primaryDnsAddress": {
          "type": "string"
        },
        "primaryWinsAddress": {
          "type": "string"
        },
        "profileType": {
          "type": "string",
          "enum": [
            "EXTERNAL",
            "NAT",
            "PRIVATE",
            "ROUTED"
          ]
        },
        "secondaryDnsAddress": {
          "type": "string"
        },
        "secondaryWinsAddress": {
          "type": "string"
        },
        "subnetMask": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      },
      "title": "NetworkProfileInstance"
    },
    "NetworkProfileListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "networkProfileList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkProfileInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "NetworkProfileListResponse"
    },
    "Position": {
      "type": "object",
      "properties": {
        "reviseOperation": {
          "type": "string",
          "enum": [
            "AFTER",
            "BEFORE",
            "BOTTOM",
            "TOP"
          ]
        },
        "ruleId": {
          "type": "string"
        }
      },
      "title": "Position"
    },
    "PrincipalGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "principalId": {
          "$ref": "#/definitions/PrincipalId"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "PrincipalGetResponse"
    },
    "PrincipalId": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "principalType": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "CUSTOM_GROUP",
            "GROUP",
            "SSO_GROUP",
            "USER"
          ]
        }
      },
      "title": "PrincipalId"
    },
    "ProxyResponseMessage": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ProxyResponseMessage"
    },
    "QueryFilter": {
      "type": "object",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "id": {
          "type": "string"
        },
        "logSeverity": {
          "type": "string",
          "enum": [
            "ALERT",
            "CRITICAL",
            "DEBUG",
            "DEFAULT",
            "EMERGENCY",
            "ERROR",
            "FATAL",
            "INFO",
            "NOTICE",
            "WARN",
            "WARNING"
          ]
        },
        "queryString": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "userName": {
          "type": "string"
        }
      },
      "title": "QueryFilter"
    },
    "RSAPublicKey": {
      "type": "object",
      "properties": {
        "base64": {
          "type": "string"
        }
      },
      "title": "RSAPublicKey"
    },
    "RequestInstance": {
      "type": "object",
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lastErrorMessage": {
          "type": "string"
        },
        "requestBody": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        },
        "requestMessageList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestMessage"
          }
        },
        "requestPhase": {
          "type": "string",
          "enum": [
            "CANCELLED",
            "FINISHED",
            "NEW",
            "PROCESSING",
            "QUEUEING",
            "TIMEOUT"
          ]
        },
        "requestStatus": {
          "type": "string",
          "enum": [
            "FAILED",
            "SUCCESS"
          ]
        },
        "requestType": {
          "type": "string",
          "enum": [
            "ADS_SYNC",
            "BILLING_ALARM_DEFINITION_CREATE",
            "BILLING_ALARM_DEFINITION_DELETE",
            "BILLING_ALARM_DEFINITION_UPDATE",
            "BILLING_TAG_CREATE",
            "BILLING_TAG_DELETE",
            "BILLING_TAG_UPDATE",
            "CATALOG_ENTITLEMENT_CREATE",
            "CATALOG_ENTITLEMENT_DELETE",
            "CATALOG_ENTITLEMENT_UPDATE",
            "CUSTOM_SERVICE_CREATE",
            "CUSTOM_SERVICE_DELETE",
            "CUSTOM_SERVICE_MODIFY",
            "FIREWALL_DFW_RULE_CREATE",
            "FIREWALL_DFW_RULE_DELETE",
            "FIREWALL_DFW_RULE_UPDATE",
            "FIREWALL_GFW_RULE_CREATE",
            "FIREWALL_GFW_RULE_DELETE",
            "FIREWALL_GFW_RULE_UPDATE",
            "GROUP_CREATE",
            "GROUP_DELETE",
            "GROUP_MEMBER_CREATE",
            "GROUP_MEMBER_DELETE",
            "GROUP_UPDATE",
            "IPCOLLECTION_CREATE",
            "IPCOLLECTION_DELETE",
            "IPCOLLECTION_UPDATE",
            "KMS_KEY_CREATE",
            "KMS_KEY_DELETE",
            "KMS_KEY_EXPORT",
            "KMS_KEY_IMPORT",
            "KMS_KEY_NEW_VERSION",
            "KMS_KEY_REVOKE",
            "KMS_KEY_ROTATION_SCHEDULE_CREATE",
            "KMS_KEY_ROTATION_SCHEDULE_DELETE",
            "KMS_KEY_ROTATION_SCHEDULE_UPDATE",
            "NETWORK_CREATE",
            "NETWORK_DELETE",
            "NETWORK_UPDATE",
            "ROUTER_CREATE",
            "ROUTER_DELETE",
            "ROUTER_UPDATE",
            "SECURITY_GROUP_CREATE",
            "SECURITY_GROUP_DELETE",
            "SECURITY_GROUP_UPDATE",
            "SEGMENT_CREATE",
            "SEGMENT_DELETE",
            "SEGMENT_UPDATE",
            "SNAPSHOT_CREATE",
            "SNAPSHOT_DELETE",
            "SNAPSHOT_REVERT",
            "SUBTENANT_CREATE",
            "SUBTENANT_DELETE",
            "SUBTENANT_UPDATE",
            "SYSTEM_TAG_CREATE",
            "SYSTEM_TAG_DELETE",
            "SYSTEM_TAG_UPDATE",
            "UPDATE_LOG_CATEGORY",
            "VIRTUAL_MACHINE_CREATE",
            "VIRTUAL_MACHINE_DELETE",
            "VIRTUAL_MACHINE_UPDATE"
          ]
        },
        "requestor": {
          "type": "string"
        },
        "requestorId": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RequestInstance"
    },
    "RequestInstanceGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RequestInstanceGetResponse"
    },
    "RequestInstanceListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstanceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RequestInstanceListResponse"
    },
    "RequestMessage": {
      "type": "object",
      "properties": {
        "messageDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "messageValue": {
          "type": "string"
        }
      },
      "title": "RequestMessage"
    },
    "ResourceType": {
      "type": "object",
      "properties": {
        "resourceTypeId": {
          "type": "integer",
          "format": "int32"
        },
        "resourceTypeName": {
          "type": "string"
        }
      },
      "title": "ResourceType"
    },
    "RevertSnapshotResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RevertSnapshotResponse"
    },
    "RevokeKmsKeyResponse": {
      "type": "object",
      "properties": {
        "keyInstance": {
          "$ref": "#/definitions/KeyInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RevokeKmsKeyResponse"
    },
    "RouterGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "routerInstance": {
          "$ref": "#/definitions/RouterInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RouterGetResponse"
    },
    "RouterInstance": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "parentT0Id": {
          "type": "string"
        },
        "routerId": {
          "type": "string"
        },
        "routerType": {
          "type": "string",
          "enum": [
            "TIER0",
            "TIER1"
          ]
        }
      },
      "title": "RouterInstance"
    },
    "RouterListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "routerCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "RouterListResponse"
    },
    "SecurityGroup": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroupMember"
          }
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        }
      },
      "title": "SecurityGroup"
    },
    "SecurityGroupGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "securityGroup": {
          "$ref": "#/definitions/SecurityGroup"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SecurityGroupGetResponse"
    },
    "SecurityGroupListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "securityGroupCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityGroup"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SecurityGroupListResponse"
    },
    "SecurityGroupMember": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "memberType": {
          "type": "string",
          "enum": [
            "IPCOLLECTION",
            "IPSET",
            "LOGICAL_PORT",
            "VIRTUAL_MACHINE"
          ]
        }
      },
      "title": "SecurityGroupMember"
    },
    "SecurityPolicy": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "securityPolicyId": {
          "type": "string"
        }
      },
      "title": "SecurityPolicy"
    },
    "SecurityPolicyGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "securityPolicy": {
          "$ref": "#/definitions/SecurityPolicy"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SecurityPolicyGetResponse"
    },
    "SecurityPolicyListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "securityPolicyCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityPolicy"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SecurityPolicyListResponse"
    },
    "SegmentSubnetInstance": {
      "type": "object",
      "properties": {
        "dhcpRanges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gatewayAddressCIDR": {
          "type": "string"
        },
        "networkCIDR": {
          "type": "string"
        },
        "segmentSubnetId": {
          "type": "string"
        }
      },
      "title": "SegmentSubnetInstance"
    },
    "ServiceGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "serviceInstance": {
          "$ref": "#/definitions/ServiceInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ServiceGetResponse"
    },
    "ServiceInstance": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        }
      },
      "title": "ServiceInstance"
    },
    "ServiceListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "serviceInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "ServiceListResponse"
    },
    "SnapshotGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "snapshotInstance": {
          "$ref": "#/definitions/SnapshotInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SnapshotGetResponse"
    },
    "SnapshotInstance": {
      "type": "object",
      "properties": {
        "childSnapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SnapshotInstance"
          }
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "powerState": {
          "type": "string",
          "enum": [
            "poweredOff",
            "poweredOn",
            "suspended"
          ]
        },
        "quiesced": {
          "type": "boolean"
        },
        "snapshotDescription": {
          "type": "string"
        },
        "snapshotId": {
          "type": "string"
        },
        "snapshotName": {
          "type": "string"
        },
        "virtualMachineId": {
          "type": "string"
        }
      },
      "title": "SnapshotInstance"
    },
    "SnapshotListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "snapshotInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SnapshotInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SnapshotListResponse"
    },
    "Source": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "jsonPayload": {
          "type": "object"
        },
        "receiveTimestamp": {
          "type": "object"
        },
        "resource": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "user": {
          "type": "string"
        }
      },
      "title": "Source"
    },
    "StaticIPv4Address": {
      "type": "object",
      "properties": {
        "IPSortValue": {
          "type": "integer",
          "format": "int64"
        },
        "IPv4Address": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "description": {
          "type": "string"
        },
        "externalReferenceId": {
          "type": "string"
        },
        "externalReferenceName": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "networkInterfaceCardOffset": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "ALLOCATED",
            "DESTROYED",
            "EXPIRED",
            "UNALLOCATED"
          ]
        },
        "stateValue": {
          "type": "integer",
          "format": "int32"
        },
        "staticIPv4AddressId": {
          "type": "string"
        },
        "virtualMachineId": {
          "type": "string"
        },
        "virtualMachineName": {
          "type": "string"
        }
      },
      "title": "StaticIPv4Address"
    },
    "StaticIPv4Range": {
      "type": "object",
      "properties": {
        "beginIPv4Address": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "definedAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StaticIPv4Address"
          }
        },
        "description": {
          "type": "string"
        },
        "endIPv4Address": {
          "type": "string"
        },
        "externalExternalId": {
          "type": "string"
        },
        "gateway": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "ALLOCATED",
            "DESTROYED",
            "EXPIRED",
            "UNALLOCATED"
          ]
        },
        "staticIPv4RangeId": {
          "type": "string"
        }
      },
      "title": "StaticIPv4Range"
    },
    "SubAttributeInstance": {
      "type": "object",
      "properties": {
        "attributeKey": {
          "type": "string"
        },
        "dataType": {
          "type": "string"
        },
        "subAttributeId": {
          "type": "integer",
          "format": "int32"
        },
        "subAttributeValueList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubAttributeValueInstance"
          }
        }
      },
      "title": "SubAttributeInstance"
    },
    "SubAttributeValueInstance": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "valueId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "SubAttributeValueInstance"
    },
    "SubtenantCreateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "subtenantInstance": {
          "$ref": "#/definitions/SubtenantInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SubtenantCreateResponse"
    },
    "SubtenantDeleteResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SubtenantDeleteResponse"
    },
    "SubtenantGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "subtenantInstance": {
          "$ref": "#/definitions/SubtenantInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SubtenantGetResponse"
    },
    "SubtenantInstance": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "memoryReservedSizeMB": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VCSNetworkInstance"
          }
        },
        "storageReservedSizeGB": {
          "type": "integer",
          "format": "int64"
        },
        "subtenantId": {
          "type": "string"
        }
      },
      "title": "SubtenantInstance"
    },
    "SubtenantListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "subtenantInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubtenantInstance"
          }
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SubtenantListResponse"
    },
    "SubtenantUpdateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "subtenantInstance": {
          "$ref": "#/definitions/SubtenantInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SubtenantUpdateResponse"
    },
    "SyncMessageResponse": {
      "type": "object",
      "properties": {
        "messageId": {
          "type": "string"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SyncMessageResponse"
    },
    "SystemTag": {
      "type": "object",
      "properties": {
        "systemTagId": {
          "type": "integer",
          "format": "int32"
        },
        "tagValue": {
          "type": "string"
        }
      },
      "title": "SystemTag"
    },
    "SystemTagCreateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "systemTag": {
          "$ref": "#/definitions/SystemTag"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SystemTagCreateResponse"
    },
    "SystemTagDeleteResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SystemTagDeleteResponse"
    },
    "SystemTagGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "systemTag": {
          "$ref": "#/definitions/SystemTag"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SystemTagGetResponse"
    },
    "SystemTagListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "systemTagCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SystemTag"
          }
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SystemTagListResponse"
    },
    "SystemTagUpdateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "systemTag": {
          "$ref": "#/definitions/SystemTag"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "SystemTagUpdateResponse"
    },
    "TagInstance": {
      "type": "object",
      "properties": {
        "scope": {
          "type": "string"
        },
        "tagId": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "TagInstance"
    },
    "Total": {
      "type": "object",
      "properties": {
        "lastIndex": {
          "type": "integer",
          "format": "int64"
        },
        "relation": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Total"
    },
    "UpdateCustomServiceResponse": {
      "type": "object",
      "properties": {
        "customServiceInstance": {
          "$ref": "#/definitions/CustomServiceInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateCustomServiceResponse"
    },
    "UpdateDFWRuleResponse": {
      "type": "object",
      "properties": {
        "dfwRule": {
          "$ref": "#/definitions/DFWRule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateDFWRuleResponse"
    },
    "UpdateGFWRuleResponse": {
      "type": "object",
      "properties": {
        "gfwRule": {
          "$ref": "#/definitions/GFWRule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateGFWRuleResponse"
    },
    "UpdateGroupResponse": {
      "type": "object",
      "properties": {
        "groupInstance": {
          "$ref": "#/definitions/GroupInstance"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateGroupResponse"
    },
    "UpdateKeyRotationScheduleResponse": {
      "type": "object",
      "properties": {
        "keyRotationSchedule": {
          "$ref": "#/definitions/KeyRotationSchedule"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateKeyRotationScheduleResponse"
    },
    "UpdateLogCategoryResponse": {
      "type": "object",
      "properties": {
        "logCategory": {
          "$ref": "#/definitions/LogCategory"
        },
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateLogCategoryResponse"
    },
    "UpdateRouterResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "routerInstance": {
          "$ref": "#/definitions/RouterInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateRouterResponse"
    },
    "UpdateSecurityGroupResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "securityGroup": {
          "$ref": "#/definitions/SecurityGroup"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      },
      "title": "UpdateSecurityGroupResponse"
    },
    "UserGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "userInstance": {
          "$ref": "#/definitions/UserInstance"
        }
      },
      "title": "UserGetResponse"
    },
    "UserInstance": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "emailAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "principalId": {
          "$ref": "#/definitions/PrincipalId"
        },
        "userId": {
          "type": "string"
        },
        "userPrincipalName": {
          "type": "string"
        }
      },
      "title": "UserInstance"
    },
    "UserListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "userInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInstance"
          }
        }
      },
      "title": "UserListResponse"
    },
    "VCSNetworkInstance": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "networkId": {
          "type": "string"
        },
        "networkType": {
          "type": "string",
          "enum": [
            "OpaqueNetwork"
          ]
        }
      },
      "title": "VCSNetworkInstance"
    },
    "VIDMTokenRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "title": "VIDMTokenRequest"
    },
    "VIDMTokenResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "token": {
          "type": "string"
        }
      },
      "title": "VIDMTokenResponse"
    },
    "VcsResourcePools": {
      "type": "object",
      "properties": {
        "configCpuAllocationExpandableReservation": {
          "type": "boolean"
        },
        "configCpuAllocationLimit": {
          "type": "integer",
          "format": "int64"
        },
        "configCpuAllocationOverheadLimit": {
          "type": "integer",
          "format": "int64"
        },
        "configCpuAllocationReservation": {
          "type": "integer",
          "format": "int64"
        },
        "configMemoryAllocationExpandableReservation": {
          "type": "boolean"
        },
        "configMemoryAllocationLimit": {
          "type": "integer",
          "format": "int64"
        },
        "configMemoryAllocationOverheadLimit": {
          "type": "integer",
          "format": "int64"
        },
        "configMemoryAllocationReservation": {
          "type": "integer",
          "format": "int64"
        },
        "externalId": {
          "type": "string"
        },
        "resourcePoolId": {
          "type": "string"
        },
        "resourcePoolName": {
          "type": "string"
        },
        "runtimeCpuMaxUsage": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeCpuOverallUsage": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeCpuReservationUsed": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeCpuReservationUsedForVm": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeCpuUnreservedForPool": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeCpuUnreservedForVm": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeMemoryMaxUsage": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeMemoryOverallUsage": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeMemoryReservationUsed": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeMemoryReservationUsedForVm": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeMemoryUnreservedForPool": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeMemoryUnreservedForVm": {
          "type": "integer",
          "format": "int64"
        },
        "vraId": {
          "type": "string"
        }
      },
      "title": "VcsResourcePools"
    },
    "VcsResourcePoolsGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsResourcePoolInstance": {
          "$ref": "#/definitions/VcsResourcePools"
        }
      },
      "title": "VcsResourcePoolsGetResponse"
    },
    "VcsResourcePoolsListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsResourcePoolInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VcsResourcePools"
          }
        }
      },
      "title": "VcsResourcePoolsListResponse"
    },
    "VcsVirtualMachineCreateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstance": {
          "$ref": "#/definitions/VcsVirtualMachineInstance"
        }
      },
      "title": "VcsVirtualMachineCreateResponse"
    },
    "VcsVirtualMachineDeleteResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstance": {
          "$ref": "#/definitions/VcsVirtualMachineInstance"
        }
      },
      "title": "VcsVirtualMachineDeleteResponse"
    },
    "VcsVirtualMachineGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstance": {
          "$ref": "#/definitions/VcsVirtualMachineInstance"
        }
      },
      "title": "VcsVirtualMachineGetResponse"
    },
    "VcsVirtualMachineInstance": {
      "type": "object",
      "properties": {
        "additionalVirtualDiskDeviceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualDiskDevice"
          }
        },
        "backupListCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackupList"
          }
        },
        "billingTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BillingTag"
          }
        },
        "createdBy": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "deploymentInstance": {
          "$ref": "#/definitions/DeploymentInstance"
        },
        "encryptionInstance": {
          "$ref": "#/definitions/EncryptionInstance"
        },
        "initialPassword": {
          "type": "string"
        },
        "initialUserName": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "isoInstance": {
          "$ref": "#/definitions/IsoInstance"
        },
        "licSettings": {
          "$ref": "#/definitions/LicSettings"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "modifiedBy": {
          "type": "string"
        },
        "osType": {
          "type": "string",
          "enum": [
            "LINUX",
            "WINDOWS"
          ]
        },
        "osVirtualDiskDevice": {
          "$ref": "#/definitions/VirtualDiskDevice"
        },
        "ovfIpConfiguration": {
          "type": "boolean"
        },
        "powerState": {
          "type": "string",
          "enum": [
            "poweredOff",
            "poweredOn",
            "suspended"
          ]
        },
        "resourceProfile": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "SIZE_L",
            "SIZE_M",
            "SIZE_S",
            "SIZE_XL",
            "SIZE_XS"
          ]
        },
        "sshKey": {
          "type": "string"
        },
        "storagePolicy": {
          "type": "string",
          "enum": [
            "ENTERPRISE",
            "STANDARD_W1",
            "STANDARD_W2"
          ]
        },
        "subtenantRefId": {
          "type": "string"
        },
        "systemTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SystemTag"
          }
        },
        "virtualMachineId": {
          "type": "string"
        },
        "virtualMachineName": {
          "type": "string"
        },
        "virtualNetworkDevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetworkDevice"
          }
        }
      },
      "title": "VcsVirtualMachineInstance"
    },
    "VcsVirtualMachineListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VcsVirtualMachineInstance"
          }
        }
      },
      "title": "VcsVirtualMachineListResponse"
    },
    "VcsVirtualMachineUpdateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "vcsVirtualMachineInstance": {
          "$ref": "#/definitions/VcsVirtualMachineInstance"
        }
      },
      "title": "VcsVirtualMachineUpdateResponse"
    },
    "VirtualDiskDevice": {
      "type": "object",
      "properties": {
        "controllerId": {
          "type": "integer",
          "format": "int32"
        },
        "lunId": {
          "type": "integer",
          "format": "int32"
        },
        "sizeMB": {
          "type": "integer",
          "format": "int64"
        },
        "virtualDiskDeviceType": {
          "type": "string",
          "enum": [
            "SCSI"
          ]
        }
      },
      "title": "VirtualDiskDevice"
    },
    "VirtualMachine": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "hostId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "VirtualMachine"
    },
    "VirtualMachineGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualMachine": {
          "$ref": "#/definitions/VirtualMachine"
        }
      },
      "title": "VirtualMachineGetResponse"
    },
    "VirtualMachineListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualMachineCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualMachine"
          }
        }
      },
      "title": "VirtualMachineListResponse"
    },
    "VirtualMachineOverallReport": {
      "type": "object",
      "properties": {
        "allocatedStorageGB": {
          "type": "number",
          "format": "float"
        },
        "allocatedvCPU": {
          "type": "integer",
          "format": "int32"
        },
        "allocatedvRAM": {
          "type": "integer",
          "format": "int32"
        },
        "billingMonth": {
          "type": "string"
        },
        "billingTags": {
          "type": "string"
        },
        "cost": {
          "type": "number",
          "format": "float"
        },
        "discountValue": {
          "type": "number",
          "format": "float"
        },
        "resourceUsageTime": {
          "type": "string"
        },
        "storageTotalUsed": {
          "type": "number",
          "format": "float"
        },
        "totalCostAfterDiscount": {
          "type": "number",
          "format": "float"
        },
        "virtualMachineGuest": {
          "type": "string"
        },
        "virtualMachineId": {
          "type": "string"
        },
        "virtualMachineName": {
          "type": "string"
        }
      },
      "title": "VirtualMachineOverallReport"
    },
    "VirtualMachinePerformanceReport": {
      "type": "object",
      "properties": {
        "availabilityPercentage": {
          "type": "number",
          "format": "float"
        },
        "avgCpuUtilization": {
          "type": "number",
          "format": "float"
        },
        "avgRamUtilization": {
          "type": "number",
          "format": "float"
        },
        "avgStorageUtilization": {
          "type": "number",
          "format": "float"
        },
        "billingTags": {
          "type": "string"
        },
        "maxCpuUtilization": {
          "type": "number",
          "format": "float"
        },
        "maxRamUtilization": {
          "type": "number",
          "format": "float"
        },
        "maxStorageUtilization": {
          "type": "number",
          "format": "float"
        },
        "storageTotalUsed": {
          "type": "number",
          "format": "float"
        },
        "virtualMachineGuest": {
          "type": "string"
        },
        "virtualMachineId": {
          "type": "string"
        },
        "virtualMachineName": {
          "type": "string"
        }
      },
      "title": "VirtualMachinePerformanceReport"
    },
    "VirtualMachinePerformanceReportGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualMachinePerformanceReportItemArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualMachinePerformanceReport"
          }
        }
      },
      "title": "VirtualMachinePerformanceReportGetResponse"
    },
    "VirtualMachineSummaryReportGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualMachineOverallReportItemArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualMachineOverallReport"
          }
        }
      },
      "title": "VirtualMachineSummaryReportGetResponse"
    },
    "VirtualNetworkCreateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkCreateResponse"
    },
    "VirtualNetworkDeleteResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkDeleteResponse"
    },
    "VirtualNetworkDevice": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string"
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkDevice"
    },
    "VirtualNetworkGetResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkGetResponse"
    },
    "VirtualNetworkInstance": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "dnsSearchSuffix": {
          "type": "string"
        },
        "dnsSuffix": {
          "type": "string"
        },
        "gatewayAddress": {
          "type": "string"
        },
        "ipamEnabled": {
          "type": "boolean"
        },
        "primaryDnsAddress": {
          "type": "string"
        },
        "primaryWinsAddress": {
          "type": "string"
        },
        "routerRefId": {
          "type": "string"
        },
        "secondaryDnsAddress": {
          "type": "string"
        },
        "secondaryWinsAddress": {
          "type": "string"
        },
        "subnet": {
          "$ref": "#/definitions/SegmentSubnetInstance"
        },
        "subnetMask": {
          "type": "string"
        },
        "subtenantRefIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "virtualNetworkId": {
          "type": "string"
        }
      },
      "title": "VirtualNetworkInstance"
    },
    "VirtualNetworkListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstanceCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetworkInstance"
          }
        }
      },
      "title": "VirtualNetworkListResponse"
    },
    "VirtualNetworkUpdateResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        },
        "requestInstance": {
          "$ref": "#/definitions/RequestInstance"
        },
        "success": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "virtualNetworkInstance": {
          "$ref": "#/definitions/VirtualNetworkInstance"
        }
      },
      "title": "VirtualNetworkUpdateResponse"
    }
  }
}
