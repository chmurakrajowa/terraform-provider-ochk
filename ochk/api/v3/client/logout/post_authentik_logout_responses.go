// Code generated by go-swagger; DO NOT EDIT.

package logout

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PostAuthentikLogoutReader is a Reader for the PostAuthentikLogout structure.
type PostAuthentikLogoutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthentikLogoutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAuthentikLogoutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuthentikLogoutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuthentikLogoutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAuthentikLogoutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /authentik/logout] PostAuthentikLogout", response, response.Code())
	}
}

// NewPostAuthentikLogoutOK creates a PostAuthentikLogoutOK with default headers values
func NewPostAuthentikLogoutOK() *PostAuthentikLogoutOK {
	return &PostAuthentikLogoutOK{}
}

/*
PostAuthentikLogoutOK describes a response with status code 200, with default header values.

OK
*/
type PostAuthentikLogoutOK struct {
	Payload *models.APIResponse
}

// IsSuccess returns true when this post authentik logout o k response has a 2xx status code
func (o *PostAuthentikLogoutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post authentik logout o k response has a 3xx status code
func (o *PostAuthentikLogoutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authentik logout o k response has a 4xx status code
func (o *PostAuthentikLogoutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authentik logout o k response has a 5xx status code
func (o *PostAuthentikLogoutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post authentik logout o k response a status code equal to that given
func (o *PostAuthentikLogoutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post authentik logout o k response
func (o *PostAuthentikLogoutOK) Code() int {
	return 200
}

func (o *PostAuthentikLogoutOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/logout][%d] postAuthentikLogoutOK %s", 200, payload)
}

func (o *PostAuthentikLogoutOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/logout][%d] postAuthentikLogoutOK %s", 200, payload)
}

func (o *PostAuthentikLogoutOK) GetPayload() *models.APIResponse {
	return o.Payload
}

func (o *PostAuthentikLogoutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthentikLogoutBadRequest creates a PostAuthentikLogoutBadRequest with default headers values
func NewPostAuthentikLogoutBadRequest() *PostAuthentikLogoutBadRequest {
	return &PostAuthentikLogoutBadRequest{}
}

/*
PostAuthentikLogoutBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostAuthentikLogoutBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post authentik logout bad request response has a 2xx status code
func (o *PostAuthentikLogoutBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authentik logout bad request response has a 3xx status code
func (o *PostAuthentikLogoutBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authentik logout bad request response has a 4xx status code
func (o *PostAuthentikLogoutBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authentik logout bad request response has a 5xx status code
func (o *PostAuthentikLogoutBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post authentik logout bad request response a status code equal to that given
func (o *PostAuthentikLogoutBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post authentik logout bad request response
func (o *PostAuthentikLogoutBadRequest) Code() int {
	return 400
}

func (o *PostAuthentikLogoutBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/logout][%d] postAuthentikLogoutBadRequest %s", 400, payload)
}

func (o *PostAuthentikLogoutBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/logout][%d] postAuthentikLogoutBadRequest %s", 400, payload)
}

func (o *PostAuthentikLogoutBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostAuthentikLogoutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthentikLogoutUnauthorized creates a PostAuthentikLogoutUnauthorized with default headers values
func NewPostAuthentikLogoutUnauthorized() *PostAuthentikLogoutUnauthorized {
	return &PostAuthentikLogoutUnauthorized{}
}

/*
PostAuthentikLogoutUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostAuthentikLogoutUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post authentik logout unauthorized response has a 2xx status code
func (o *PostAuthentikLogoutUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authentik logout unauthorized response has a 3xx status code
func (o *PostAuthentikLogoutUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authentik logout unauthorized response has a 4xx status code
func (o *PostAuthentikLogoutUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authentik logout unauthorized response has a 5xx status code
func (o *PostAuthentikLogoutUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post authentik logout unauthorized response a status code equal to that given
func (o *PostAuthentikLogoutUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post authentik logout unauthorized response
func (o *PostAuthentikLogoutUnauthorized) Code() int {
	return 401
}

func (o *PostAuthentikLogoutUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/logout][%d] postAuthentikLogoutUnauthorized %s", 401, payload)
}

func (o *PostAuthentikLogoutUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/logout][%d] postAuthentikLogoutUnauthorized %s", 401, payload)
}

func (o *PostAuthentikLogoutUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostAuthentikLogoutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthentikLogoutForbidden creates a PostAuthentikLogoutForbidden with default headers values
func NewPostAuthentikLogoutForbidden() *PostAuthentikLogoutForbidden {
	return &PostAuthentikLogoutForbidden{}
}

/*
PostAuthentikLogoutForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostAuthentikLogoutForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post authentik logout forbidden response has a 2xx status code
func (o *PostAuthentikLogoutForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authentik logout forbidden response has a 3xx status code
func (o *PostAuthentikLogoutForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authentik logout forbidden response has a 4xx status code
func (o *PostAuthentikLogoutForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authentik logout forbidden response has a 5xx status code
func (o *PostAuthentikLogoutForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post authentik logout forbidden response a status code equal to that given
func (o *PostAuthentikLogoutForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post authentik logout forbidden response
func (o *PostAuthentikLogoutForbidden) Code() int {
	return 403
}

func (o *PostAuthentikLogoutForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/logout][%d] postAuthentikLogoutForbidden %s", 403, payload)
}

func (o *PostAuthentikLogoutForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/logout][%d] postAuthentikLogoutForbidden %s", 403, payload)
}

func (o *PostAuthentikLogoutForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostAuthentikLogoutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
