// Code generated by go-swagger; DO NOT EDIT.

package backups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new backups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new backups API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new backups API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for backups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetBackupsPlans(params *GetBackupsPlansParams, opts ...ClientOption) (*GetBackupsPlansOK, error)

	GetBackupsPlansBackupPlanID(params *GetBackupsPlansBackupPlanIDParams, opts ...ClientOption) (*GetBackupsPlansBackupPlanIDOK, error)

	GetBackupsPlansBackupPlanIDLists(params *GetBackupsPlansBackupPlanIDListsParams, opts ...ClientOption) (*GetBackupsPlansBackupPlanIDListsOK, error)

	GetBackupsPlansBackupPlanIDListsBackupListID(params *GetBackupsPlansBackupPlanIDListsBackupListIDParams, opts ...ClientOption) (*GetBackupsPlansBackupPlanIDListsBackupListIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetBackupsPlans lists backup plans

List backup plans
*/
func (a *Client) GetBackupsPlans(params *GetBackupsPlansParams, opts ...ClientOption) (*GetBackupsPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupsPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupsPlans",
		Method:             "GET",
		PathPattern:        "/backups/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackupsPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupsPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBackupsPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBackupsPlansBackupPlanID gets backup plan

Get backup plan
*/
func (a *Client) GetBackupsPlansBackupPlanID(params *GetBackupsPlansBackupPlanIDParams, opts ...ClientOption) (*GetBackupsPlansBackupPlanIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupsPlansBackupPlanIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupsPlansBackupPlanID",
		Method:             "GET",
		PathPattern:        "/backups/plans/{backupPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackupsPlansBackupPlanIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupsPlansBackupPlanIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBackupsPlansBackupPlanID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBackupsPlansBackupPlanIDLists lists backup lists

List backup lists
*/
func (a *Client) GetBackupsPlansBackupPlanIDLists(params *GetBackupsPlansBackupPlanIDListsParams, opts ...ClientOption) (*GetBackupsPlansBackupPlanIDListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupsPlansBackupPlanIDListsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupsPlansBackupPlanIDLists",
		Method:             "GET",
		PathPattern:        "/backups/plans/{backupPlanId}/lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackupsPlansBackupPlanIDListsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupsPlansBackupPlanIDListsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBackupsPlansBackupPlanIDLists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBackupsPlansBackupPlanIDListsBackupListID gets backup list get

Get backup list get
*/
func (a *Client) GetBackupsPlansBackupPlanIDListsBackupListID(params *GetBackupsPlansBackupPlanIDListsBackupListIDParams, opts ...ClientOption) (*GetBackupsPlansBackupPlanIDListsBackupListIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupsPlansBackupPlanIDListsBackupListIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupsPlansBackupPlanIDListsBackupListID",
		Method:             "GET",
		PathPattern:        "/backups/plans/{backupPlanId}/lists/{backupListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackupsPlansBackupPlanIDListsBackupListIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupsPlansBackupPlanIDListsBackupListIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBackupsPlansBackupPlanIDListsBackupListID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
