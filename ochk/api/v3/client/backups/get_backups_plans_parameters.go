// Code generated by go-swagger; DO NOT EDIT.

package backups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetBackupsPlansParams creates a new GetBackupsPlansParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBackupsPlansParams() *GetBackupsPlansParams {
	return &GetBackupsPlansParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBackupsPlansParamsWithTimeout creates a new GetBackupsPlansParams object
// with the ability to set a timeout on a request.
func NewGetBackupsPlansParamsWithTimeout(timeout time.Duration) *GetBackupsPlansParams {
	return &GetBackupsPlansParams{
		timeout: timeout,
	}
}

// NewGetBackupsPlansParamsWithContext creates a new GetBackupsPlansParams object
// with the ability to set a context for a request.
func NewGetBackupsPlansParamsWithContext(ctx context.Context) *GetBackupsPlansParams {
	return &GetBackupsPlansParams{
		Context: ctx,
	}
}

// NewGetBackupsPlansParamsWithHTTPClient creates a new GetBackupsPlansParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBackupsPlansParamsWithHTTPClient(client *http.Client) *GetBackupsPlansParams {
	return &GetBackupsPlansParams{
		HTTPClient: client,
	}
}

/*
GetBackupsPlansParams contains all the parameters to send to the API endpoint

	for the get backups plans operation.

	Typically these are written to a http.Request.
*/
type GetBackupsPlansParams struct {

	// BackupPlanName.
	BackupPlanName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get backups plans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBackupsPlansParams) WithDefaults() *GetBackupsPlansParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get backups plans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBackupsPlansParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get backups plans params
func (o *GetBackupsPlansParams) WithTimeout(timeout time.Duration) *GetBackupsPlansParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get backups plans params
func (o *GetBackupsPlansParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get backups plans params
func (o *GetBackupsPlansParams) WithContext(ctx context.Context) *GetBackupsPlansParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get backups plans params
func (o *GetBackupsPlansParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get backups plans params
func (o *GetBackupsPlansParams) WithHTTPClient(client *http.Client) *GetBackupsPlansParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get backups plans params
func (o *GetBackupsPlansParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackupPlanName adds the backupPlanName to the get backups plans params
func (o *GetBackupsPlansParams) WithBackupPlanName(backupPlanName *string) *GetBackupsPlansParams {
	o.SetBackupPlanName(backupPlanName)
	return o
}

// SetBackupPlanName adds the backupPlanName to the get backups plans params
func (o *GetBackupsPlansParams) SetBackupPlanName(backupPlanName *string) {
	o.BackupPlanName = backupPlanName
}

// WriteToRequest writes these params to a swagger request
func (o *GetBackupsPlansParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BackupPlanName != nil {

		// query param backupPlanName
		var qrBackupPlanName string

		if o.BackupPlanName != nil {
			qrBackupPlanName = *o.BackupPlanName
		}
		qBackupPlanName := qrBackupPlanName
		if qBackupPlanName != "" {

			if err := r.SetQueryParam("backupPlanName", qBackupPlanName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
