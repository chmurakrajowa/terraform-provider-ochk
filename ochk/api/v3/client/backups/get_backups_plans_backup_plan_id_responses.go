// Code generated by go-swagger; DO NOT EDIT.

package backups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetBackupsPlansBackupPlanIDReader is a Reader for the GetBackupsPlansBackupPlanID structure.
type GetBackupsPlansBackupPlanIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBackupsPlansBackupPlanIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBackupsPlansBackupPlanIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBackupsPlansBackupPlanIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetBackupsPlansBackupPlanIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBackupsPlansBackupPlanIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBackupsPlansBackupPlanIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /backups/plans/{backupPlanId}] GetBackupsPlansBackupPlanID", response, response.Code())
	}
}

// NewGetBackupsPlansBackupPlanIDOK creates a GetBackupsPlansBackupPlanIDOK with default headers values
func NewGetBackupsPlansBackupPlanIDOK() *GetBackupsPlansBackupPlanIDOK {
	return &GetBackupsPlansBackupPlanIDOK{}
}

/*
GetBackupsPlansBackupPlanIDOK describes a response with status code 200, with default header values.

OK
*/
type GetBackupsPlansBackupPlanIDOK struct {
	Payload *models.GetBackupPlanResponse
}

// IsSuccess returns true when this get backups plans backup plan Id o k response has a 2xx status code
func (o *GetBackupsPlansBackupPlanIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get backups plans backup plan Id o k response has a 3xx status code
func (o *GetBackupsPlansBackupPlanIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backups plans backup plan Id o k response has a 4xx status code
func (o *GetBackupsPlansBackupPlanIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get backups plans backup plan Id o k response has a 5xx status code
func (o *GetBackupsPlansBackupPlanIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get backups plans backup plan Id o k response a status code equal to that given
func (o *GetBackupsPlansBackupPlanIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get backups plans backup plan Id o k response
func (o *GetBackupsPlansBackupPlanIDOK) Code() int {
	return 200
}

func (o *GetBackupsPlansBackupPlanIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdOK %s", 200, payload)
}

func (o *GetBackupsPlansBackupPlanIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdOK %s", 200, payload)
}

func (o *GetBackupsPlansBackupPlanIDOK) GetPayload() *models.GetBackupPlanResponse {
	return o.Payload
}

func (o *GetBackupsPlansBackupPlanIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetBackupPlanResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBackupsPlansBackupPlanIDBadRequest creates a GetBackupsPlansBackupPlanIDBadRequest with default headers values
func NewGetBackupsPlansBackupPlanIDBadRequest() *GetBackupsPlansBackupPlanIDBadRequest {
	return &GetBackupsPlansBackupPlanIDBadRequest{}
}

/*
GetBackupsPlansBackupPlanIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetBackupsPlansBackupPlanIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get backups plans backup plan Id bad request response has a 2xx status code
func (o *GetBackupsPlansBackupPlanIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get backups plans backup plan Id bad request response has a 3xx status code
func (o *GetBackupsPlansBackupPlanIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backups plans backup plan Id bad request response has a 4xx status code
func (o *GetBackupsPlansBackupPlanIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get backups plans backup plan Id bad request response has a 5xx status code
func (o *GetBackupsPlansBackupPlanIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get backups plans backup plan Id bad request response a status code equal to that given
func (o *GetBackupsPlansBackupPlanIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get backups plans backup plan Id bad request response
func (o *GetBackupsPlansBackupPlanIDBadRequest) Code() int {
	return 400
}

func (o *GetBackupsPlansBackupPlanIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdBadRequest %s", 400, payload)
}

func (o *GetBackupsPlansBackupPlanIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdBadRequest %s", 400, payload)
}

func (o *GetBackupsPlansBackupPlanIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBackupsPlansBackupPlanIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBackupsPlansBackupPlanIDUnauthorized creates a GetBackupsPlansBackupPlanIDUnauthorized with default headers values
func NewGetBackupsPlansBackupPlanIDUnauthorized() *GetBackupsPlansBackupPlanIDUnauthorized {
	return &GetBackupsPlansBackupPlanIDUnauthorized{}
}

/*
GetBackupsPlansBackupPlanIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetBackupsPlansBackupPlanIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get backups plans backup plan Id unauthorized response has a 2xx status code
func (o *GetBackupsPlansBackupPlanIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get backups plans backup plan Id unauthorized response has a 3xx status code
func (o *GetBackupsPlansBackupPlanIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backups plans backup plan Id unauthorized response has a 4xx status code
func (o *GetBackupsPlansBackupPlanIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get backups plans backup plan Id unauthorized response has a 5xx status code
func (o *GetBackupsPlansBackupPlanIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get backups plans backup plan Id unauthorized response a status code equal to that given
func (o *GetBackupsPlansBackupPlanIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get backups plans backup plan Id unauthorized response
func (o *GetBackupsPlansBackupPlanIDUnauthorized) Code() int {
	return 401
}

func (o *GetBackupsPlansBackupPlanIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdUnauthorized %s", 401, payload)
}

func (o *GetBackupsPlansBackupPlanIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdUnauthorized %s", 401, payload)
}

func (o *GetBackupsPlansBackupPlanIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBackupsPlansBackupPlanIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBackupsPlansBackupPlanIDForbidden creates a GetBackupsPlansBackupPlanIDForbidden with default headers values
func NewGetBackupsPlansBackupPlanIDForbidden() *GetBackupsPlansBackupPlanIDForbidden {
	return &GetBackupsPlansBackupPlanIDForbidden{}
}

/*
GetBackupsPlansBackupPlanIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetBackupsPlansBackupPlanIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get backups plans backup plan Id forbidden response has a 2xx status code
func (o *GetBackupsPlansBackupPlanIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get backups plans backup plan Id forbidden response has a 3xx status code
func (o *GetBackupsPlansBackupPlanIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backups plans backup plan Id forbidden response has a 4xx status code
func (o *GetBackupsPlansBackupPlanIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get backups plans backup plan Id forbidden response has a 5xx status code
func (o *GetBackupsPlansBackupPlanIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get backups plans backup plan Id forbidden response a status code equal to that given
func (o *GetBackupsPlansBackupPlanIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get backups plans backup plan Id forbidden response
func (o *GetBackupsPlansBackupPlanIDForbidden) Code() int {
	return 403
}

func (o *GetBackupsPlansBackupPlanIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdForbidden %s", 403, payload)
}

func (o *GetBackupsPlansBackupPlanIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdForbidden %s", 403, payload)
}

func (o *GetBackupsPlansBackupPlanIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBackupsPlansBackupPlanIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBackupsPlansBackupPlanIDNotFound creates a GetBackupsPlansBackupPlanIDNotFound with default headers values
func NewGetBackupsPlansBackupPlanIDNotFound() *GetBackupsPlansBackupPlanIDNotFound {
	return &GetBackupsPlansBackupPlanIDNotFound{}
}

/*
GetBackupsPlansBackupPlanIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetBackupsPlansBackupPlanIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get backups plans backup plan Id not found response has a 2xx status code
func (o *GetBackupsPlansBackupPlanIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get backups plans backup plan Id not found response has a 3xx status code
func (o *GetBackupsPlansBackupPlanIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backups plans backup plan Id not found response has a 4xx status code
func (o *GetBackupsPlansBackupPlanIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get backups plans backup plan Id not found response has a 5xx status code
func (o *GetBackupsPlansBackupPlanIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get backups plans backup plan Id not found response a status code equal to that given
func (o *GetBackupsPlansBackupPlanIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get backups plans backup plan Id not found response
func (o *GetBackupsPlansBackupPlanIDNotFound) Code() int {
	return 404
}

func (o *GetBackupsPlansBackupPlanIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdNotFound %s", 404, payload)
}

func (o *GetBackupsPlansBackupPlanIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/plans/{backupPlanId}][%d] getBackupsPlansBackupPlanIdNotFound %s", 404, payload)
}

func (o *GetBackupsPlansBackupPlanIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBackupsPlansBackupPlanIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
