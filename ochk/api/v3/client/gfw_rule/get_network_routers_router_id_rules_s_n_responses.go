// Code generated by go-swagger; DO NOT EDIT.

package gfw_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetNetworkRoutersRouterIDRulesSNReader is a Reader for the GetNetworkRoutersRouterIDRulesSN structure.
type GetNetworkRoutersRouterIDRulesSNReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkRoutersRouterIDRulesSNReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkRoutersRouterIDRulesSNOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworkRoutersRouterIDRulesSNBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworkRoutersRouterIDRulesSNUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNetworkRoutersRouterIDRulesSNForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /network/routers/{routerId}/rules/s-n] GetNetworkRoutersRouterIDRulesSN", response, response.Code())
	}
}

// NewGetNetworkRoutersRouterIDRulesSNOK creates a GetNetworkRoutersRouterIDRulesSNOK with default headers values
func NewGetNetworkRoutersRouterIDRulesSNOK() *GetNetworkRoutersRouterIDRulesSNOK {
	return &GetNetworkRoutersRouterIDRulesSNOK{}
}

/*
GetNetworkRoutersRouterIDRulesSNOK describes a response with status code 200, with default header values.

OK
*/
type GetNetworkRoutersRouterIDRulesSNOK struct {
	Payload *models.ListGfwRulesResponse
}

// IsSuccess returns true when this get network routers router Id rules s n o k response has a 2xx status code
func (o *GetNetworkRoutersRouterIDRulesSNOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network routers router Id rules s n o k response has a 3xx status code
func (o *GetNetworkRoutersRouterIDRulesSNOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network routers router Id rules s n o k response has a 4xx status code
func (o *GetNetworkRoutersRouterIDRulesSNOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network routers router Id rules s n o k response has a 5xx status code
func (o *GetNetworkRoutersRouterIDRulesSNOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network routers router Id rules s n o k response a status code equal to that given
func (o *GetNetworkRoutersRouterIDRulesSNOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network routers router Id rules s n o k response
func (o *GetNetworkRoutersRouterIDRulesSNOK) Code() int {
	return 200
}

func (o *GetNetworkRoutersRouterIDRulesSNOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers/{routerId}/rules/s-n][%d] getNetworkRoutersRouterIdRulesSNOK %s", 200, payload)
}

func (o *GetNetworkRoutersRouterIDRulesSNOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers/{routerId}/rules/s-n][%d] getNetworkRoutersRouterIdRulesSNOK %s", 200, payload)
}

func (o *GetNetworkRoutersRouterIDRulesSNOK) GetPayload() *models.ListGfwRulesResponse {
	return o.Payload
}

func (o *GetNetworkRoutersRouterIDRulesSNOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListGfwRulesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkRoutersRouterIDRulesSNBadRequest creates a GetNetworkRoutersRouterIDRulesSNBadRequest with default headers values
func NewGetNetworkRoutersRouterIDRulesSNBadRequest() *GetNetworkRoutersRouterIDRulesSNBadRequest {
	return &GetNetworkRoutersRouterIDRulesSNBadRequest{}
}

/*
GetNetworkRoutersRouterIDRulesSNBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNetworkRoutersRouterIDRulesSNBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network routers router Id rules s n bad request response has a 2xx status code
func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network routers router Id rules s n bad request response has a 3xx status code
func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network routers router Id rules s n bad request response has a 4xx status code
func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network routers router Id rules s n bad request response has a 5xx status code
func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get network routers router Id rules s n bad request response a status code equal to that given
func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get network routers router Id rules s n bad request response
func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) Code() int {
	return 400
}

func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers/{routerId}/rules/s-n][%d] getNetworkRoutersRouterIdRulesSNBadRequest %s", 400, payload)
}

func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers/{routerId}/rules/s-n][%d] getNetworkRoutersRouterIdRulesSNBadRequest %s", 400, payload)
}

func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkRoutersRouterIDRulesSNBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkRoutersRouterIDRulesSNUnauthorized creates a GetNetworkRoutersRouterIDRulesSNUnauthorized with default headers values
func NewGetNetworkRoutersRouterIDRulesSNUnauthorized() *GetNetworkRoutersRouterIDRulesSNUnauthorized {
	return &GetNetworkRoutersRouterIDRulesSNUnauthorized{}
}

/*
GetNetworkRoutersRouterIDRulesSNUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNetworkRoutersRouterIDRulesSNUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network routers router Id rules s n unauthorized response has a 2xx status code
func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network routers router Id rules s n unauthorized response has a 3xx status code
func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network routers router Id rules s n unauthorized response has a 4xx status code
func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network routers router Id rules s n unauthorized response has a 5xx status code
func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get network routers router Id rules s n unauthorized response a status code equal to that given
func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get network routers router Id rules s n unauthorized response
func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) Code() int {
	return 401
}

func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers/{routerId}/rules/s-n][%d] getNetworkRoutersRouterIdRulesSNUnauthorized %s", 401, payload)
}

func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers/{routerId}/rules/s-n][%d] getNetworkRoutersRouterIdRulesSNUnauthorized %s", 401, payload)
}

func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkRoutersRouterIDRulesSNUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkRoutersRouterIDRulesSNForbidden creates a GetNetworkRoutersRouterIDRulesSNForbidden with default headers values
func NewGetNetworkRoutersRouterIDRulesSNForbidden() *GetNetworkRoutersRouterIDRulesSNForbidden {
	return &GetNetworkRoutersRouterIDRulesSNForbidden{}
}

/*
GetNetworkRoutersRouterIDRulesSNForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNetworkRoutersRouterIDRulesSNForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network routers router Id rules s n forbidden response has a 2xx status code
func (o *GetNetworkRoutersRouterIDRulesSNForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network routers router Id rules s n forbidden response has a 3xx status code
func (o *GetNetworkRoutersRouterIDRulesSNForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network routers router Id rules s n forbidden response has a 4xx status code
func (o *GetNetworkRoutersRouterIDRulesSNForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network routers router Id rules s n forbidden response has a 5xx status code
func (o *GetNetworkRoutersRouterIDRulesSNForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get network routers router Id rules s n forbidden response a status code equal to that given
func (o *GetNetworkRoutersRouterIDRulesSNForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get network routers router Id rules s n forbidden response
func (o *GetNetworkRoutersRouterIDRulesSNForbidden) Code() int {
	return 403
}

func (o *GetNetworkRoutersRouterIDRulesSNForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers/{routerId}/rules/s-n][%d] getNetworkRoutersRouterIdRulesSNForbidden %s", 403, payload)
}

func (o *GetNetworkRoutersRouterIDRulesSNForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers/{routerId}/rules/s-n][%d] getNetworkRoutersRouterIdRulesSNForbidden %s", 403, payload)
}

func (o *GetNetworkRoutersRouterIDRulesSNForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkRoutersRouterIDRulesSNForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
