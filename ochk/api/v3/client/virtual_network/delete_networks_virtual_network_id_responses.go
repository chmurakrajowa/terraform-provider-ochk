// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// DeleteNetworksVirtualNetworkIDReader is a Reader for the DeleteNetworksVirtualNetworkID structure.
type DeleteNetworksVirtualNetworkIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNetworksVirtualNetworkIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNetworksVirtualNetworkIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteNetworksVirtualNetworkIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteNetworksVirtualNetworkIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteNetworksVirtualNetworkIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteNetworksVirtualNetworkIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /networks/{virtualNetworkId}] DeleteNetworksVirtualNetworkID", response, response.Code())
	}
}

// NewDeleteNetworksVirtualNetworkIDOK creates a DeleteNetworksVirtualNetworkIDOK with default headers values
func NewDeleteNetworksVirtualNetworkIDOK() *DeleteNetworksVirtualNetworkIDOK {
	return &DeleteNetworksVirtualNetworkIDOK{}
}

/*
DeleteNetworksVirtualNetworkIDOK describes a response with status code 200, with default header values.

OK
*/
type DeleteNetworksVirtualNetworkIDOK struct {
	Payload *models.DeleteVirtualNetworkResponse
}

// IsSuccess returns true when this delete networks virtual network Id o k response has a 2xx status code
func (o *DeleteNetworksVirtualNetworkIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete networks virtual network Id o k response has a 3xx status code
func (o *DeleteNetworksVirtualNetworkIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete networks virtual network Id o k response has a 4xx status code
func (o *DeleteNetworksVirtualNetworkIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete networks virtual network Id o k response has a 5xx status code
func (o *DeleteNetworksVirtualNetworkIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete networks virtual network Id o k response a status code equal to that given
func (o *DeleteNetworksVirtualNetworkIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete networks virtual network Id o k response
func (o *DeleteNetworksVirtualNetworkIDOK) Code() int {
	return 200
}

func (o *DeleteNetworksVirtualNetworkIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdOK %s", 200, payload)
}

func (o *DeleteNetworksVirtualNetworkIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdOK %s", 200, payload)
}

func (o *DeleteNetworksVirtualNetworkIDOK) GetPayload() *models.DeleteVirtualNetworkResponse {
	return o.Payload
}

func (o *DeleteNetworksVirtualNetworkIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteVirtualNetworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworksVirtualNetworkIDBadRequest creates a DeleteNetworksVirtualNetworkIDBadRequest with default headers values
func NewDeleteNetworksVirtualNetworkIDBadRequest() *DeleteNetworksVirtualNetworkIDBadRequest {
	return &DeleteNetworksVirtualNetworkIDBadRequest{}
}

/*
DeleteNetworksVirtualNetworkIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteNetworksVirtualNetworkIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete networks virtual network Id bad request response has a 2xx status code
func (o *DeleteNetworksVirtualNetworkIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete networks virtual network Id bad request response has a 3xx status code
func (o *DeleteNetworksVirtualNetworkIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete networks virtual network Id bad request response has a 4xx status code
func (o *DeleteNetworksVirtualNetworkIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete networks virtual network Id bad request response has a 5xx status code
func (o *DeleteNetworksVirtualNetworkIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete networks virtual network Id bad request response a status code equal to that given
func (o *DeleteNetworksVirtualNetworkIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete networks virtual network Id bad request response
func (o *DeleteNetworksVirtualNetworkIDBadRequest) Code() int {
	return 400
}

func (o *DeleteNetworksVirtualNetworkIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdBadRequest %s", 400, payload)
}

func (o *DeleteNetworksVirtualNetworkIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdBadRequest %s", 400, payload)
}

func (o *DeleteNetworksVirtualNetworkIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworksVirtualNetworkIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworksVirtualNetworkIDUnauthorized creates a DeleteNetworksVirtualNetworkIDUnauthorized with default headers values
func NewDeleteNetworksVirtualNetworkIDUnauthorized() *DeleteNetworksVirtualNetworkIDUnauthorized {
	return &DeleteNetworksVirtualNetworkIDUnauthorized{}
}

/*
DeleteNetworksVirtualNetworkIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteNetworksVirtualNetworkIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete networks virtual network Id unauthorized response has a 2xx status code
func (o *DeleteNetworksVirtualNetworkIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete networks virtual network Id unauthorized response has a 3xx status code
func (o *DeleteNetworksVirtualNetworkIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete networks virtual network Id unauthorized response has a 4xx status code
func (o *DeleteNetworksVirtualNetworkIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete networks virtual network Id unauthorized response has a 5xx status code
func (o *DeleteNetworksVirtualNetworkIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete networks virtual network Id unauthorized response a status code equal to that given
func (o *DeleteNetworksVirtualNetworkIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete networks virtual network Id unauthorized response
func (o *DeleteNetworksVirtualNetworkIDUnauthorized) Code() int {
	return 401
}

func (o *DeleteNetworksVirtualNetworkIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdUnauthorized %s", 401, payload)
}

func (o *DeleteNetworksVirtualNetworkIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdUnauthorized %s", 401, payload)
}

func (o *DeleteNetworksVirtualNetworkIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworksVirtualNetworkIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworksVirtualNetworkIDForbidden creates a DeleteNetworksVirtualNetworkIDForbidden with default headers values
func NewDeleteNetworksVirtualNetworkIDForbidden() *DeleteNetworksVirtualNetworkIDForbidden {
	return &DeleteNetworksVirtualNetworkIDForbidden{}
}

/*
DeleteNetworksVirtualNetworkIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteNetworksVirtualNetworkIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete networks virtual network Id forbidden response has a 2xx status code
func (o *DeleteNetworksVirtualNetworkIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete networks virtual network Id forbidden response has a 3xx status code
func (o *DeleteNetworksVirtualNetworkIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete networks virtual network Id forbidden response has a 4xx status code
func (o *DeleteNetworksVirtualNetworkIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete networks virtual network Id forbidden response has a 5xx status code
func (o *DeleteNetworksVirtualNetworkIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete networks virtual network Id forbidden response a status code equal to that given
func (o *DeleteNetworksVirtualNetworkIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete networks virtual network Id forbidden response
func (o *DeleteNetworksVirtualNetworkIDForbidden) Code() int {
	return 403
}

func (o *DeleteNetworksVirtualNetworkIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdForbidden %s", 403, payload)
}

func (o *DeleteNetworksVirtualNetworkIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdForbidden %s", 403, payload)
}

func (o *DeleteNetworksVirtualNetworkIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworksVirtualNetworkIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworksVirtualNetworkIDNotFound creates a DeleteNetworksVirtualNetworkIDNotFound with default headers values
func NewDeleteNetworksVirtualNetworkIDNotFound() *DeleteNetworksVirtualNetworkIDNotFound {
	return &DeleteNetworksVirtualNetworkIDNotFound{}
}

/*
DeleteNetworksVirtualNetworkIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteNetworksVirtualNetworkIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete networks virtual network Id not found response has a 2xx status code
func (o *DeleteNetworksVirtualNetworkIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete networks virtual network Id not found response has a 3xx status code
func (o *DeleteNetworksVirtualNetworkIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete networks virtual network Id not found response has a 4xx status code
func (o *DeleteNetworksVirtualNetworkIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete networks virtual network Id not found response has a 5xx status code
func (o *DeleteNetworksVirtualNetworkIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete networks virtual network Id not found response a status code equal to that given
func (o *DeleteNetworksVirtualNetworkIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete networks virtual network Id not found response
func (o *DeleteNetworksVirtualNetworkIDNotFound) Code() int {
	return 404
}

func (o *DeleteNetworksVirtualNetworkIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdNotFound %s", 404, payload)
}

func (o *DeleteNetworksVirtualNetworkIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /networks/{virtualNetworkId}][%d] deleteNetworksVirtualNetworkIdNotFound %s", 404, payload)
}

func (o *DeleteNetworksVirtualNetworkIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworksVirtualNetworkIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
