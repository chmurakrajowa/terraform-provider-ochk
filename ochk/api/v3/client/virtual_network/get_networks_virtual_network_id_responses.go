// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetNetworksVirtualNetworkIDReader is a Reader for the GetNetworksVirtualNetworkID structure.
type GetNetworksVirtualNetworkIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworksVirtualNetworkIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworksVirtualNetworkIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworksVirtualNetworkIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworksVirtualNetworkIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNetworksVirtualNetworkIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNetworksVirtualNetworkIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /networks/{virtualNetworkId}] GetNetworksVirtualNetworkID", response, response.Code())
	}
}

// NewGetNetworksVirtualNetworkIDOK creates a GetNetworksVirtualNetworkIDOK with default headers values
func NewGetNetworksVirtualNetworkIDOK() *GetNetworksVirtualNetworkIDOK {
	return &GetNetworksVirtualNetworkIDOK{}
}

/*
GetNetworksVirtualNetworkIDOK describes a response with status code 200, with default header values.

OK
*/
type GetNetworksVirtualNetworkIDOK struct {
	Payload *models.GetVirtualNetworkResponse
}

// IsSuccess returns true when this get networks virtual network Id o k response has a 2xx status code
func (o *GetNetworksVirtualNetworkIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get networks virtual network Id o k response has a 3xx status code
func (o *GetNetworksVirtualNetworkIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get networks virtual network Id o k response has a 4xx status code
func (o *GetNetworksVirtualNetworkIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get networks virtual network Id o k response has a 5xx status code
func (o *GetNetworksVirtualNetworkIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get networks virtual network Id o k response a status code equal to that given
func (o *GetNetworksVirtualNetworkIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get networks virtual network Id o k response
func (o *GetNetworksVirtualNetworkIDOK) Code() int {
	return 200
}

func (o *GetNetworksVirtualNetworkIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdOK %s", 200, payload)
}

func (o *GetNetworksVirtualNetworkIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdOK %s", 200, payload)
}

func (o *GetNetworksVirtualNetworkIDOK) GetPayload() *models.GetVirtualNetworkResponse {
	return o.Payload
}

func (o *GetNetworksVirtualNetworkIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetVirtualNetworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworksVirtualNetworkIDBadRequest creates a GetNetworksVirtualNetworkIDBadRequest with default headers values
func NewGetNetworksVirtualNetworkIDBadRequest() *GetNetworksVirtualNetworkIDBadRequest {
	return &GetNetworksVirtualNetworkIDBadRequest{}
}

/*
GetNetworksVirtualNetworkIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNetworksVirtualNetworkIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get networks virtual network Id bad request response has a 2xx status code
func (o *GetNetworksVirtualNetworkIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get networks virtual network Id bad request response has a 3xx status code
func (o *GetNetworksVirtualNetworkIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get networks virtual network Id bad request response has a 4xx status code
func (o *GetNetworksVirtualNetworkIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get networks virtual network Id bad request response has a 5xx status code
func (o *GetNetworksVirtualNetworkIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get networks virtual network Id bad request response a status code equal to that given
func (o *GetNetworksVirtualNetworkIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get networks virtual network Id bad request response
func (o *GetNetworksVirtualNetworkIDBadRequest) Code() int {
	return 400
}

func (o *GetNetworksVirtualNetworkIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdBadRequest %s", 400, payload)
}

func (o *GetNetworksVirtualNetworkIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdBadRequest %s", 400, payload)
}

func (o *GetNetworksVirtualNetworkIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworksVirtualNetworkIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworksVirtualNetworkIDUnauthorized creates a GetNetworksVirtualNetworkIDUnauthorized with default headers values
func NewGetNetworksVirtualNetworkIDUnauthorized() *GetNetworksVirtualNetworkIDUnauthorized {
	return &GetNetworksVirtualNetworkIDUnauthorized{}
}

/*
GetNetworksVirtualNetworkIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNetworksVirtualNetworkIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get networks virtual network Id unauthorized response has a 2xx status code
func (o *GetNetworksVirtualNetworkIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get networks virtual network Id unauthorized response has a 3xx status code
func (o *GetNetworksVirtualNetworkIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get networks virtual network Id unauthorized response has a 4xx status code
func (o *GetNetworksVirtualNetworkIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get networks virtual network Id unauthorized response has a 5xx status code
func (o *GetNetworksVirtualNetworkIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get networks virtual network Id unauthorized response a status code equal to that given
func (o *GetNetworksVirtualNetworkIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get networks virtual network Id unauthorized response
func (o *GetNetworksVirtualNetworkIDUnauthorized) Code() int {
	return 401
}

func (o *GetNetworksVirtualNetworkIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdUnauthorized %s", 401, payload)
}

func (o *GetNetworksVirtualNetworkIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdUnauthorized %s", 401, payload)
}

func (o *GetNetworksVirtualNetworkIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworksVirtualNetworkIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworksVirtualNetworkIDForbidden creates a GetNetworksVirtualNetworkIDForbidden with default headers values
func NewGetNetworksVirtualNetworkIDForbidden() *GetNetworksVirtualNetworkIDForbidden {
	return &GetNetworksVirtualNetworkIDForbidden{}
}

/*
GetNetworksVirtualNetworkIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNetworksVirtualNetworkIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get networks virtual network Id forbidden response has a 2xx status code
func (o *GetNetworksVirtualNetworkIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get networks virtual network Id forbidden response has a 3xx status code
func (o *GetNetworksVirtualNetworkIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get networks virtual network Id forbidden response has a 4xx status code
func (o *GetNetworksVirtualNetworkIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get networks virtual network Id forbidden response has a 5xx status code
func (o *GetNetworksVirtualNetworkIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get networks virtual network Id forbidden response a status code equal to that given
func (o *GetNetworksVirtualNetworkIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get networks virtual network Id forbidden response
func (o *GetNetworksVirtualNetworkIDForbidden) Code() int {
	return 403
}

func (o *GetNetworksVirtualNetworkIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdForbidden %s", 403, payload)
}

func (o *GetNetworksVirtualNetworkIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdForbidden %s", 403, payload)
}

func (o *GetNetworksVirtualNetworkIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworksVirtualNetworkIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworksVirtualNetworkIDNotFound creates a GetNetworksVirtualNetworkIDNotFound with default headers values
func NewGetNetworksVirtualNetworkIDNotFound() *GetNetworksVirtualNetworkIDNotFound {
	return &GetNetworksVirtualNetworkIDNotFound{}
}

/*
GetNetworksVirtualNetworkIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetNetworksVirtualNetworkIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get networks virtual network Id not found response has a 2xx status code
func (o *GetNetworksVirtualNetworkIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get networks virtual network Id not found response has a 3xx status code
func (o *GetNetworksVirtualNetworkIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get networks virtual network Id not found response has a 4xx status code
func (o *GetNetworksVirtualNetworkIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get networks virtual network Id not found response has a 5xx status code
func (o *GetNetworksVirtualNetworkIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get networks virtual network Id not found response a status code equal to that given
func (o *GetNetworksVirtualNetworkIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get networks virtual network Id not found response
func (o *GetNetworksVirtualNetworkIDNotFound) Code() int {
	return 404
}

func (o *GetNetworksVirtualNetworkIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdNotFound %s", 404, payload)
}

func (o *GetNetworksVirtualNetworkIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/{virtualNetworkId}][%d] getNetworksVirtualNetworkIdNotFound %s", 404, payload)
}

func (o *GetNetworksVirtualNetworkIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworksVirtualNetworkIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
