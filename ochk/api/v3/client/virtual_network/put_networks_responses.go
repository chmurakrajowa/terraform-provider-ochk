// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutNetworksReader is a Reader for the PutNetworks structure.
type PutNetworksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutNetworksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutNetworksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutNetworksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutNetworksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutNetworksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutNetworksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /networks] PutNetworks", response, response.Code())
	}
}

// NewPutNetworksOK creates a PutNetworksOK with default headers values
func NewPutNetworksOK() *PutNetworksOK {
	return &PutNetworksOK{}
}

/*
PutNetworksOK describes a response with status code 200, with default header values.

OK
*/
type PutNetworksOK struct {
	Payload *models.CreateVirtualNetworkResponse
}

// IsSuccess returns true when this put networks o k response has a 2xx status code
func (o *PutNetworksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put networks o k response has a 3xx status code
func (o *PutNetworksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put networks o k response has a 4xx status code
func (o *PutNetworksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put networks o k response has a 5xx status code
func (o *PutNetworksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put networks o k response a status code equal to that given
func (o *PutNetworksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put networks o k response
func (o *PutNetworksOK) Code() int {
	return 200
}

func (o *PutNetworksOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksOK %s", 200, payload)
}

func (o *PutNetworksOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksOK %s", 200, payload)
}

func (o *PutNetworksOK) GetPayload() *models.CreateVirtualNetworkResponse {
	return o.Payload
}

func (o *PutNetworksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateVirtualNetworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworksBadRequest creates a PutNetworksBadRequest with default headers values
func NewPutNetworksBadRequest() *PutNetworksBadRequest {
	return &PutNetworksBadRequest{}
}

/*
PutNetworksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutNetworksBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put networks bad request response has a 2xx status code
func (o *PutNetworksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put networks bad request response has a 3xx status code
func (o *PutNetworksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put networks bad request response has a 4xx status code
func (o *PutNetworksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put networks bad request response has a 5xx status code
func (o *PutNetworksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put networks bad request response a status code equal to that given
func (o *PutNetworksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put networks bad request response
func (o *PutNetworksBadRequest) Code() int {
	return 400
}

func (o *PutNetworksBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksBadRequest %s", 400, payload)
}

func (o *PutNetworksBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksBadRequest %s", 400, payload)
}

func (o *PutNetworksBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworksUnauthorized creates a PutNetworksUnauthorized with default headers values
func NewPutNetworksUnauthorized() *PutNetworksUnauthorized {
	return &PutNetworksUnauthorized{}
}

/*
PutNetworksUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutNetworksUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put networks unauthorized response has a 2xx status code
func (o *PutNetworksUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put networks unauthorized response has a 3xx status code
func (o *PutNetworksUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put networks unauthorized response has a 4xx status code
func (o *PutNetworksUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put networks unauthorized response has a 5xx status code
func (o *PutNetworksUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put networks unauthorized response a status code equal to that given
func (o *PutNetworksUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put networks unauthorized response
func (o *PutNetworksUnauthorized) Code() int {
	return 401
}

func (o *PutNetworksUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksUnauthorized %s", 401, payload)
}

func (o *PutNetworksUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksUnauthorized %s", 401, payload)
}

func (o *PutNetworksUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworksForbidden creates a PutNetworksForbidden with default headers values
func NewPutNetworksForbidden() *PutNetworksForbidden {
	return &PutNetworksForbidden{}
}

/*
PutNetworksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutNetworksForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put networks forbidden response has a 2xx status code
func (o *PutNetworksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put networks forbidden response has a 3xx status code
func (o *PutNetworksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put networks forbidden response has a 4xx status code
func (o *PutNetworksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put networks forbidden response has a 5xx status code
func (o *PutNetworksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put networks forbidden response a status code equal to that given
func (o *PutNetworksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put networks forbidden response
func (o *PutNetworksForbidden) Code() int {
	return 403
}

func (o *PutNetworksForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksForbidden %s", 403, payload)
}

func (o *PutNetworksForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksForbidden %s", 403, payload)
}

func (o *PutNetworksForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworksNotFound creates a PutNetworksNotFound with default headers values
func NewPutNetworksNotFound() *PutNetworksNotFound {
	return &PutNetworksNotFound{}
}

/*
PutNetworksNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutNetworksNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put networks not found response has a 2xx status code
func (o *PutNetworksNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put networks not found response has a 3xx status code
func (o *PutNetworksNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put networks not found response has a 4xx status code
func (o *PutNetworksNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put networks not found response has a 5xx status code
func (o *PutNetworksNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put networks not found response a status code equal to that given
func (o *PutNetworksNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put networks not found response
func (o *PutNetworksNotFound) Code() int {
	return 404
}

func (o *PutNetworksNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksNotFound %s", 404, payload)
}

func (o *PutNetworksNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /networks][%d] putNetworksNotFound %s", 404, payload)
}

func (o *PutNetworksNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
