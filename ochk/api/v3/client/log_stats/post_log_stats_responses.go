// Code generated by go-swagger; DO NOT EDIT.

package log_stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PostLogStatsReader is a Reader for the PostLogStats structure.
type PostLogStatsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLogStatsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostLogStatsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLogStatsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostLogStatsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostLogStatsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /log/stats] PostLogStats", response, response.Code())
	}
}

// NewPostLogStatsOK creates a PostLogStatsOK with default headers values
func NewPostLogStatsOK() *PostLogStatsOK {
	return &PostLogStatsOK{}
}

/*
PostLogStatsOK describes a response with status code 200, with default header values.

OK
*/
type PostLogStatsOK struct {
	Payload *models.GetLogStats
}

// IsSuccess returns true when this post log stats o k response has a 2xx status code
func (o *PostLogStatsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post log stats o k response has a 3xx status code
func (o *PostLogStatsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats o k response has a 4xx status code
func (o *PostLogStatsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post log stats o k response has a 5xx status code
func (o *PostLogStatsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats o k response a status code equal to that given
func (o *PostLogStatsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post log stats o k response
func (o *PostLogStatsOK) Code() int {
	return 200
}

func (o *PostLogStatsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats][%d] postLogStatsOK %s", 200, payload)
}

func (o *PostLogStatsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats][%d] postLogStatsOK %s", 200, payload)
}

func (o *PostLogStatsOK) GetPayload() *models.GetLogStats {
	return o.Payload
}

func (o *PostLogStatsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetLogStats)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogStatsBadRequest creates a PostLogStatsBadRequest with default headers values
func NewPostLogStatsBadRequest() *PostLogStatsBadRequest {
	return &PostLogStatsBadRequest{}
}

/*
PostLogStatsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostLogStatsBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post log stats bad request response has a 2xx status code
func (o *PostLogStatsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post log stats bad request response has a 3xx status code
func (o *PostLogStatsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats bad request response has a 4xx status code
func (o *PostLogStatsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post log stats bad request response has a 5xx status code
func (o *PostLogStatsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats bad request response a status code equal to that given
func (o *PostLogStatsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post log stats bad request response
func (o *PostLogStatsBadRequest) Code() int {
	return 400
}

func (o *PostLogStatsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats][%d] postLogStatsBadRequest %s", 400, payload)
}

func (o *PostLogStatsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats][%d] postLogStatsBadRequest %s", 400, payload)
}

func (o *PostLogStatsBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostLogStatsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogStatsUnauthorized creates a PostLogStatsUnauthorized with default headers values
func NewPostLogStatsUnauthorized() *PostLogStatsUnauthorized {
	return &PostLogStatsUnauthorized{}
}

/*
PostLogStatsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostLogStatsUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post log stats unauthorized response has a 2xx status code
func (o *PostLogStatsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post log stats unauthorized response has a 3xx status code
func (o *PostLogStatsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats unauthorized response has a 4xx status code
func (o *PostLogStatsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post log stats unauthorized response has a 5xx status code
func (o *PostLogStatsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats unauthorized response a status code equal to that given
func (o *PostLogStatsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post log stats unauthorized response
func (o *PostLogStatsUnauthorized) Code() int {
	return 401
}

func (o *PostLogStatsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats][%d] postLogStatsUnauthorized %s", 401, payload)
}

func (o *PostLogStatsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats][%d] postLogStatsUnauthorized %s", 401, payload)
}

func (o *PostLogStatsUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostLogStatsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogStatsForbidden creates a PostLogStatsForbidden with default headers values
func NewPostLogStatsForbidden() *PostLogStatsForbidden {
	return &PostLogStatsForbidden{}
}

/*
PostLogStatsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostLogStatsForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post log stats forbidden response has a 2xx status code
func (o *PostLogStatsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post log stats forbidden response has a 3xx status code
func (o *PostLogStatsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats forbidden response has a 4xx status code
func (o *PostLogStatsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post log stats forbidden response has a 5xx status code
func (o *PostLogStatsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats forbidden response a status code equal to that given
func (o *PostLogStatsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post log stats forbidden response
func (o *PostLogStatsForbidden) Code() int {
	return 403
}

func (o *PostLogStatsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats][%d] postLogStatsForbidden %s", 403, payload)
}

func (o *PostLogStatsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats][%d] postLogStatsForbidden %s", 403, payload)
}

func (o *PostLogStatsForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostLogStatsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
