// Code generated by go-swagger; DO NOT EDIT.

package log_stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PostLogStatsLogCategoryIDReader is a Reader for the PostLogStatsLogCategoryID structure.
type PostLogStatsLogCategoryIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLogStatsLogCategoryIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostLogStatsLogCategoryIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLogStatsLogCategoryIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostLogStatsLogCategoryIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostLogStatsLogCategoryIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /log/stats/{logCategoryId}] PostLogStatsLogCategoryID", response, response.Code())
	}
}

// NewPostLogStatsLogCategoryIDOK creates a PostLogStatsLogCategoryIDOK with default headers values
func NewPostLogStatsLogCategoryIDOK() *PostLogStatsLogCategoryIDOK {
	return &PostLogStatsLogCategoryIDOK{}
}

/*
PostLogStatsLogCategoryIDOK describes a response with status code 200, with default header values.

OK
*/
type PostLogStatsLogCategoryIDOK struct {
	Payload *models.GetLogCategoryStats
}

// IsSuccess returns true when this post log stats log category Id o k response has a 2xx status code
func (o *PostLogStatsLogCategoryIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post log stats log category Id o k response has a 3xx status code
func (o *PostLogStatsLogCategoryIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats log category Id o k response has a 4xx status code
func (o *PostLogStatsLogCategoryIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post log stats log category Id o k response has a 5xx status code
func (o *PostLogStatsLogCategoryIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats log category Id o k response a status code equal to that given
func (o *PostLogStatsLogCategoryIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post log stats log category Id o k response
func (o *PostLogStatsLogCategoryIDOK) Code() int {
	return 200
}

func (o *PostLogStatsLogCategoryIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/{logCategoryId}][%d] postLogStatsLogCategoryIdOK %s", 200, payload)
}

func (o *PostLogStatsLogCategoryIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/{logCategoryId}][%d] postLogStatsLogCategoryIdOK %s", 200, payload)
}

func (o *PostLogStatsLogCategoryIDOK) GetPayload() *models.GetLogCategoryStats {
	return o.Payload
}

func (o *PostLogStatsLogCategoryIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetLogCategoryStats)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogStatsLogCategoryIDBadRequest creates a PostLogStatsLogCategoryIDBadRequest with default headers values
func NewPostLogStatsLogCategoryIDBadRequest() *PostLogStatsLogCategoryIDBadRequest {
	return &PostLogStatsLogCategoryIDBadRequest{}
}

/*
PostLogStatsLogCategoryIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostLogStatsLogCategoryIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post log stats log category Id bad request response has a 2xx status code
func (o *PostLogStatsLogCategoryIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post log stats log category Id bad request response has a 3xx status code
func (o *PostLogStatsLogCategoryIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats log category Id bad request response has a 4xx status code
func (o *PostLogStatsLogCategoryIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post log stats log category Id bad request response has a 5xx status code
func (o *PostLogStatsLogCategoryIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats log category Id bad request response a status code equal to that given
func (o *PostLogStatsLogCategoryIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post log stats log category Id bad request response
func (o *PostLogStatsLogCategoryIDBadRequest) Code() int {
	return 400
}

func (o *PostLogStatsLogCategoryIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/{logCategoryId}][%d] postLogStatsLogCategoryIdBadRequest %s", 400, payload)
}

func (o *PostLogStatsLogCategoryIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/{logCategoryId}][%d] postLogStatsLogCategoryIdBadRequest %s", 400, payload)
}

func (o *PostLogStatsLogCategoryIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostLogStatsLogCategoryIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogStatsLogCategoryIDUnauthorized creates a PostLogStatsLogCategoryIDUnauthorized with default headers values
func NewPostLogStatsLogCategoryIDUnauthorized() *PostLogStatsLogCategoryIDUnauthorized {
	return &PostLogStatsLogCategoryIDUnauthorized{}
}

/*
PostLogStatsLogCategoryIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostLogStatsLogCategoryIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post log stats log category Id unauthorized response has a 2xx status code
func (o *PostLogStatsLogCategoryIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post log stats log category Id unauthorized response has a 3xx status code
func (o *PostLogStatsLogCategoryIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats log category Id unauthorized response has a 4xx status code
func (o *PostLogStatsLogCategoryIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post log stats log category Id unauthorized response has a 5xx status code
func (o *PostLogStatsLogCategoryIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats log category Id unauthorized response a status code equal to that given
func (o *PostLogStatsLogCategoryIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post log stats log category Id unauthorized response
func (o *PostLogStatsLogCategoryIDUnauthorized) Code() int {
	return 401
}

func (o *PostLogStatsLogCategoryIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/{logCategoryId}][%d] postLogStatsLogCategoryIdUnauthorized %s", 401, payload)
}

func (o *PostLogStatsLogCategoryIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/{logCategoryId}][%d] postLogStatsLogCategoryIdUnauthorized %s", 401, payload)
}

func (o *PostLogStatsLogCategoryIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostLogStatsLogCategoryIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogStatsLogCategoryIDForbidden creates a PostLogStatsLogCategoryIDForbidden with default headers values
func NewPostLogStatsLogCategoryIDForbidden() *PostLogStatsLogCategoryIDForbidden {
	return &PostLogStatsLogCategoryIDForbidden{}
}

/*
PostLogStatsLogCategoryIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostLogStatsLogCategoryIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post log stats log category Id forbidden response has a 2xx status code
func (o *PostLogStatsLogCategoryIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post log stats log category Id forbidden response has a 3xx status code
func (o *PostLogStatsLogCategoryIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats log category Id forbidden response has a 4xx status code
func (o *PostLogStatsLogCategoryIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post log stats log category Id forbidden response has a 5xx status code
func (o *PostLogStatsLogCategoryIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats log category Id forbidden response a status code equal to that given
func (o *PostLogStatsLogCategoryIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post log stats log category Id forbidden response
func (o *PostLogStatsLogCategoryIDForbidden) Code() int {
	return 403
}

func (o *PostLogStatsLogCategoryIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/{logCategoryId}][%d] postLogStatsLogCategoryIdForbidden %s", 403, payload)
}

func (o *PostLogStatsLogCategoryIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/{logCategoryId}][%d] postLogStatsLogCategoryIdForbidden %s", 403, payload)
}

func (o *PostLogStatsLogCategoryIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostLogStatsLogCategoryIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
