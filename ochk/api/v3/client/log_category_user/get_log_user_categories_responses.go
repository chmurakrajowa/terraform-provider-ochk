// Code generated by go-swagger; DO NOT EDIT.

package log_category_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetLogUserCategoriesReader is a Reader for the GetLogUserCategories structure.
type GetLogUserCategoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogUserCategoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLogUserCategoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLogUserCategoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLogUserCategoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLogUserCategoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /log/user/categories] GetLogUserCategories", response, response.Code())
	}
}

// NewGetLogUserCategoriesOK creates a GetLogUserCategoriesOK with default headers values
func NewGetLogUserCategoriesOK() *GetLogUserCategoriesOK {
	return &GetLogUserCategoriesOK{}
}

/*
GetLogUserCategoriesOK describes a response with status code 200, with default header values.

OK
*/
type GetLogUserCategoriesOK struct {
	Payload *models.ListLogCategoriesResponse
}

// IsSuccess returns true when this get log user categories o k response has a 2xx status code
func (o *GetLogUserCategoriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get log user categories o k response has a 3xx status code
func (o *GetLogUserCategoriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log user categories o k response has a 4xx status code
func (o *GetLogUserCategoriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log user categories o k response has a 5xx status code
func (o *GetLogUserCategoriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get log user categories o k response a status code equal to that given
func (o *GetLogUserCategoriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get log user categories o k response
func (o *GetLogUserCategoriesOK) Code() int {
	return 200
}

func (o *GetLogUserCategoriesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories][%d] getLogUserCategoriesOK %s", 200, payload)
}

func (o *GetLogUserCategoriesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories][%d] getLogUserCategoriesOK %s", 200, payload)
}

func (o *GetLogUserCategoriesOK) GetPayload() *models.ListLogCategoriesResponse {
	return o.Payload
}

func (o *GetLogUserCategoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListLogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogUserCategoriesBadRequest creates a GetLogUserCategoriesBadRequest with default headers values
func NewGetLogUserCategoriesBadRequest() *GetLogUserCategoriesBadRequest {
	return &GetLogUserCategoriesBadRequest{}
}

/*
GetLogUserCategoriesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLogUserCategoriesBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get log user categories bad request response has a 2xx status code
func (o *GetLogUserCategoriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log user categories bad request response has a 3xx status code
func (o *GetLogUserCategoriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log user categories bad request response has a 4xx status code
func (o *GetLogUserCategoriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log user categories bad request response has a 5xx status code
func (o *GetLogUserCategoriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get log user categories bad request response a status code equal to that given
func (o *GetLogUserCategoriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get log user categories bad request response
func (o *GetLogUserCategoriesBadRequest) Code() int {
	return 400
}

func (o *GetLogUserCategoriesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories][%d] getLogUserCategoriesBadRequest %s", 400, payload)
}

func (o *GetLogUserCategoriesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories][%d] getLogUserCategoriesBadRequest %s", 400, payload)
}

func (o *GetLogUserCategoriesBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetLogUserCategoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogUserCategoriesUnauthorized creates a GetLogUserCategoriesUnauthorized with default headers values
func NewGetLogUserCategoriesUnauthorized() *GetLogUserCategoriesUnauthorized {
	return &GetLogUserCategoriesUnauthorized{}
}

/*
GetLogUserCategoriesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLogUserCategoriesUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get log user categories unauthorized response has a 2xx status code
func (o *GetLogUserCategoriesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log user categories unauthorized response has a 3xx status code
func (o *GetLogUserCategoriesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log user categories unauthorized response has a 4xx status code
func (o *GetLogUserCategoriesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log user categories unauthorized response has a 5xx status code
func (o *GetLogUserCategoriesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get log user categories unauthorized response a status code equal to that given
func (o *GetLogUserCategoriesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get log user categories unauthorized response
func (o *GetLogUserCategoriesUnauthorized) Code() int {
	return 401
}

func (o *GetLogUserCategoriesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories][%d] getLogUserCategoriesUnauthorized %s", 401, payload)
}

func (o *GetLogUserCategoriesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories][%d] getLogUserCategoriesUnauthorized %s", 401, payload)
}

func (o *GetLogUserCategoriesUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetLogUserCategoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogUserCategoriesForbidden creates a GetLogUserCategoriesForbidden with default headers values
func NewGetLogUserCategoriesForbidden() *GetLogUserCategoriesForbidden {
	return &GetLogUserCategoriesForbidden{}
}

/*
GetLogUserCategoriesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLogUserCategoriesForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get log user categories forbidden response has a 2xx status code
func (o *GetLogUserCategoriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log user categories forbidden response has a 3xx status code
func (o *GetLogUserCategoriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log user categories forbidden response has a 4xx status code
func (o *GetLogUserCategoriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log user categories forbidden response has a 5xx status code
func (o *GetLogUserCategoriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get log user categories forbidden response a status code equal to that given
func (o *GetLogUserCategoriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get log user categories forbidden response
func (o *GetLogUserCategoriesForbidden) Code() int {
	return 403
}

func (o *GetLogUserCategoriesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories][%d] getLogUserCategoriesForbidden %s", 403, payload)
}

func (o *GetLogUserCategoriesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories][%d] getLogUserCategoriesForbidden %s", 403, payload)
}

func (o *GetLogUserCategoriesForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetLogUserCategoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
