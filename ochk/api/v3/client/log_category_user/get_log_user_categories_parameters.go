// Code generated by go-swagger; DO NOT EDIT.

package log_category_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetLogUserCategoriesParams creates a new GetLogUserCategoriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLogUserCategoriesParams() *GetLogUserCategoriesParams {
	return &GetLogUserCategoriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLogUserCategoriesParamsWithTimeout creates a new GetLogUserCategoriesParams object
// with the ability to set a timeout on a request.
func NewGetLogUserCategoriesParamsWithTimeout(timeout time.Duration) *GetLogUserCategoriesParams {
	return &GetLogUserCategoriesParams{
		timeout: timeout,
	}
}

// NewGetLogUserCategoriesParamsWithContext creates a new GetLogUserCategoriesParams object
// with the ability to set a context for a request.
func NewGetLogUserCategoriesParamsWithContext(ctx context.Context) *GetLogUserCategoriesParams {
	return &GetLogUserCategoriesParams{
		Context: ctx,
	}
}

// NewGetLogUserCategoriesParamsWithHTTPClient creates a new GetLogUserCategoriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLogUserCategoriesParamsWithHTTPClient(client *http.Client) *GetLogUserCategoriesParams {
	return &GetLogUserCategoriesParams{
		HTTPClient: client,
	}
}

/*
GetLogUserCategoriesParams contains all the parameters to send to the API endpoint

	for the get log user categories operation.

	Typically these are written to a http.Request.
*/
type GetLogUserCategoriesParams struct {

	// LogCategoryName.
	LogCategoryName *string

	// UserID.
	//
	// Format: uuid
	UserID *strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get log user categories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLogUserCategoriesParams) WithDefaults() *GetLogUserCategoriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get log user categories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLogUserCategoriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get log user categories params
func (o *GetLogUserCategoriesParams) WithTimeout(timeout time.Duration) *GetLogUserCategoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get log user categories params
func (o *GetLogUserCategoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get log user categories params
func (o *GetLogUserCategoriesParams) WithContext(ctx context.Context) *GetLogUserCategoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get log user categories params
func (o *GetLogUserCategoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get log user categories params
func (o *GetLogUserCategoriesParams) WithHTTPClient(client *http.Client) *GetLogUserCategoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get log user categories params
func (o *GetLogUserCategoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogCategoryName adds the logCategoryName to the get log user categories params
func (o *GetLogUserCategoriesParams) WithLogCategoryName(logCategoryName *string) *GetLogUserCategoriesParams {
	o.SetLogCategoryName(logCategoryName)
	return o
}

// SetLogCategoryName adds the logCategoryName to the get log user categories params
func (o *GetLogUserCategoriesParams) SetLogCategoryName(logCategoryName *string) {
	o.LogCategoryName = logCategoryName
}

// WithUserID adds the userID to the get log user categories params
func (o *GetLogUserCategoriesParams) WithUserID(userID *strfmt.UUID) *GetLogUserCategoriesParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get log user categories params
func (o *GetLogUserCategoriesParams) SetUserID(userID *strfmt.UUID) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetLogUserCategoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LogCategoryName != nil {

		// query param logCategoryName
		var qrLogCategoryName string

		if o.LogCategoryName != nil {
			qrLogCategoryName = *o.LogCategoryName
		}
		qLogCategoryName := qrLogCategoryName
		if qLogCategoryName != "" {

			if err := r.SetQueryParam("logCategoryName", qLogCategoryName); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param userId
		var qrUserID strfmt.UUID

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID.String()
		if qUserID != "" {

			if err := r.SetQueryParam("userId", qUserID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
