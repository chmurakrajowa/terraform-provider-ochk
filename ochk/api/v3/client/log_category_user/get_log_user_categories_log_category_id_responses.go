// Code generated by go-swagger; DO NOT EDIT.

package log_category_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetLogUserCategoriesLogCategoryIDReader is a Reader for the GetLogUserCategoriesLogCategoryID structure.
type GetLogUserCategoriesLogCategoryIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogUserCategoriesLogCategoryIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLogUserCategoriesLogCategoryIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLogUserCategoriesLogCategoryIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLogUserCategoriesLogCategoryIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLogUserCategoriesLogCategoryIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /log/user/categories/{logCategoryId}] GetLogUserCategoriesLogCategoryID", response, response.Code())
	}
}

// NewGetLogUserCategoriesLogCategoryIDOK creates a GetLogUserCategoriesLogCategoryIDOK with default headers values
func NewGetLogUserCategoriesLogCategoryIDOK() *GetLogUserCategoriesLogCategoryIDOK {
	return &GetLogUserCategoriesLogCategoryIDOK{}
}

/*
GetLogUserCategoriesLogCategoryIDOK describes a response with status code 200, with default header values.

OK
*/
type GetLogUserCategoriesLogCategoryIDOK struct {
	Payload *models.GetLogCategoryResponse
}

// IsSuccess returns true when this get log user categories log category Id o k response has a 2xx status code
func (o *GetLogUserCategoriesLogCategoryIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get log user categories log category Id o k response has a 3xx status code
func (o *GetLogUserCategoriesLogCategoryIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log user categories log category Id o k response has a 4xx status code
func (o *GetLogUserCategoriesLogCategoryIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log user categories log category Id o k response has a 5xx status code
func (o *GetLogUserCategoriesLogCategoryIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get log user categories log category Id o k response a status code equal to that given
func (o *GetLogUserCategoriesLogCategoryIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get log user categories log category Id o k response
func (o *GetLogUserCategoriesLogCategoryIDOK) Code() int {
	return 200
}

func (o *GetLogUserCategoriesLogCategoryIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories/{logCategoryId}][%d] getLogUserCategoriesLogCategoryIdOK %s", 200, payload)
}

func (o *GetLogUserCategoriesLogCategoryIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories/{logCategoryId}][%d] getLogUserCategoriesLogCategoryIdOK %s", 200, payload)
}

func (o *GetLogUserCategoriesLogCategoryIDOK) GetPayload() *models.GetLogCategoryResponse {
	return o.Payload
}

func (o *GetLogUserCategoriesLogCategoryIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetLogCategoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogUserCategoriesLogCategoryIDBadRequest creates a GetLogUserCategoriesLogCategoryIDBadRequest with default headers values
func NewGetLogUserCategoriesLogCategoryIDBadRequest() *GetLogUserCategoriesLogCategoryIDBadRequest {
	return &GetLogUserCategoriesLogCategoryIDBadRequest{}
}

/*
GetLogUserCategoriesLogCategoryIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLogUserCategoriesLogCategoryIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get log user categories log category Id bad request response has a 2xx status code
func (o *GetLogUserCategoriesLogCategoryIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log user categories log category Id bad request response has a 3xx status code
func (o *GetLogUserCategoriesLogCategoryIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log user categories log category Id bad request response has a 4xx status code
func (o *GetLogUserCategoriesLogCategoryIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log user categories log category Id bad request response has a 5xx status code
func (o *GetLogUserCategoriesLogCategoryIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get log user categories log category Id bad request response a status code equal to that given
func (o *GetLogUserCategoriesLogCategoryIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get log user categories log category Id bad request response
func (o *GetLogUserCategoriesLogCategoryIDBadRequest) Code() int {
	return 400
}

func (o *GetLogUserCategoriesLogCategoryIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories/{logCategoryId}][%d] getLogUserCategoriesLogCategoryIdBadRequest %s", 400, payload)
}

func (o *GetLogUserCategoriesLogCategoryIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories/{logCategoryId}][%d] getLogUserCategoriesLogCategoryIdBadRequest %s", 400, payload)
}

func (o *GetLogUserCategoriesLogCategoryIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetLogUserCategoriesLogCategoryIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogUserCategoriesLogCategoryIDUnauthorized creates a GetLogUserCategoriesLogCategoryIDUnauthorized with default headers values
func NewGetLogUserCategoriesLogCategoryIDUnauthorized() *GetLogUserCategoriesLogCategoryIDUnauthorized {
	return &GetLogUserCategoriesLogCategoryIDUnauthorized{}
}

/*
GetLogUserCategoriesLogCategoryIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLogUserCategoriesLogCategoryIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get log user categories log category Id unauthorized response has a 2xx status code
func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log user categories log category Id unauthorized response has a 3xx status code
func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log user categories log category Id unauthorized response has a 4xx status code
func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log user categories log category Id unauthorized response has a 5xx status code
func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get log user categories log category Id unauthorized response a status code equal to that given
func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get log user categories log category Id unauthorized response
func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) Code() int {
	return 401
}

func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories/{logCategoryId}][%d] getLogUserCategoriesLogCategoryIdUnauthorized %s", 401, payload)
}

func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories/{logCategoryId}][%d] getLogUserCategoriesLogCategoryIdUnauthorized %s", 401, payload)
}

func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetLogUserCategoriesLogCategoryIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogUserCategoriesLogCategoryIDForbidden creates a GetLogUserCategoriesLogCategoryIDForbidden with default headers values
func NewGetLogUserCategoriesLogCategoryIDForbidden() *GetLogUserCategoriesLogCategoryIDForbidden {
	return &GetLogUserCategoriesLogCategoryIDForbidden{}
}

/*
GetLogUserCategoriesLogCategoryIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLogUserCategoriesLogCategoryIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get log user categories log category Id forbidden response has a 2xx status code
func (o *GetLogUserCategoriesLogCategoryIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log user categories log category Id forbidden response has a 3xx status code
func (o *GetLogUserCategoriesLogCategoryIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log user categories log category Id forbidden response has a 4xx status code
func (o *GetLogUserCategoriesLogCategoryIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log user categories log category Id forbidden response has a 5xx status code
func (o *GetLogUserCategoriesLogCategoryIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get log user categories log category Id forbidden response a status code equal to that given
func (o *GetLogUserCategoriesLogCategoryIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get log user categories log category Id forbidden response
func (o *GetLogUserCategoriesLogCategoryIDForbidden) Code() int {
	return 403
}

func (o *GetLogUserCategoriesLogCategoryIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories/{logCategoryId}][%d] getLogUserCategoriesLogCategoryIdForbidden %s", 403, payload)
}

func (o *GetLogUserCategoriesLogCategoryIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/user/categories/{logCategoryId}][%d] getLogUserCategoriesLogCategoryIdForbidden %s", 403, payload)
}

func (o *GetLogUserCategoriesLogCategoryIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetLogUserCategoriesLogCategoryIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
