// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutProjectsProjectIDReader is a Reader for the PutProjectsProjectID structure.
type PutProjectsProjectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutProjectsProjectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutProjectsProjectIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutProjectsProjectIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutProjectsProjectIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutProjectsProjectIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutProjectsProjectIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /projects/{projectId}] PutProjectsProjectID", response, response.Code())
	}
}

// NewPutProjectsProjectIDOK creates a PutProjectsProjectIDOK with default headers values
func NewPutProjectsProjectIDOK() *PutProjectsProjectIDOK {
	return &PutProjectsProjectIDOK{}
}

/*
PutProjectsProjectIDOK describes a response with status code 200, with default header values.

OK
*/
type PutProjectsProjectIDOK struct {
	Payload *models.UpdateProjectResponse
}

// IsSuccess returns true when this put projects project Id o k response has a 2xx status code
func (o *PutProjectsProjectIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put projects project Id o k response has a 3xx status code
func (o *PutProjectsProjectIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put projects project Id o k response has a 4xx status code
func (o *PutProjectsProjectIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put projects project Id o k response has a 5xx status code
func (o *PutProjectsProjectIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put projects project Id o k response a status code equal to that given
func (o *PutProjectsProjectIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put projects project Id o k response
func (o *PutProjectsProjectIDOK) Code() int {
	return 200
}

func (o *PutProjectsProjectIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdOK %s", 200, payload)
}

func (o *PutProjectsProjectIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdOK %s", 200, payload)
}

func (o *PutProjectsProjectIDOK) GetPayload() *models.UpdateProjectResponse {
	return o.Payload
}

func (o *PutProjectsProjectIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateProjectResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProjectsProjectIDBadRequest creates a PutProjectsProjectIDBadRequest with default headers values
func NewPutProjectsProjectIDBadRequest() *PutProjectsProjectIDBadRequest {
	return &PutProjectsProjectIDBadRequest{}
}

/*
PutProjectsProjectIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutProjectsProjectIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put projects project Id bad request response has a 2xx status code
func (o *PutProjectsProjectIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put projects project Id bad request response has a 3xx status code
func (o *PutProjectsProjectIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put projects project Id bad request response has a 4xx status code
func (o *PutProjectsProjectIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put projects project Id bad request response has a 5xx status code
func (o *PutProjectsProjectIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put projects project Id bad request response a status code equal to that given
func (o *PutProjectsProjectIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put projects project Id bad request response
func (o *PutProjectsProjectIDBadRequest) Code() int {
	return 400
}

func (o *PutProjectsProjectIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdBadRequest %s", 400, payload)
}

func (o *PutProjectsProjectIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdBadRequest %s", 400, payload)
}

func (o *PutProjectsProjectIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutProjectsProjectIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProjectsProjectIDUnauthorized creates a PutProjectsProjectIDUnauthorized with default headers values
func NewPutProjectsProjectIDUnauthorized() *PutProjectsProjectIDUnauthorized {
	return &PutProjectsProjectIDUnauthorized{}
}

/*
PutProjectsProjectIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutProjectsProjectIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put projects project Id unauthorized response has a 2xx status code
func (o *PutProjectsProjectIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put projects project Id unauthorized response has a 3xx status code
func (o *PutProjectsProjectIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put projects project Id unauthorized response has a 4xx status code
func (o *PutProjectsProjectIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put projects project Id unauthorized response has a 5xx status code
func (o *PutProjectsProjectIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put projects project Id unauthorized response a status code equal to that given
func (o *PutProjectsProjectIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put projects project Id unauthorized response
func (o *PutProjectsProjectIDUnauthorized) Code() int {
	return 401
}

func (o *PutProjectsProjectIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdUnauthorized %s", 401, payload)
}

func (o *PutProjectsProjectIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdUnauthorized %s", 401, payload)
}

func (o *PutProjectsProjectIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutProjectsProjectIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProjectsProjectIDForbidden creates a PutProjectsProjectIDForbidden with default headers values
func NewPutProjectsProjectIDForbidden() *PutProjectsProjectIDForbidden {
	return &PutProjectsProjectIDForbidden{}
}

/*
PutProjectsProjectIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutProjectsProjectIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put projects project Id forbidden response has a 2xx status code
func (o *PutProjectsProjectIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put projects project Id forbidden response has a 3xx status code
func (o *PutProjectsProjectIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put projects project Id forbidden response has a 4xx status code
func (o *PutProjectsProjectIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put projects project Id forbidden response has a 5xx status code
func (o *PutProjectsProjectIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put projects project Id forbidden response a status code equal to that given
func (o *PutProjectsProjectIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put projects project Id forbidden response
func (o *PutProjectsProjectIDForbidden) Code() int {
	return 403
}

func (o *PutProjectsProjectIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdForbidden %s", 403, payload)
}

func (o *PutProjectsProjectIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdForbidden %s", 403, payload)
}

func (o *PutProjectsProjectIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutProjectsProjectIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProjectsProjectIDNotFound creates a PutProjectsProjectIDNotFound with default headers values
func NewPutProjectsProjectIDNotFound() *PutProjectsProjectIDNotFound {
	return &PutProjectsProjectIDNotFound{}
}

/*
PutProjectsProjectIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutProjectsProjectIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put projects project Id not found response has a 2xx status code
func (o *PutProjectsProjectIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put projects project Id not found response has a 3xx status code
func (o *PutProjectsProjectIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put projects project Id not found response has a 4xx status code
func (o *PutProjectsProjectIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put projects project Id not found response has a 5xx status code
func (o *PutProjectsProjectIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put projects project Id not found response a status code equal to that given
func (o *PutProjectsProjectIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put projects project Id not found response
func (o *PutProjectsProjectIDNotFound) Code() int {
	return 404
}

func (o *PutProjectsProjectIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdNotFound %s", 404, payload)
}

func (o *PutProjectsProjectIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}][%d] putProjectsProjectIdNotFound %s", 404, payload)
}

func (o *PutProjectsProjectIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutProjectsProjectIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
