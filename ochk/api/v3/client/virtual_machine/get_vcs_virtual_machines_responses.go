// Code generated by go-swagger; DO NOT EDIT.

package virtual_machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetVcsVirtualMachinesReader is a Reader for the GetVcsVirtualMachines structure.
type GetVcsVirtualMachinesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVcsVirtualMachinesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVcsVirtualMachinesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVcsVirtualMachinesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetVcsVirtualMachinesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVcsVirtualMachinesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /vcs/virtual-machines] GetVcsVirtualMachines", response, response.Code())
	}
}

// NewGetVcsVirtualMachinesOK creates a GetVcsVirtualMachinesOK with default headers values
func NewGetVcsVirtualMachinesOK() *GetVcsVirtualMachinesOK {
	return &GetVcsVirtualMachinesOK{}
}

/*
GetVcsVirtualMachinesOK describes a response with status code 200, with default header values.

OK
*/
type GetVcsVirtualMachinesOK struct {
	Payload *models.ListVirtualMachinesResponse
}

// IsSuccess returns true when this get vcs virtual machines o k response has a 2xx status code
func (o *GetVcsVirtualMachinesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get vcs virtual machines o k response has a 3xx status code
func (o *GetVcsVirtualMachinesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vcs virtual machines o k response has a 4xx status code
func (o *GetVcsVirtualMachinesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get vcs virtual machines o k response has a 5xx status code
func (o *GetVcsVirtualMachinesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get vcs virtual machines o k response a status code equal to that given
func (o *GetVcsVirtualMachinesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get vcs virtual machines o k response
func (o *GetVcsVirtualMachinesOK) Code() int {
	return 200
}

func (o *GetVcsVirtualMachinesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] getVcsVirtualMachinesOK %s", 200, payload)
}

func (o *GetVcsVirtualMachinesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] getVcsVirtualMachinesOK %s", 200, payload)
}

func (o *GetVcsVirtualMachinesOK) GetPayload() *models.ListVirtualMachinesResponse {
	return o.Payload
}

func (o *GetVcsVirtualMachinesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListVirtualMachinesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcsVirtualMachinesBadRequest creates a GetVcsVirtualMachinesBadRequest with default headers values
func NewGetVcsVirtualMachinesBadRequest() *GetVcsVirtualMachinesBadRequest {
	return &GetVcsVirtualMachinesBadRequest{}
}

/*
GetVcsVirtualMachinesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetVcsVirtualMachinesBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get vcs virtual machines bad request response has a 2xx status code
func (o *GetVcsVirtualMachinesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vcs virtual machines bad request response has a 3xx status code
func (o *GetVcsVirtualMachinesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vcs virtual machines bad request response has a 4xx status code
func (o *GetVcsVirtualMachinesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vcs virtual machines bad request response has a 5xx status code
func (o *GetVcsVirtualMachinesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get vcs virtual machines bad request response a status code equal to that given
func (o *GetVcsVirtualMachinesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get vcs virtual machines bad request response
func (o *GetVcsVirtualMachinesBadRequest) Code() int {
	return 400
}

func (o *GetVcsVirtualMachinesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] getVcsVirtualMachinesBadRequest %s", 400, payload)
}

func (o *GetVcsVirtualMachinesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] getVcsVirtualMachinesBadRequest %s", 400, payload)
}

func (o *GetVcsVirtualMachinesBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetVcsVirtualMachinesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcsVirtualMachinesUnauthorized creates a GetVcsVirtualMachinesUnauthorized with default headers values
func NewGetVcsVirtualMachinesUnauthorized() *GetVcsVirtualMachinesUnauthorized {
	return &GetVcsVirtualMachinesUnauthorized{}
}

/*
GetVcsVirtualMachinesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVcsVirtualMachinesUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get vcs virtual machines unauthorized response has a 2xx status code
func (o *GetVcsVirtualMachinesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vcs virtual machines unauthorized response has a 3xx status code
func (o *GetVcsVirtualMachinesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vcs virtual machines unauthorized response has a 4xx status code
func (o *GetVcsVirtualMachinesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vcs virtual machines unauthorized response has a 5xx status code
func (o *GetVcsVirtualMachinesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get vcs virtual machines unauthorized response a status code equal to that given
func (o *GetVcsVirtualMachinesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get vcs virtual machines unauthorized response
func (o *GetVcsVirtualMachinesUnauthorized) Code() int {
	return 401
}

func (o *GetVcsVirtualMachinesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] getVcsVirtualMachinesUnauthorized %s", 401, payload)
}

func (o *GetVcsVirtualMachinesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] getVcsVirtualMachinesUnauthorized %s", 401, payload)
}

func (o *GetVcsVirtualMachinesUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetVcsVirtualMachinesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcsVirtualMachinesForbidden creates a GetVcsVirtualMachinesForbidden with default headers values
func NewGetVcsVirtualMachinesForbidden() *GetVcsVirtualMachinesForbidden {
	return &GetVcsVirtualMachinesForbidden{}
}

/*
GetVcsVirtualMachinesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVcsVirtualMachinesForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get vcs virtual machines forbidden response has a 2xx status code
func (o *GetVcsVirtualMachinesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vcs virtual machines forbidden response has a 3xx status code
func (o *GetVcsVirtualMachinesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vcs virtual machines forbidden response has a 4xx status code
func (o *GetVcsVirtualMachinesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vcs virtual machines forbidden response has a 5xx status code
func (o *GetVcsVirtualMachinesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get vcs virtual machines forbidden response a status code equal to that given
func (o *GetVcsVirtualMachinesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get vcs virtual machines forbidden response
func (o *GetVcsVirtualMachinesForbidden) Code() int {
	return 403
}

func (o *GetVcsVirtualMachinesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] getVcsVirtualMachinesForbidden %s", 403, payload)
}

func (o *GetVcsVirtualMachinesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vcs/virtual-machines][%d] getVcsVirtualMachinesForbidden %s", 403, payload)
}

func (o *GetVcsVirtualMachinesForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetVcsVirtualMachinesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
