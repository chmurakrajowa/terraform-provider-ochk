// Code generated by go-swagger; DO NOT EDIT.

package virtual_machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PostVcsVirtualMachinesVirtualMachineIDResetReader is a Reader for the PostVcsVirtualMachinesVirtualMachineIDReset structure.
type PostVcsVirtualMachinesVirtualMachineIDResetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostVcsVirtualMachinesVirtualMachineIDResetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostVcsVirtualMachinesVirtualMachineIDResetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostVcsVirtualMachinesVirtualMachineIDResetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostVcsVirtualMachinesVirtualMachineIDResetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostVcsVirtualMachinesVirtualMachineIDResetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /vcs/virtual-machines/{virtualMachineId}/reset] PostVcsVirtualMachinesVirtualMachineIDReset", response, response.Code())
	}
}

// NewPostVcsVirtualMachinesVirtualMachineIDResetOK creates a PostVcsVirtualMachinesVirtualMachineIDResetOK with default headers values
func NewPostVcsVirtualMachinesVirtualMachineIDResetOK() *PostVcsVirtualMachinesVirtualMachineIDResetOK {
	return &PostVcsVirtualMachinesVirtualMachineIDResetOK{}
}

/*
PostVcsVirtualMachinesVirtualMachineIDResetOK describes a response with status code 200, with default header values.

OK
*/
type PostVcsVirtualMachinesVirtualMachineIDResetOK struct {
	Payload *models.ResetVirtualMachineResponse
}

// IsSuccess returns true when this post vcs virtual machines virtual machine Id reset o k response has a 2xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post vcs virtual machines virtual machine Id reset o k response has a 3xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines virtual machine Id reset o k response has a 4xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post vcs virtual machines virtual machine Id reset o k response has a 5xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines virtual machine Id reset o k response a status code equal to that given
func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post vcs virtual machines virtual machine Id reset o k response
func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) Code() int {
	return 200
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/reset][%d] postVcsVirtualMachinesVirtualMachineIdResetOK %s", 200, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/reset][%d] postVcsVirtualMachinesVirtualMachineIdResetOK %s", 200, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) GetPayload() *models.ResetVirtualMachineResponse {
	return o.Payload
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResetVirtualMachineResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVcsVirtualMachinesVirtualMachineIDResetBadRequest creates a PostVcsVirtualMachinesVirtualMachineIDResetBadRequest with default headers values
func NewPostVcsVirtualMachinesVirtualMachineIDResetBadRequest() *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest {
	return &PostVcsVirtualMachinesVirtualMachineIDResetBadRequest{}
}

/*
PostVcsVirtualMachinesVirtualMachineIDResetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostVcsVirtualMachinesVirtualMachineIDResetBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post vcs virtual machines virtual machine Id reset bad request response has a 2xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vcs virtual machines virtual machine Id reset bad request response has a 3xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines virtual machine Id reset bad request response has a 4xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vcs virtual machines virtual machine Id reset bad request response has a 5xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines virtual machine Id reset bad request response a status code equal to that given
func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post vcs virtual machines virtual machine Id reset bad request response
func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) Code() int {
	return 400
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/reset][%d] postVcsVirtualMachinesVirtualMachineIdResetBadRequest %s", 400, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/reset][%d] postVcsVirtualMachinesVirtualMachineIdResetBadRequest %s", 400, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVcsVirtualMachinesVirtualMachineIDResetUnauthorized creates a PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized with default headers values
func NewPostVcsVirtualMachinesVirtualMachineIDResetUnauthorized() *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized {
	return &PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized{}
}

/*
PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post vcs virtual machines virtual machine Id reset unauthorized response has a 2xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vcs virtual machines virtual machine Id reset unauthorized response has a 3xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines virtual machine Id reset unauthorized response has a 4xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vcs virtual machines virtual machine Id reset unauthorized response has a 5xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines virtual machine Id reset unauthorized response a status code equal to that given
func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post vcs virtual machines virtual machine Id reset unauthorized response
func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) Code() int {
	return 401
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/reset][%d] postVcsVirtualMachinesVirtualMachineIdResetUnauthorized %s", 401, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/reset][%d] postVcsVirtualMachinesVirtualMachineIdResetUnauthorized %s", 401, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVcsVirtualMachinesVirtualMachineIDResetForbidden creates a PostVcsVirtualMachinesVirtualMachineIDResetForbidden with default headers values
func NewPostVcsVirtualMachinesVirtualMachineIDResetForbidden() *PostVcsVirtualMachinesVirtualMachineIDResetForbidden {
	return &PostVcsVirtualMachinesVirtualMachineIDResetForbidden{}
}

/*
PostVcsVirtualMachinesVirtualMachineIDResetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostVcsVirtualMachinesVirtualMachineIDResetForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post vcs virtual machines virtual machine Id reset forbidden response has a 2xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vcs virtual machines virtual machine Id reset forbidden response has a 3xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines virtual machine Id reset forbidden response has a 4xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vcs virtual machines virtual machine Id reset forbidden response has a 5xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines virtual machine Id reset forbidden response a status code equal to that given
func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post vcs virtual machines virtual machine Id reset forbidden response
func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) Code() int {
	return 403
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/reset][%d] postVcsVirtualMachinesVirtualMachineIdResetForbidden %s", 403, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/reset][%d] postVcsVirtualMachinesVirtualMachineIdResetForbidden %s", 403, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostVcsVirtualMachinesVirtualMachineIDResetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
