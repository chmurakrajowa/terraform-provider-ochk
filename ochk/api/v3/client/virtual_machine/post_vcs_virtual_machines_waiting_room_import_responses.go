// Code generated by go-swagger; DO NOT EDIT.

package virtual_machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PostVcsVirtualMachinesWaitingRoomImportReader is a Reader for the PostVcsVirtualMachinesWaitingRoomImport structure.
type PostVcsVirtualMachinesWaitingRoomImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostVcsVirtualMachinesWaitingRoomImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostVcsVirtualMachinesWaitingRoomImportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostVcsVirtualMachinesWaitingRoomImportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostVcsVirtualMachinesWaitingRoomImportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostVcsVirtualMachinesWaitingRoomImportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /vcs/virtual-machines/waiting-room/import] PostVcsVirtualMachinesWaitingRoomImport", response, response.Code())
	}
}

// NewPostVcsVirtualMachinesWaitingRoomImportOK creates a PostVcsVirtualMachinesWaitingRoomImportOK with default headers values
func NewPostVcsVirtualMachinesWaitingRoomImportOK() *PostVcsVirtualMachinesWaitingRoomImportOK {
	return &PostVcsVirtualMachinesWaitingRoomImportOK{}
}

/*
PostVcsVirtualMachinesWaitingRoomImportOK describes a response with status code 200, with default header values.

OK
*/
type PostVcsVirtualMachinesWaitingRoomImportOK struct {
	Payload *models.ImportVirtualMachineResponse
}

// IsSuccess returns true when this post vcs virtual machines waiting room import o k response has a 2xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post vcs virtual machines waiting room import o k response has a 3xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines waiting room import o k response has a 4xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post vcs virtual machines waiting room import o k response has a 5xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines waiting room import o k response a status code equal to that given
func (o *PostVcsVirtualMachinesWaitingRoomImportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post vcs virtual machines waiting room import o k response
func (o *PostVcsVirtualMachinesWaitingRoomImportOK) Code() int {
	return 200
}

func (o *PostVcsVirtualMachinesWaitingRoomImportOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/waiting-room/import][%d] postVcsVirtualMachinesWaitingRoomImportOK %s", 200, payload)
}

func (o *PostVcsVirtualMachinesWaitingRoomImportOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/waiting-room/import][%d] postVcsVirtualMachinesWaitingRoomImportOK %s", 200, payload)
}

func (o *PostVcsVirtualMachinesWaitingRoomImportOK) GetPayload() *models.ImportVirtualMachineResponse {
	return o.Payload
}

func (o *PostVcsVirtualMachinesWaitingRoomImportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImportVirtualMachineResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVcsVirtualMachinesWaitingRoomImportBadRequest creates a PostVcsVirtualMachinesWaitingRoomImportBadRequest with default headers values
func NewPostVcsVirtualMachinesWaitingRoomImportBadRequest() *PostVcsVirtualMachinesWaitingRoomImportBadRequest {
	return &PostVcsVirtualMachinesWaitingRoomImportBadRequest{}
}

/*
PostVcsVirtualMachinesWaitingRoomImportBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostVcsVirtualMachinesWaitingRoomImportBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post vcs virtual machines waiting room import bad request response has a 2xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vcs virtual machines waiting room import bad request response has a 3xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines waiting room import bad request response has a 4xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vcs virtual machines waiting room import bad request response has a 5xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines waiting room import bad request response a status code equal to that given
func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post vcs virtual machines waiting room import bad request response
func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) Code() int {
	return 400
}

func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/waiting-room/import][%d] postVcsVirtualMachinesWaitingRoomImportBadRequest %s", 400, payload)
}

func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/waiting-room/import][%d] postVcsVirtualMachinesWaitingRoomImportBadRequest %s", 400, payload)
}

func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostVcsVirtualMachinesWaitingRoomImportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVcsVirtualMachinesWaitingRoomImportUnauthorized creates a PostVcsVirtualMachinesWaitingRoomImportUnauthorized with default headers values
func NewPostVcsVirtualMachinesWaitingRoomImportUnauthorized() *PostVcsVirtualMachinesWaitingRoomImportUnauthorized {
	return &PostVcsVirtualMachinesWaitingRoomImportUnauthorized{}
}

/*
PostVcsVirtualMachinesWaitingRoomImportUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostVcsVirtualMachinesWaitingRoomImportUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post vcs virtual machines waiting room import unauthorized response has a 2xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vcs virtual machines waiting room import unauthorized response has a 3xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines waiting room import unauthorized response has a 4xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vcs virtual machines waiting room import unauthorized response has a 5xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines waiting room import unauthorized response a status code equal to that given
func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post vcs virtual machines waiting room import unauthorized response
func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) Code() int {
	return 401
}

func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/waiting-room/import][%d] postVcsVirtualMachinesWaitingRoomImportUnauthorized %s", 401, payload)
}

func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/waiting-room/import][%d] postVcsVirtualMachinesWaitingRoomImportUnauthorized %s", 401, payload)
}

func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostVcsVirtualMachinesWaitingRoomImportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVcsVirtualMachinesWaitingRoomImportForbidden creates a PostVcsVirtualMachinesWaitingRoomImportForbidden with default headers values
func NewPostVcsVirtualMachinesWaitingRoomImportForbidden() *PostVcsVirtualMachinesWaitingRoomImportForbidden {
	return &PostVcsVirtualMachinesWaitingRoomImportForbidden{}
}

/*
PostVcsVirtualMachinesWaitingRoomImportForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostVcsVirtualMachinesWaitingRoomImportForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post vcs virtual machines waiting room import forbidden response has a 2xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vcs virtual machines waiting room import forbidden response has a 3xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines waiting room import forbidden response has a 4xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vcs virtual machines waiting room import forbidden response has a 5xx status code
func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines waiting room import forbidden response a status code equal to that given
func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post vcs virtual machines waiting room import forbidden response
func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) Code() int {
	return 403
}

func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/waiting-room/import][%d] postVcsVirtualMachinesWaitingRoomImportForbidden %s", 403, payload)
}

func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/waiting-room/import][%d] postVcsVirtualMachinesWaitingRoomImportForbidden %s", 403, payload)
}

func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostVcsVirtualMachinesWaitingRoomImportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
