// Code generated by go-swagger; DO NOT EDIT.

package virtual_machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PostVcsVirtualMachinesVirtualMachineIDConsoleReader is a Reader for the PostVcsVirtualMachinesVirtualMachineIDConsole structure.
type PostVcsVirtualMachinesVirtualMachineIDConsoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostVcsVirtualMachinesVirtualMachineIDConsoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostVcsVirtualMachinesVirtualMachineIDConsoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /vcs/virtual-machines/{virtualMachineId}/console] PostVcsVirtualMachinesVirtualMachineIDConsole", response, response.Code())
	}
}

// NewPostVcsVirtualMachinesVirtualMachineIDConsoleOK creates a PostVcsVirtualMachinesVirtualMachineIDConsoleOK with default headers values
func NewPostVcsVirtualMachinesVirtualMachineIDConsoleOK() *PostVcsVirtualMachinesVirtualMachineIDConsoleOK {
	return &PostVcsVirtualMachinesVirtualMachineIDConsoleOK{}
}

/*
PostVcsVirtualMachinesVirtualMachineIDConsoleOK describes a response with status code 200, with default header values.

OK
*/
type PostVcsVirtualMachinesVirtualMachineIDConsoleOK struct {
	Payload *models.GetVirtualMachineTicketResponse
}

// IsSuccess returns true when this post vcs virtual machines virtual machine Id console o k response has a 2xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post vcs virtual machines virtual machine Id console o k response has a 3xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines virtual machine Id console o k response has a 4xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post vcs virtual machines virtual machine Id console o k response has a 5xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines virtual machine Id console o k response a status code equal to that given
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post vcs virtual machines virtual machine Id console o k response
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) Code() int {
	return 200
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/console][%d] postVcsVirtualMachinesVirtualMachineIdConsoleOK %s", 200, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/console][%d] postVcsVirtualMachinesVirtualMachineIdConsoleOK %s", 200, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) GetPayload() *models.GetVirtualMachineTicketResponse {
	return o.Payload
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetVirtualMachineTicketResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest creates a PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest with default headers values
func NewPostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest() *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest {
	return &PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest{}
}

/*
PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post vcs virtual machines virtual machine Id console bad request response has a 2xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vcs virtual machines virtual machine Id console bad request response has a 3xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines virtual machine Id console bad request response has a 4xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vcs virtual machines virtual machine Id console bad request response has a 5xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines virtual machine Id console bad request response a status code equal to that given
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post vcs virtual machines virtual machine Id console bad request response
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) Code() int {
	return 400
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/console][%d] postVcsVirtualMachinesVirtualMachineIdConsoleBadRequest %s", 400, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/console][%d] postVcsVirtualMachinesVirtualMachineIdConsoleBadRequest %s", 400, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized creates a PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized with default headers values
func NewPostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized() *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized {
	return &PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized{}
}

/*
PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post vcs virtual machines virtual machine Id console unauthorized response has a 2xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vcs virtual machines virtual machine Id console unauthorized response has a 3xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines virtual machine Id console unauthorized response has a 4xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vcs virtual machines virtual machine Id console unauthorized response has a 5xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines virtual machine Id console unauthorized response a status code equal to that given
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post vcs virtual machines virtual machine Id console unauthorized response
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) Code() int {
	return 401
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/console][%d] postVcsVirtualMachinesVirtualMachineIdConsoleUnauthorized %s", 401, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/console][%d] postVcsVirtualMachinesVirtualMachineIdConsoleUnauthorized %s", 401, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVcsVirtualMachinesVirtualMachineIDConsoleForbidden creates a PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden with default headers values
func NewPostVcsVirtualMachinesVirtualMachineIDConsoleForbidden() *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden {
	return &PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden{}
}

/*
PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post vcs virtual machines virtual machine Id console forbidden response has a 2xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vcs virtual machines virtual machine Id console forbidden response has a 3xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vcs virtual machines virtual machine Id console forbidden response has a 4xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vcs virtual machines virtual machine Id console forbidden response has a 5xx status code
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post vcs virtual machines virtual machine Id console forbidden response a status code equal to that given
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post vcs virtual machines virtual machine Id console forbidden response
func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) Code() int {
	return 403
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/console][%d] postVcsVirtualMachinesVirtualMachineIdConsoleForbidden %s", 403, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /vcs/virtual-machines/{virtualMachineId}/console][%d] postVcsVirtualMachinesVirtualMachineIdConsoleForbidden %s", 403, payload)
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostVcsVirtualMachinesVirtualMachineIDConsoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
