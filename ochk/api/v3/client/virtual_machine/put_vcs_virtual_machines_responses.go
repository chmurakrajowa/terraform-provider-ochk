// Code generated by go-swagger; DO NOT EDIT.

package virtual_machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutVcsVirtualMachinesReader is a Reader for the PutVcsVirtualMachines structure.
type PutVcsVirtualMachinesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutVcsVirtualMachinesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutVcsVirtualMachinesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutVcsVirtualMachinesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutVcsVirtualMachinesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutVcsVirtualMachinesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /vcs/virtual-machines] PutVcsVirtualMachines", response, response.Code())
	}
}

// NewPutVcsVirtualMachinesOK creates a PutVcsVirtualMachinesOK with default headers values
func NewPutVcsVirtualMachinesOK() *PutVcsVirtualMachinesOK {
	return &PutVcsVirtualMachinesOK{}
}

/*
PutVcsVirtualMachinesOK describes a response with status code 200, with default header values.

OK
*/
type PutVcsVirtualMachinesOK struct {
	Payload *models.CreateVirtualMachineResponse
}

// IsSuccess returns true when this put vcs virtual machines o k response has a 2xx status code
func (o *PutVcsVirtualMachinesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put vcs virtual machines o k response has a 3xx status code
func (o *PutVcsVirtualMachinesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put vcs virtual machines o k response has a 4xx status code
func (o *PutVcsVirtualMachinesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put vcs virtual machines o k response has a 5xx status code
func (o *PutVcsVirtualMachinesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put vcs virtual machines o k response a status code equal to that given
func (o *PutVcsVirtualMachinesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put vcs virtual machines o k response
func (o *PutVcsVirtualMachinesOK) Code() int {
	return 200
}

func (o *PutVcsVirtualMachinesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vcs/virtual-machines][%d] putVcsVirtualMachinesOK %s", 200, payload)
}

func (o *PutVcsVirtualMachinesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vcs/virtual-machines][%d] putVcsVirtualMachinesOK %s", 200, payload)
}

func (o *PutVcsVirtualMachinesOK) GetPayload() *models.CreateVirtualMachineResponse {
	return o.Payload
}

func (o *PutVcsVirtualMachinesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateVirtualMachineResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVcsVirtualMachinesBadRequest creates a PutVcsVirtualMachinesBadRequest with default headers values
func NewPutVcsVirtualMachinesBadRequest() *PutVcsVirtualMachinesBadRequest {
	return &PutVcsVirtualMachinesBadRequest{}
}

/*
PutVcsVirtualMachinesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutVcsVirtualMachinesBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put vcs virtual machines bad request response has a 2xx status code
func (o *PutVcsVirtualMachinesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put vcs virtual machines bad request response has a 3xx status code
func (o *PutVcsVirtualMachinesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put vcs virtual machines bad request response has a 4xx status code
func (o *PutVcsVirtualMachinesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put vcs virtual machines bad request response has a 5xx status code
func (o *PutVcsVirtualMachinesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put vcs virtual machines bad request response a status code equal to that given
func (o *PutVcsVirtualMachinesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put vcs virtual machines bad request response
func (o *PutVcsVirtualMachinesBadRequest) Code() int {
	return 400
}

func (o *PutVcsVirtualMachinesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vcs/virtual-machines][%d] putVcsVirtualMachinesBadRequest %s", 400, payload)
}

func (o *PutVcsVirtualMachinesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vcs/virtual-machines][%d] putVcsVirtualMachinesBadRequest %s", 400, payload)
}

func (o *PutVcsVirtualMachinesBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutVcsVirtualMachinesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVcsVirtualMachinesUnauthorized creates a PutVcsVirtualMachinesUnauthorized with default headers values
func NewPutVcsVirtualMachinesUnauthorized() *PutVcsVirtualMachinesUnauthorized {
	return &PutVcsVirtualMachinesUnauthorized{}
}

/*
PutVcsVirtualMachinesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutVcsVirtualMachinesUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put vcs virtual machines unauthorized response has a 2xx status code
func (o *PutVcsVirtualMachinesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put vcs virtual machines unauthorized response has a 3xx status code
func (o *PutVcsVirtualMachinesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put vcs virtual machines unauthorized response has a 4xx status code
func (o *PutVcsVirtualMachinesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put vcs virtual machines unauthorized response has a 5xx status code
func (o *PutVcsVirtualMachinesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put vcs virtual machines unauthorized response a status code equal to that given
func (o *PutVcsVirtualMachinesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put vcs virtual machines unauthorized response
func (o *PutVcsVirtualMachinesUnauthorized) Code() int {
	return 401
}

func (o *PutVcsVirtualMachinesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vcs/virtual-machines][%d] putVcsVirtualMachinesUnauthorized %s", 401, payload)
}

func (o *PutVcsVirtualMachinesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vcs/virtual-machines][%d] putVcsVirtualMachinesUnauthorized %s", 401, payload)
}

func (o *PutVcsVirtualMachinesUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutVcsVirtualMachinesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVcsVirtualMachinesForbidden creates a PutVcsVirtualMachinesForbidden with default headers values
func NewPutVcsVirtualMachinesForbidden() *PutVcsVirtualMachinesForbidden {
	return &PutVcsVirtualMachinesForbidden{}
}

/*
PutVcsVirtualMachinesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutVcsVirtualMachinesForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put vcs virtual machines forbidden response has a 2xx status code
func (o *PutVcsVirtualMachinesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put vcs virtual machines forbidden response has a 3xx status code
func (o *PutVcsVirtualMachinesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put vcs virtual machines forbidden response has a 4xx status code
func (o *PutVcsVirtualMachinesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put vcs virtual machines forbidden response has a 5xx status code
func (o *PutVcsVirtualMachinesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put vcs virtual machines forbidden response a status code equal to that given
func (o *PutVcsVirtualMachinesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put vcs virtual machines forbidden response
func (o *PutVcsVirtualMachinesForbidden) Code() int {
	return 403
}

func (o *PutVcsVirtualMachinesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vcs/virtual-machines][%d] putVcsVirtualMachinesForbidden %s", 403, payload)
}

func (o *PutVcsVirtualMachinesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vcs/virtual-machines][%d] putVcsVirtualMachinesForbidden %s", 403, payload)
}

func (o *PutVcsVirtualMachinesForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutVcsVirtualMachinesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
