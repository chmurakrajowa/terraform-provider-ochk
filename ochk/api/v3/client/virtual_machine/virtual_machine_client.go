// Code generated by go-swagger; DO NOT EDIT.

package virtual_machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual machine API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new virtual machine API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new virtual machine API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for virtual machine API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationStarJSON sets the Content-Type header to "application/*+json".
func WithContentTypeApplicationStarJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/*+json"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteVcsVirtualMachinesVirtualMachineID(params *DeleteVcsVirtualMachinesVirtualMachineIDParams, opts ...ClientOption) (*DeleteVcsVirtualMachinesVirtualMachineIDOK, error)

	GetVcsVirtualMachines(params *GetVcsVirtualMachinesParams, opts ...ClientOption) (*GetVcsVirtualMachinesOK, error)

	GetVcsVirtualMachinesVirtualMachineID(params *GetVcsVirtualMachinesVirtualMachineIDParams, opts ...ClientOption) (*GetVcsVirtualMachinesVirtualMachineIDOK, error)

	PostVcsVirtualMachinesVirtualMachineIDConsole(params *PostVcsVirtualMachinesVirtualMachineIDConsoleParams, opts ...ClientOption) (*PostVcsVirtualMachinesVirtualMachineIDConsoleOK, error)

	PostVcsVirtualMachinesVirtualMachineIDReset(params *PostVcsVirtualMachinesVirtualMachineIDResetParams, opts ...ClientOption) (*PostVcsVirtualMachinesVirtualMachineIDResetOK, error)

	PostVcsVirtualMachinesWaitingRoomImport(params *PostVcsVirtualMachinesWaitingRoomImportParams, opts ...ClientOption) (*PostVcsVirtualMachinesWaitingRoomImportOK, error)

	PutVcsVirtualMachines(params *PutVcsVirtualMachinesParams, opts ...ClientOption) (*PutVcsVirtualMachinesOK, error)

	PutVcsVirtualMachinesVirtualMachineID(params *PutVcsVirtualMachinesVirtualMachineIDParams, opts ...ClientOption) (*PutVcsVirtualMachinesVirtualMachineIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteVcsVirtualMachinesVirtualMachineID deletes virtual machine

Delete virtual machine
*/
func (a *Client) DeleteVcsVirtualMachinesVirtualMachineID(params *DeleteVcsVirtualMachinesVirtualMachineIDParams, opts ...ClientOption) (*DeleteVcsVirtualMachinesVirtualMachineIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcsVirtualMachinesVirtualMachineIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVcsVirtualMachinesVirtualMachineID",
		Method:             "DELETE",
		PathPattern:        "/vcs/virtual-machines/{virtualMachineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVcsVirtualMachinesVirtualMachineIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVcsVirtualMachinesVirtualMachineIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVcsVirtualMachinesVirtualMachineID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVcsVirtualMachines lists virtual machines

List virtual machines
*/
func (a *Client) GetVcsVirtualMachines(params *GetVcsVirtualMachinesParams, opts ...ClientOption) (*GetVcsVirtualMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsVirtualMachinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVcsVirtualMachines",
		Method:             "GET",
		PathPattern:        "/vcs/virtual-machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVcsVirtualMachinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsVirtualMachinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVcsVirtualMachines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVcsVirtualMachinesVirtualMachineID gets virtual machine

Get virtual machine
*/
func (a *Client) GetVcsVirtualMachinesVirtualMachineID(params *GetVcsVirtualMachinesVirtualMachineIDParams, opts ...ClientOption) (*GetVcsVirtualMachinesVirtualMachineIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsVirtualMachinesVirtualMachineIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVcsVirtualMachinesVirtualMachineID",
		Method:             "GET",
		PathPattern:        "/vcs/virtual-machines/{virtualMachineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVcsVirtualMachinesVirtualMachineIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsVirtualMachinesVirtualMachineIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVcsVirtualMachinesVirtualMachineID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVcsVirtualMachinesVirtualMachineIDConsole gets virtual machine console

Get virtual machine console
*/
func (a *Client) PostVcsVirtualMachinesVirtualMachineIDConsole(params *PostVcsVirtualMachinesVirtualMachineIDConsoleParams, opts ...ClientOption) (*PostVcsVirtualMachinesVirtualMachineIDConsoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVcsVirtualMachinesVirtualMachineIDConsoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostVcsVirtualMachinesVirtualMachineIDConsole",
		Method:             "POST",
		PathPattern:        "/vcs/virtual-machines/{virtualMachineId}/console",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVcsVirtualMachinesVirtualMachineIDConsoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVcsVirtualMachinesVirtualMachineIDConsoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVcsVirtualMachinesVirtualMachineIDConsole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVcsVirtualMachinesVirtualMachineIDReset resets virtual machine

Reset virtual machine
*/
func (a *Client) PostVcsVirtualMachinesVirtualMachineIDReset(params *PostVcsVirtualMachinesVirtualMachineIDResetParams, opts ...ClientOption) (*PostVcsVirtualMachinesVirtualMachineIDResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVcsVirtualMachinesVirtualMachineIDResetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostVcsVirtualMachinesVirtualMachineIDReset",
		Method:             "POST",
		PathPattern:        "/vcs/virtual-machines/{virtualMachineId}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVcsVirtualMachinesVirtualMachineIDResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVcsVirtualMachinesVirtualMachineIDResetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVcsVirtualMachinesVirtualMachineIDReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVcsVirtualMachinesWaitingRoomImport imports virtual machine

Import virtual machine
*/
func (a *Client) PostVcsVirtualMachinesWaitingRoomImport(params *PostVcsVirtualMachinesWaitingRoomImportParams, opts ...ClientOption) (*PostVcsVirtualMachinesWaitingRoomImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVcsVirtualMachinesWaitingRoomImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostVcsVirtualMachinesWaitingRoomImport",
		Method:             "POST",
		PathPattern:        "/vcs/virtual-machines/waiting-room/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVcsVirtualMachinesWaitingRoomImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVcsVirtualMachinesWaitingRoomImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVcsVirtualMachinesWaitingRoomImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutVcsVirtualMachines creates virtual machine

Create virtual machine
*/
func (a *Client) PutVcsVirtualMachines(params *PutVcsVirtualMachinesParams, opts ...ClientOption) (*PutVcsVirtualMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVcsVirtualMachinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutVcsVirtualMachines",
		Method:             "PUT",
		PathPattern:        "/vcs/virtual-machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutVcsVirtualMachinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVcsVirtualMachinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutVcsVirtualMachines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutVcsVirtualMachinesVirtualMachineID updates virtual machine

Update virtual machine
*/
func (a *Client) PutVcsVirtualMachinesVirtualMachineID(params *PutVcsVirtualMachinesVirtualMachineIDParams, opts ...ClientOption) (*PutVcsVirtualMachinesVirtualMachineIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVcsVirtualMachinesVirtualMachineIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutVcsVirtualMachinesVirtualMachineID",
		Method:             "PUT",
		PathPattern:        "/vcs/virtual-machines/{virtualMachineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutVcsVirtualMachinesVirtualMachineIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVcsVirtualMachinesVirtualMachineIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutVcsVirtualMachinesVirtualMachineID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
