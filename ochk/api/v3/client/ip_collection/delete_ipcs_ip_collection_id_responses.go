// Code generated by go-swagger; DO NOT EDIT.

package ip_collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// DeleteIpcsIPCollectionIDReader is a Reader for the DeleteIpcsIPCollectionID structure.
type DeleteIpcsIPCollectionIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIpcsIPCollectionIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteIpcsIPCollectionIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteIpcsIPCollectionIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteIpcsIPCollectionIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteIpcsIPCollectionIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteIpcsIPCollectionIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /ipcs/{ipCollectionId}] DeleteIpcsIPCollectionID", response, response.Code())
	}
}

// NewDeleteIpcsIPCollectionIDOK creates a DeleteIpcsIPCollectionIDOK with default headers values
func NewDeleteIpcsIPCollectionIDOK() *DeleteIpcsIPCollectionIDOK {
	return &DeleteIpcsIPCollectionIDOK{}
}

/*
DeleteIpcsIPCollectionIDOK describes a response with status code 200, with default header values.

OK
*/
type DeleteIpcsIPCollectionIDOK struct {
	Payload *models.DeleteIPCollectionResponse
}

// IsSuccess returns true when this delete ipcs Ip collection Id o k response has a 2xx status code
func (o *DeleteIpcsIPCollectionIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete ipcs Ip collection Id o k response has a 3xx status code
func (o *DeleteIpcsIPCollectionIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ipcs Ip collection Id o k response has a 4xx status code
func (o *DeleteIpcsIPCollectionIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete ipcs Ip collection Id o k response has a 5xx status code
func (o *DeleteIpcsIPCollectionIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ipcs Ip collection Id o k response a status code equal to that given
func (o *DeleteIpcsIPCollectionIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete ipcs Ip collection Id o k response
func (o *DeleteIpcsIPCollectionIDOK) Code() int {
	return 200
}

func (o *DeleteIpcsIPCollectionIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdOK %s", 200, payload)
}

func (o *DeleteIpcsIPCollectionIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdOK %s", 200, payload)
}

func (o *DeleteIpcsIPCollectionIDOK) GetPayload() *models.DeleteIPCollectionResponse {
	return o.Payload
}

func (o *DeleteIpcsIPCollectionIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteIPCollectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIpcsIPCollectionIDBadRequest creates a DeleteIpcsIPCollectionIDBadRequest with default headers values
func NewDeleteIpcsIPCollectionIDBadRequest() *DeleteIpcsIPCollectionIDBadRequest {
	return &DeleteIpcsIPCollectionIDBadRequest{}
}

/*
DeleteIpcsIPCollectionIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteIpcsIPCollectionIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete ipcs Ip collection Id bad request response has a 2xx status code
func (o *DeleteIpcsIPCollectionIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete ipcs Ip collection Id bad request response has a 3xx status code
func (o *DeleteIpcsIPCollectionIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ipcs Ip collection Id bad request response has a 4xx status code
func (o *DeleteIpcsIPCollectionIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete ipcs Ip collection Id bad request response has a 5xx status code
func (o *DeleteIpcsIPCollectionIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ipcs Ip collection Id bad request response a status code equal to that given
func (o *DeleteIpcsIPCollectionIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete ipcs Ip collection Id bad request response
func (o *DeleteIpcsIPCollectionIDBadRequest) Code() int {
	return 400
}

func (o *DeleteIpcsIPCollectionIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdBadRequest %s", 400, payload)
}

func (o *DeleteIpcsIPCollectionIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdBadRequest %s", 400, payload)
}

func (o *DeleteIpcsIPCollectionIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteIpcsIPCollectionIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIpcsIPCollectionIDUnauthorized creates a DeleteIpcsIPCollectionIDUnauthorized with default headers values
func NewDeleteIpcsIPCollectionIDUnauthorized() *DeleteIpcsIPCollectionIDUnauthorized {
	return &DeleteIpcsIPCollectionIDUnauthorized{}
}

/*
DeleteIpcsIPCollectionIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteIpcsIPCollectionIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete ipcs Ip collection Id unauthorized response has a 2xx status code
func (o *DeleteIpcsIPCollectionIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete ipcs Ip collection Id unauthorized response has a 3xx status code
func (o *DeleteIpcsIPCollectionIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ipcs Ip collection Id unauthorized response has a 4xx status code
func (o *DeleteIpcsIPCollectionIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete ipcs Ip collection Id unauthorized response has a 5xx status code
func (o *DeleteIpcsIPCollectionIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ipcs Ip collection Id unauthorized response a status code equal to that given
func (o *DeleteIpcsIPCollectionIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete ipcs Ip collection Id unauthorized response
func (o *DeleteIpcsIPCollectionIDUnauthorized) Code() int {
	return 401
}

func (o *DeleteIpcsIPCollectionIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdUnauthorized %s", 401, payload)
}

func (o *DeleteIpcsIPCollectionIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdUnauthorized %s", 401, payload)
}

func (o *DeleteIpcsIPCollectionIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteIpcsIPCollectionIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIpcsIPCollectionIDForbidden creates a DeleteIpcsIPCollectionIDForbidden with default headers values
func NewDeleteIpcsIPCollectionIDForbidden() *DeleteIpcsIPCollectionIDForbidden {
	return &DeleteIpcsIPCollectionIDForbidden{}
}

/*
DeleteIpcsIPCollectionIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteIpcsIPCollectionIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete ipcs Ip collection Id forbidden response has a 2xx status code
func (o *DeleteIpcsIPCollectionIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete ipcs Ip collection Id forbidden response has a 3xx status code
func (o *DeleteIpcsIPCollectionIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ipcs Ip collection Id forbidden response has a 4xx status code
func (o *DeleteIpcsIPCollectionIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete ipcs Ip collection Id forbidden response has a 5xx status code
func (o *DeleteIpcsIPCollectionIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ipcs Ip collection Id forbidden response a status code equal to that given
func (o *DeleteIpcsIPCollectionIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete ipcs Ip collection Id forbidden response
func (o *DeleteIpcsIPCollectionIDForbidden) Code() int {
	return 403
}

func (o *DeleteIpcsIPCollectionIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdForbidden %s", 403, payload)
}

func (o *DeleteIpcsIPCollectionIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdForbidden %s", 403, payload)
}

func (o *DeleteIpcsIPCollectionIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteIpcsIPCollectionIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIpcsIPCollectionIDNotFound creates a DeleteIpcsIPCollectionIDNotFound with default headers values
func NewDeleteIpcsIPCollectionIDNotFound() *DeleteIpcsIPCollectionIDNotFound {
	return &DeleteIpcsIPCollectionIDNotFound{}
}

/*
DeleteIpcsIPCollectionIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteIpcsIPCollectionIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete ipcs Ip collection Id not found response has a 2xx status code
func (o *DeleteIpcsIPCollectionIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete ipcs Ip collection Id not found response has a 3xx status code
func (o *DeleteIpcsIPCollectionIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ipcs Ip collection Id not found response has a 4xx status code
func (o *DeleteIpcsIPCollectionIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete ipcs Ip collection Id not found response has a 5xx status code
func (o *DeleteIpcsIPCollectionIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ipcs Ip collection Id not found response a status code equal to that given
func (o *DeleteIpcsIPCollectionIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete ipcs Ip collection Id not found response
func (o *DeleteIpcsIPCollectionIDNotFound) Code() int {
	return 404
}

func (o *DeleteIpcsIPCollectionIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdNotFound %s", 404, payload)
}

func (o *DeleteIpcsIPCollectionIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /ipcs/{ipCollectionId}][%d] deleteIpcsIpCollectionIdNotFound %s", 404, payload)
}

func (o *DeleteIpcsIPCollectionIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteIpcsIPCollectionIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
