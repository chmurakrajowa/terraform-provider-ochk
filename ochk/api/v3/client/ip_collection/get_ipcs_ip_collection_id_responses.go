// Code generated by go-swagger; DO NOT EDIT.

package ip_collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetIpcsIPCollectionIDReader is a Reader for the GetIpcsIPCollectionID structure.
type GetIpcsIPCollectionIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIpcsIPCollectionIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIpcsIPCollectionIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIpcsIPCollectionIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetIpcsIPCollectionIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIpcsIPCollectionIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetIpcsIPCollectionIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ipcs/{ipCollectionId}] GetIpcsIPCollectionID", response, response.Code())
	}
}

// NewGetIpcsIPCollectionIDOK creates a GetIpcsIPCollectionIDOK with default headers values
func NewGetIpcsIPCollectionIDOK() *GetIpcsIPCollectionIDOK {
	return &GetIpcsIPCollectionIDOK{}
}

/*
GetIpcsIPCollectionIDOK describes a response with status code 200, with default header values.

OK
*/
type GetIpcsIPCollectionIDOK struct {
	Payload *models.GetIPCollectionResponse
}

// IsSuccess returns true when this get ipcs Ip collection Id o k response has a 2xx status code
func (o *GetIpcsIPCollectionIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get ipcs Ip collection Id o k response has a 3xx status code
func (o *GetIpcsIPCollectionIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ipcs Ip collection Id o k response has a 4xx status code
func (o *GetIpcsIPCollectionIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get ipcs Ip collection Id o k response has a 5xx status code
func (o *GetIpcsIPCollectionIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get ipcs Ip collection Id o k response a status code equal to that given
func (o *GetIpcsIPCollectionIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get ipcs Ip collection Id o k response
func (o *GetIpcsIPCollectionIDOK) Code() int {
	return 200
}

func (o *GetIpcsIPCollectionIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdOK %s", 200, payload)
}

func (o *GetIpcsIPCollectionIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdOK %s", 200, payload)
}

func (o *GetIpcsIPCollectionIDOK) GetPayload() *models.GetIPCollectionResponse {
	return o.Payload
}

func (o *GetIpcsIPCollectionIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetIPCollectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpcsIPCollectionIDBadRequest creates a GetIpcsIPCollectionIDBadRequest with default headers values
func NewGetIpcsIPCollectionIDBadRequest() *GetIpcsIPCollectionIDBadRequest {
	return &GetIpcsIPCollectionIDBadRequest{}
}

/*
GetIpcsIPCollectionIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetIpcsIPCollectionIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get ipcs Ip collection Id bad request response has a 2xx status code
func (o *GetIpcsIPCollectionIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ipcs Ip collection Id bad request response has a 3xx status code
func (o *GetIpcsIPCollectionIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ipcs Ip collection Id bad request response has a 4xx status code
func (o *GetIpcsIPCollectionIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ipcs Ip collection Id bad request response has a 5xx status code
func (o *GetIpcsIPCollectionIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get ipcs Ip collection Id bad request response a status code equal to that given
func (o *GetIpcsIPCollectionIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get ipcs Ip collection Id bad request response
func (o *GetIpcsIPCollectionIDBadRequest) Code() int {
	return 400
}

func (o *GetIpcsIPCollectionIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdBadRequest %s", 400, payload)
}

func (o *GetIpcsIPCollectionIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdBadRequest %s", 400, payload)
}

func (o *GetIpcsIPCollectionIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetIpcsIPCollectionIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpcsIPCollectionIDUnauthorized creates a GetIpcsIPCollectionIDUnauthorized with default headers values
func NewGetIpcsIPCollectionIDUnauthorized() *GetIpcsIPCollectionIDUnauthorized {
	return &GetIpcsIPCollectionIDUnauthorized{}
}

/*
GetIpcsIPCollectionIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetIpcsIPCollectionIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get ipcs Ip collection Id unauthorized response has a 2xx status code
func (o *GetIpcsIPCollectionIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ipcs Ip collection Id unauthorized response has a 3xx status code
func (o *GetIpcsIPCollectionIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ipcs Ip collection Id unauthorized response has a 4xx status code
func (o *GetIpcsIPCollectionIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ipcs Ip collection Id unauthorized response has a 5xx status code
func (o *GetIpcsIPCollectionIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get ipcs Ip collection Id unauthorized response a status code equal to that given
func (o *GetIpcsIPCollectionIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get ipcs Ip collection Id unauthorized response
func (o *GetIpcsIPCollectionIDUnauthorized) Code() int {
	return 401
}

func (o *GetIpcsIPCollectionIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdUnauthorized %s", 401, payload)
}

func (o *GetIpcsIPCollectionIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdUnauthorized %s", 401, payload)
}

func (o *GetIpcsIPCollectionIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetIpcsIPCollectionIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpcsIPCollectionIDForbidden creates a GetIpcsIPCollectionIDForbidden with default headers values
func NewGetIpcsIPCollectionIDForbidden() *GetIpcsIPCollectionIDForbidden {
	return &GetIpcsIPCollectionIDForbidden{}
}

/*
GetIpcsIPCollectionIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetIpcsIPCollectionIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get ipcs Ip collection Id forbidden response has a 2xx status code
func (o *GetIpcsIPCollectionIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ipcs Ip collection Id forbidden response has a 3xx status code
func (o *GetIpcsIPCollectionIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ipcs Ip collection Id forbidden response has a 4xx status code
func (o *GetIpcsIPCollectionIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ipcs Ip collection Id forbidden response has a 5xx status code
func (o *GetIpcsIPCollectionIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get ipcs Ip collection Id forbidden response a status code equal to that given
func (o *GetIpcsIPCollectionIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get ipcs Ip collection Id forbidden response
func (o *GetIpcsIPCollectionIDForbidden) Code() int {
	return 403
}

func (o *GetIpcsIPCollectionIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdForbidden %s", 403, payload)
}

func (o *GetIpcsIPCollectionIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdForbidden %s", 403, payload)
}

func (o *GetIpcsIPCollectionIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetIpcsIPCollectionIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpcsIPCollectionIDNotFound creates a GetIpcsIPCollectionIDNotFound with default headers values
func NewGetIpcsIPCollectionIDNotFound() *GetIpcsIPCollectionIDNotFound {
	return &GetIpcsIPCollectionIDNotFound{}
}

/*
GetIpcsIPCollectionIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetIpcsIPCollectionIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get ipcs Ip collection Id not found response has a 2xx status code
func (o *GetIpcsIPCollectionIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ipcs Ip collection Id not found response has a 3xx status code
func (o *GetIpcsIPCollectionIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ipcs Ip collection Id not found response has a 4xx status code
func (o *GetIpcsIPCollectionIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ipcs Ip collection Id not found response has a 5xx status code
func (o *GetIpcsIPCollectionIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get ipcs Ip collection Id not found response a status code equal to that given
func (o *GetIpcsIPCollectionIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get ipcs Ip collection Id not found response
func (o *GetIpcsIPCollectionIDNotFound) Code() int {
	return 404
}

func (o *GetIpcsIPCollectionIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdNotFound %s", 404, payload)
}

func (o *GetIpcsIPCollectionIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipcs/{ipCollectionId}][%d] getIpcsIpCollectionIdNotFound %s", 404, payload)
}

func (o *GetIpcsIPCollectionIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetIpcsIPCollectionIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
