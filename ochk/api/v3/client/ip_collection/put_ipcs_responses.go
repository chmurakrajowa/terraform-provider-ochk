// Code generated by go-swagger; DO NOT EDIT.

package ip_collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutIpcsReader is a Reader for the PutIpcs structure.
type PutIpcsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutIpcsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutIpcsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutIpcsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutIpcsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutIpcsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /ipcs] PutIpcs", response, response.Code())
	}
}

// NewPutIpcsOK creates a PutIpcsOK with default headers values
func NewPutIpcsOK() *PutIpcsOK {
	return &PutIpcsOK{}
}

/*
PutIpcsOK describes a response with status code 200, with default header values.

OK
*/
type PutIpcsOK struct {
	Payload *models.CreateIPCollectionResponse
}

// IsSuccess returns true when this put ipcs o k response has a 2xx status code
func (o *PutIpcsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put ipcs o k response has a 3xx status code
func (o *PutIpcsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put ipcs o k response has a 4xx status code
func (o *PutIpcsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put ipcs o k response has a 5xx status code
func (o *PutIpcsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put ipcs o k response a status code equal to that given
func (o *PutIpcsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put ipcs o k response
func (o *PutIpcsOK) Code() int {
	return 200
}

func (o *PutIpcsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /ipcs][%d] putIpcsOK %s", 200, payload)
}

func (o *PutIpcsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /ipcs][%d] putIpcsOK %s", 200, payload)
}

func (o *PutIpcsOK) GetPayload() *models.CreateIPCollectionResponse {
	return o.Payload
}

func (o *PutIpcsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateIPCollectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIpcsBadRequest creates a PutIpcsBadRequest with default headers values
func NewPutIpcsBadRequest() *PutIpcsBadRequest {
	return &PutIpcsBadRequest{}
}

/*
PutIpcsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutIpcsBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put ipcs bad request response has a 2xx status code
func (o *PutIpcsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put ipcs bad request response has a 3xx status code
func (o *PutIpcsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put ipcs bad request response has a 4xx status code
func (o *PutIpcsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put ipcs bad request response has a 5xx status code
func (o *PutIpcsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put ipcs bad request response a status code equal to that given
func (o *PutIpcsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put ipcs bad request response
func (o *PutIpcsBadRequest) Code() int {
	return 400
}

func (o *PutIpcsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /ipcs][%d] putIpcsBadRequest %s", 400, payload)
}

func (o *PutIpcsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /ipcs][%d] putIpcsBadRequest %s", 400, payload)
}

func (o *PutIpcsBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutIpcsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIpcsUnauthorized creates a PutIpcsUnauthorized with default headers values
func NewPutIpcsUnauthorized() *PutIpcsUnauthorized {
	return &PutIpcsUnauthorized{}
}

/*
PutIpcsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutIpcsUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put ipcs unauthorized response has a 2xx status code
func (o *PutIpcsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put ipcs unauthorized response has a 3xx status code
func (o *PutIpcsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put ipcs unauthorized response has a 4xx status code
func (o *PutIpcsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put ipcs unauthorized response has a 5xx status code
func (o *PutIpcsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put ipcs unauthorized response a status code equal to that given
func (o *PutIpcsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put ipcs unauthorized response
func (o *PutIpcsUnauthorized) Code() int {
	return 401
}

func (o *PutIpcsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /ipcs][%d] putIpcsUnauthorized %s", 401, payload)
}

func (o *PutIpcsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /ipcs][%d] putIpcsUnauthorized %s", 401, payload)
}

func (o *PutIpcsUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutIpcsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIpcsForbidden creates a PutIpcsForbidden with default headers values
func NewPutIpcsForbidden() *PutIpcsForbidden {
	return &PutIpcsForbidden{}
}

/*
PutIpcsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutIpcsForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put ipcs forbidden response has a 2xx status code
func (o *PutIpcsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put ipcs forbidden response has a 3xx status code
func (o *PutIpcsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put ipcs forbidden response has a 4xx status code
func (o *PutIpcsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put ipcs forbidden response has a 5xx status code
func (o *PutIpcsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put ipcs forbidden response a status code equal to that given
func (o *PutIpcsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put ipcs forbidden response
func (o *PutIpcsForbidden) Code() int {
	return 403
}

func (o *PutIpcsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /ipcs][%d] putIpcsForbidden %s", 403, payload)
}

func (o *PutIpcsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /ipcs][%d] putIpcsForbidden %s", 403, payload)
}

func (o *PutIpcsForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutIpcsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
