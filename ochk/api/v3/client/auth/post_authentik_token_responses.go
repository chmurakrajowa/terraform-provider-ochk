// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PostAuthentikTokenReader is a Reader for the PostAuthentikToken structure.
type PostAuthentikTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthentikTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAuthentikTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuthentikTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuthentikTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAuthentikTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /authentik/token] PostAuthentikToken", response, response.Code())
	}
}

// NewPostAuthentikTokenOK creates a PostAuthentikTokenOK with default headers values
func NewPostAuthentikTokenOK() *PostAuthentikTokenOK {
	return &PostAuthentikTokenOK{}
}

/*
PostAuthentikTokenOK describes a response with status code 200, with default header values.

OK
*/
type PostAuthentikTokenOK struct {
	Payload *models.AuthentikTokenResponse
}

// IsSuccess returns true when this post authentik token o k response has a 2xx status code
func (o *PostAuthentikTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post authentik token o k response has a 3xx status code
func (o *PostAuthentikTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authentik token o k response has a 4xx status code
func (o *PostAuthentikTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authentik token o k response has a 5xx status code
func (o *PostAuthentikTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post authentik token o k response a status code equal to that given
func (o *PostAuthentikTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post authentik token o k response
func (o *PostAuthentikTokenOK) Code() int {
	return 200
}

func (o *PostAuthentikTokenOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/token][%d] postAuthentikTokenOK %s", 200, payload)
}

func (o *PostAuthentikTokenOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/token][%d] postAuthentikTokenOK %s", 200, payload)
}

func (o *PostAuthentikTokenOK) GetPayload() *models.AuthentikTokenResponse {
	return o.Payload
}

func (o *PostAuthentikTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthentikTokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthentikTokenBadRequest creates a PostAuthentikTokenBadRequest with default headers values
func NewPostAuthentikTokenBadRequest() *PostAuthentikTokenBadRequest {
	return &PostAuthentikTokenBadRequest{}
}

/*
PostAuthentikTokenBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostAuthentikTokenBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post authentik token bad request response has a 2xx status code
func (o *PostAuthentikTokenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authentik token bad request response has a 3xx status code
func (o *PostAuthentikTokenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authentik token bad request response has a 4xx status code
func (o *PostAuthentikTokenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authentik token bad request response has a 5xx status code
func (o *PostAuthentikTokenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post authentik token bad request response a status code equal to that given
func (o *PostAuthentikTokenBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post authentik token bad request response
func (o *PostAuthentikTokenBadRequest) Code() int {
	return 400
}

func (o *PostAuthentikTokenBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/token][%d] postAuthentikTokenBadRequest %s", 400, payload)
}

func (o *PostAuthentikTokenBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/token][%d] postAuthentikTokenBadRequest %s", 400, payload)
}

func (o *PostAuthentikTokenBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostAuthentikTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthentikTokenUnauthorized creates a PostAuthentikTokenUnauthorized with default headers values
func NewPostAuthentikTokenUnauthorized() *PostAuthentikTokenUnauthorized {
	return &PostAuthentikTokenUnauthorized{}
}

/*
PostAuthentikTokenUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostAuthentikTokenUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post authentik token unauthorized response has a 2xx status code
func (o *PostAuthentikTokenUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authentik token unauthorized response has a 3xx status code
func (o *PostAuthentikTokenUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authentik token unauthorized response has a 4xx status code
func (o *PostAuthentikTokenUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authentik token unauthorized response has a 5xx status code
func (o *PostAuthentikTokenUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post authentik token unauthorized response a status code equal to that given
func (o *PostAuthentikTokenUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post authentik token unauthorized response
func (o *PostAuthentikTokenUnauthorized) Code() int {
	return 401
}

func (o *PostAuthentikTokenUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/token][%d] postAuthentikTokenUnauthorized %s", 401, payload)
}

func (o *PostAuthentikTokenUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/token][%d] postAuthentikTokenUnauthorized %s", 401, payload)
}

func (o *PostAuthentikTokenUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostAuthentikTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthentikTokenForbidden creates a PostAuthentikTokenForbidden with default headers values
func NewPostAuthentikTokenForbidden() *PostAuthentikTokenForbidden {
	return &PostAuthentikTokenForbidden{}
}

/*
PostAuthentikTokenForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostAuthentikTokenForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post authentik token forbidden response has a 2xx status code
func (o *PostAuthentikTokenForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authentik token forbidden response has a 3xx status code
func (o *PostAuthentikTokenForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authentik token forbidden response has a 4xx status code
func (o *PostAuthentikTokenForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authentik token forbidden response has a 5xx status code
func (o *PostAuthentikTokenForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post authentik token forbidden response a status code equal to that given
func (o *PostAuthentikTokenForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post authentik token forbidden response
func (o *PostAuthentikTokenForbidden) Code() int {
	return 403
}

func (o *PostAuthentikTokenForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/token][%d] postAuthentikTokenForbidden %s", 403, payload)
}

func (o *PostAuthentikTokenForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authentik/token][%d] postAuthentikTokenForbidden %s", 403, payload)
}

func (o *PostAuthentikTokenForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostAuthentikTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
