// Code generated by go-swagger; DO NOT EDIT.

package log_stats_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PostLogStatsUserReader is a Reader for the PostLogStatsUser structure.
type PostLogStatsUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLogStatsUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostLogStatsUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLogStatsUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostLogStatsUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostLogStatsUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /log/stats/user] PostLogStatsUser", response, response.Code())
	}
}

// NewPostLogStatsUserOK creates a PostLogStatsUserOK with default headers values
func NewPostLogStatsUserOK() *PostLogStatsUserOK {
	return &PostLogStatsUserOK{}
}

/*
PostLogStatsUserOK describes a response with status code 200, with default header values.

OK
*/
type PostLogStatsUserOK struct {
	Payload *models.GetLogStats
}

// IsSuccess returns true when this post log stats user o k response has a 2xx status code
func (o *PostLogStatsUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post log stats user o k response has a 3xx status code
func (o *PostLogStatsUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats user o k response has a 4xx status code
func (o *PostLogStatsUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post log stats user o k response has a 5xx status code
func (o *PostLogStatsUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats user o k response a status code equal to that given
func (o *PostLogStatsUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post log stats user o k response
func (o *PostLogStatsUserOK) Code() int {
	return 200
}

func (o *PostLogStatsUserOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/user][%d] postLogStatsUserOK %s", 200, payload)
}

func (o *PostLogStatsUserOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/user][%d] postLogStatsUserOK %s", 200, payload)
}

func (o *PostLogStatsUserOK) GetPayload() *models.GetLogStats {
	return o.Payload
}

func (o *PostLogStatsUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetLogStats)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogStatsUserBadRequest creates a PostLogStatsUserBadRequest with default headers values
func NewPostLogStatsUserBadRequest() *PostLogStatsUserBadRequest {
	return &PostLogStatsUserBadRequest{}
}

/*
PostLogStatsUserBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostLogStatsUserBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post log stats user bad request response has a 2xx status code
func (o *PostLogStatsUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post log stats user bad request response has a 3xx status code
func (o *PostLogStatsUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats user bad request response has a 4xx status code
func (o *PostLogStatsUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post log stats user bad request response has a 5xx status code
func (o *PostLogStatsUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats user bad request response a status code equal to that given
func (o *PostLogStatsUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post log stats user bad request response
func (o *PostLogStatsUserBadRequest) Code() int {
	return 400
}

func (o *PostLogStatsUserBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/user][%d] postLogStatsUserBadRequest %s", 400, payload)
}

func (o *PostLogStatsUserBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/user][%d] postLogStatsUserBadRequest %s", 400, payload)
}

func (o *PostLogStatsUserBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostLogStatsUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogStatsUserUnauthorized creates a PostLogStatsUserUnauthorized with default headers values
func NewPostLogStatsUserUnauthorized() *PostLogStatsUserUnauthorized {
	return &PostLogStatsUserUnauthorized{}
}

/*
PostLogStatsUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostLogStatsUserUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post log stats user unauthorized response has a 2xx status code
func (o *PostLogStatsUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post log stats user unauthorized response has a 3xx status code
func (o *PostLogStatsUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats user unauthorized response has a 4xx status code
func (o *PostLogStatsUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post log stats user unauthorized response has a 5xx status code
func (o *PostLogStatsUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats user unauthorized response a status code equal to that given
func (o *PostLogStatsUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post log stats user unauthorized response
func (o *PostLogStatsUserUnauthorized) Code() int {
	return 401
}

func (o *PostLogStatsUserUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/user][%d] postLogStatsUserUnauthorized %s", 401, payload)
}

func (o *PostLogStatsUserUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/user][%d] postLogStatsUserUnauthorized %s", 401, payload)
}

func (o *PostLogStatsUserUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostLogStatsUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogStatsUserForbidden creates a PostLogStatsUserForbidden with default headers values
func NewPostLogStatsUserForbidden() *PostLogStatsUserForbidden {
	return &PostLogStatsUserForbidden{}
}

/*
PostLogStatsUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostLogStatsUserForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post log stats user forbidden response has a 2xx status code
func (o *PostLogStatsUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post log stats user forbidden response has a 3xx status code
func (o *PostLogStatsUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log stats user forbidden response has a 4xx status code
func (o *PostLogStatsUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post log stats user forbidden response has a 5xx status code
func (o *PostLogStatsUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post log stats user forbidden response a status code equal to that given
func (o *PostLogStatsUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post log stats user forbidden response
func (o *PostLogStatsUserForbidden) Code() int {
	return 403
}

func (o *PostLogStatsUserForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/user][%d] postLogStatsUserForbidden %s", 403, payload)
}

func (o *PostLogStatsUserForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log/stats/user][%d] postLogStatsUserForbidden %s", 403, payload)
}

func (o *PostLogStatsUserForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostLogStatsUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
