// Code generated by go-swagger; DO NOT EDIT.

package floating_ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetNetworkFloatingIpsFloatingIPIDReader is a Reader for the GetNetworkFloatingIpsFloatingIPID structure.
type GetNetworkFloatingIpsFloatingIPIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkFloatingIpsFloatingIPIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkFloatingIpsFloatingIPIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworkFloatingIpsFloatingIPIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworkFloatingIpsFloatingIPIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNetworkFloatingIpsFloatingIPIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /network/floating-ips/{floatingIpId}] GetNetworkFloatingIpsFloatingIPID", response, response.Code())
	}
}

// NewGetNetworkFloatingIpsFloatingIPIDOK creates a GetNetworkFloatingIpsFloatingIPIDOK with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDOK() *GetNetworkFloatingIpsFloatingIPIDOK {
	return &GetNetworkFloatingIpsFloatingIPIDOK{}
}

/*
GetNetworkFloatingIpsFloatingIPIDOK describes a response with status code 200, with default header values.

OK
*/
type GetNetworkFloatingIpsFloatingIPIDOK struct {
	Payload *models.GetFloatingIPResponse
}

// IsSuccess returns true when this get network floating ips floating Ip Id o k response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network floating ips floating Ip Id o k response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id o k response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network floating ips floating Ip Id o k response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id o k response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network floating ips floating Ip Id o k response
func (o *GetNetworkFloatingIpsFloatingIPIDOK) Code() int {
	return 200
}

func (o *GetNetworkFloatingIpsFloatingIPIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}][%d] getNetworkFloatingIpsFloatingIpIdOK %s", 200, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}][%d] getNetworkFloatingIpsFloatingIpIdOK %s", 200, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDOK) GetPayload() *models.GetFloatingIPResponse {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetFloatingIPResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsFloatingIPIDBadRequest creates a GetNetworkFloatingIpsFloatingIPIDBadRequest with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDBadRequest() *GetNetworkFloatingIpsFloatingIPIDBadRequest {
	return &GetNetworkFloatingIpsFloatingIPIDBadRequest{}
}

/*
GetNetworkFloatingIpsFloatingIPIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNetworkFloatingIpsFloatingIPIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips floating Ip Id bad request response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips floating Ip Id bad request response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id bad request response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips floating Ip Id bad request response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id bad request response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get network floating ips floating Ip Id bad request response
func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) Code() int {
	return 400
}

func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}][%d] getNetworkFloatingIpsFloatingIpIdBadRequest %s", 400, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}][%d] getNetworkFloatingIpsFloatingIpIdBadRequest %s", 400, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsFloatingIPIDUnauthorized creates a GetNetworkFloatingIpsFloatingIPIDUnauthorized with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDUnauthorized() *GetNetworkFloatingIpsFloatingIPIDUnauthorized {
	return &GetNetworkFloatingIpsFloatingIPIDUnauthorized{}
}

/*
GetNetworkFloatingIpsFloatingIPIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNetworkFloatingIpsFloatingIPIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips floating Ip Id unauthorized response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips floating Ip Id unauthorized response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id unauthorized response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips floating Ip Id unauthorized response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id unauthorized response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get network floating ips floating Ip Id unauthorized response
func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) Code() int {
	return 401
}

func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}][%d] getNetworkFloatingIpsFloatingIpIdUnauthorized %s", 401, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}][%d] getNetworkFloatingIpsFloatingIpIdUnauthorized %s", 401, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsFloatingIPIDForbidden creates a GetNetworkFloatingIpsFloatingIPIDForbidden with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDForbidden() *GetNetworkFloatingIpsFloatingIPIDForbidden {
	return &GetNetworkFloatingIpsFloatingIPIDForbidden{}
}

/*
GetNetworkFloatingIpsFloatingIPIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNetworkFloatingIpsFloatingIPIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips floating Ip Id forbidden response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips floating Ip Id forbidden response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id forbidden response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips floating Ip Id forbidden response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id forbidden response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get network floating ips floating Ip Id forbidden response
func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) Code() int {
	return 403
}

func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}][%d] getNetworkFloatingIpsFloatingIpIdForbidden %s", 403, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}][%d] getNetworkFloatingIpsFloatingIpIdForbidden %s", 403, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
