// Code generated by go-swagger; DO NOT EDIT.

package floating_ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutNetworkFloatingIpsFloatingIPIDReader is a Reader for the PutNetworkFloatingIpsFloatingIPID structure.
type PutNetworkFloatingIpsFloatingIPIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutNetworkFloatingIpsFloatingIPIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutNetworkFloatingIpsFloatingIPIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutNetworkFloatingIpsFloatingIPIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutNetworkFloatingIpsFloatingIPIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutNetworkFloatingIpsFloatingIPIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /network/floating-ips/{floatingIpId}] PutNetworkFloatingIpsFloatingIPID", response, response.Code())
	}
}

// NewPutNetworkFloatingIpsFloatingIPIDOK creates a PutNetworkFloatingIpsFloatingIPIDOK with default headers values
func NewPutNetworkFloatingIpsFloatingIPIDOK() *PutNetworkFloatingIpsFloatingIPIDOK {
	return &PutNetworkFloatingIpsFloatingIPIDOK{}
}

/*
PutNetworkFloatingIpsFloatingIPIDOK describes a response with status code 200, with default header values.

OK
*/
type PutNetworkFloatingIpsFloatingIPIDOK struct {
	Payload *models.UpdateFloatingIPResponse
}

// IsSuccess returns true when this put network floating ips floating Ip Id o k response has a 2xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put network floating ips floating Ip Id o k response has a 3xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips floating Ip Id o k response has a 4xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put network floating ips floating Ip Id o k response has a 5xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips floating Ip Id o k response a status code equal to that given
func (o *PutNetworkFloatingIpsFloatingIPIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put network floating ips floating Ip Id o k response
func (o *PutNetworkFloatingIpsFloatingIPIDOK) Code() int {
	return 200
}

func (o *PutNetworkFloatingIpsFloatingIPIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}][%d] putNetworkFloatingIpsFloatingIpIdOK %s", 200, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}][%d] putNetworkFloatingIpsFloatingIpIdOK %s", 200, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDOK) GetPayload() *models.UpdateFloatingIPResponse {
	return o.Payload
}

func (o *PutNetworkFloatingIpsFloatingIPIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateFloatingIPResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkFloatingIpsFloatingIPIDBadRequest creates a PutNetworkFloatingIpsFloatingIPIDBadRequest with default headers values
func NewPutNetworkFloatingIpsFloatingIPIDBadRequest() *PutNetworkFloatingIpsFloatingIPIDBadRequest {
	return &PutNetworkFloatingIpsFloatingIPIDBadRequest{}
}

/*
PutNetworkFloatingIpsFloatingIPIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutNetworkFloatingIpsFloatingIPIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network floating ips floating Ip Id bad request response has a 2xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network floating ips floating Ip Id bad request response has a 3xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips floating Ip Id bad request response has a 4xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network floating ips floating Ip Id bad request response has a 5xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips floating Ip Id bad request response a status code equal to that given
func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put network floating ips floating Ip Id bad request response
func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) Code() int {
	return 400
}

func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}][%d] putNetworkFloatingIpsFloatingIpIdBadRequest %s", 400, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}][%d] putNetworkFloatingIpsFloatingIpIdBadRequest %s", 400, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkFloatingIpsFloatingIPIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkFloatingIpsFloatingIPIDUnauthorized creates a PutNetworkFloatingIpsFloatingIPIDUnauthorized with default headers values
func NewPutNetworkFloatingIpsFloatingIPIDUnauthorized() *PutNetworkFloatingIpsFloatingIPIDUnauthorized {
	return &PutNetworkFloatingIpsFloatingIPIDUnauthorized{}
}

/*
PutNetworkFloatingIpsFloatingIPIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutNetworkFloatingIpsFloatingIPIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network floating ips floating Ip Id unauthorized response has a 2xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network floating ips floating Ip Id unauthorized response has a 3xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips floating Ip Id unauthorized response has a 4xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network floating ips floating Ip Id unauthorized response has a 5xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips floating Ip Id unauthorized response a status code equal to that given
func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put network floating ips floating Ip Id unauthorized response
func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) Code() int {
	return 401
}

func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}][%d] putNetworkFloatingIpsFloatingIpIdUnauthorized %s", 401, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}][%d] putNetworkFloatingIpsFloatingIpIdUnauthorized %s", 401, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkFloatingIpsFloatingIPIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkFloatingIpsFloatingIPIDForbidden creates a PutNetworkFloatingIpsFloatingIPIDForbidden with default headers values
func NewPutNetworkFloatingIpsFloatingIPIDForbidden() *PutNetworkFloatingIpsFloatingIPIDForbidden {
	return &PutNetworkFloatingIpsFloatingIPIDForbidden{}
}

/*
PutNetworkFloatingIpsFloatingIPIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutNetworkFloatingIpsFloatingIPIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network floating ips floating Ip Id forbidden response has a 2xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network floating ips floating Ip Id forbidden response has a 3xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips floating Ip Id forbidden response has a 4xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network floating ips floating Ip Id forbidden response has a 5xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips floating Ip Id forbidden response a status code equal to that given
func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put network floating ips floating Ip Id forbidden response
func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) Code() int {
	return 403
}

func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}][%d] putNetworkFloatingIpsFloatingIpIdForbidden %s", 403, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}][%d] putNetworkFloatingIpsFloatingIpIdForbidden %s", 403, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkFloatingIpsFloatingIPIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
