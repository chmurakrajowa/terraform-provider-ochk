// Code generated by go-swagger; DO NOT EDIT.

package floating_ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// DeleteNetworkFloatingIpsFloatingIPIDReader is a Reader for the DeleteNetworkFloatingIpsFloatingIPID structure.
type DeleteNetworkFloatingIpsFloatingIPIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNetworkFloatingIpsFloatingIPIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNetworkFloatingIpsFloatingIPIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteNetworkFloatingIpsFloatingIPIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteNetworkFloatingIpsFloatingIPIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteNetworkFloatingIpsFloatingIPIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /network/floating-ips/{floatingIpId}] DeleteNetworkFloatingIpsFloatingIPID", response, response.Code())
	}
}

// NewDeleteNetworkFloatingIpsFloatingIPIDOK creates a DeleteNetworkFloatingIpsFloatingIPIDOK with default headers values
func NewDeleteNetworkFloatingIpsFloatingIPIDOK() *DeleteNetworkFloatingIpsFloatingIPIDOK {
	return &DeleteNetworkFloatingIpsFloatingIPIDOK{}
}

/*
DeleteNetworkFloatingIpsFloatingIPIDOK describes a response with status code 200, with default header values.

OK
*/
type DeleteNetworkFloatingIpsFloatingIPIDOK struct {
	Payload *models.DeleteFloatingIPResponse
}

// IsSuccess returns true when this delete network floating ips floating Ip Id o k response has a 2xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete network floating ips floating Ip Id o k response has a 3xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network floating ips floating Ip Id o k response has a 4xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete network floating ips floating Ip Id o k response has a 5xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network floating ips floating Ip Id o k response a status code equal to that given
func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete network floating ips floating Ip Id o k response
func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) Code() int {
	return 200
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}][%d] deleteNetworkFloatingIpsFloatingIpIdOK %s", 200, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}][%d] deleteNetworkFloatingIpsFloatingIpIdOK %s", 200, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) GetPayload() *models.DeleteFloatingIPResponse {
	return o.Payload
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteFloatingIPResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkFloatingIpsFloatingIPIDBadRequest creates a DeleteNetworkFloatingIpsFloatingIPIDBadRequest with default headers values
func NewDeleteNetworkFloatingIpsFloatingIPIDBadRequest() *DeleteNetworkFloatingIpsFloatingIPIDBadRequest {
	return &DeleteNetworkFloatingIpsFloatingIPIDBadRequest{}
}

/*
DeleteNetworkFloatingIpsFloatingIPIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteNetworkFloatingIpsFloatingIPIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network floating ips floating Ip Id bad request response has a 2xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network floating ips floating Ip Id bad request response has a 3xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network floating ips floating Ip Id bad request response has a 4xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network floating ips floating Ip Id bad request response has a 5xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network floating ips floating Ip Id bad request response a status code equal to that given
func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete network floating ips floating Ip Id bad request response
func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) Code() int {
	return 400
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}][%d] deleteNetworkFloatingIpsFloatingIpIdBadRequest %s", 400, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}][%d] deleteNetworkFloatingIpsFloatingIpIdBadRequest %s", 400, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkFloatingIpsFloatingIPIDUnauthorized creates a DeleteNetworkFloatingIpsFloatingIPIDUnauthorized with default headers values
func NewDeleteNetworkFloatingIpsFloatingIPIDUnauthorized() *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized {
	return &DeleteNetworkFloatingIpsFloatingIPIDUnauthorized{}
}

/*
DeleteNetworkFloatingIpsFloatingIPIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteNetworkFloatingIpsFloatingIPIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network floating ips floating Ip Id unauthorized response has a 2xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network floating ips floating Ip Id unauthorized response has a 3xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network floating ips floating Ip Id unauthorized response has a 4xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network floating ips floating Ip Id unauthorized response has a 5xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network floating ips floating Ip Id unauthorized response a status code equal to that given
func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete network floating ips floating Ip Id unauthorized response
func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) Code() int {
	return 401
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}][%d] deleteNetworkFloatingIpsFloatingIpIdUnauthorized %s", 401, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}][%d] deleteNetworkFloatingIpsFloatingIpIdUnauthorized %s", 401, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkFloatingIpsFloatingIPIDForbidden creates a DeleteNetworkFloatingIpsFloatingIPIDForbidden with default headers values
func NewDeleteNetworkFloatingIpsFloatingIPIDForbidden() *DeleteNetworkFloatingIpsFloatingIPIDForbidden {
	return &DeleteNetworkFloatingIpsFloatingIPIDForbidden{}
}

/*
DeleteNetworkFloatingIpsFloatingIPIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteNetworkFloatingIpsFloatingIPIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network floating ips floating Ip Id forbidden response has a 2xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network floating ips floating Ip Id forbidden response has a 3xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network floating ips floating Ip Id forbidden response has a 4xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network floating ips floating Ip Id forbidden response has a 5xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network floating ips floating Ip Id forbidden response a status code equal to that given
func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete network floating ips floating Ip Id forbidden response
func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) Code() int {
	return 403
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}][%d] deleteNetworkFloatingIpsFloatingIpIdForbidden %s", 403, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}][%d] deleteNetworkFloatingIpsFloatingIpIdForbidden %s", 403, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
