// Code generated by go-swagger; DO NOT EDIT.

package floating_ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutNetworkFloatingIpsReader is a Reader for the PutNetworkFloatingIps structure.
type PutNetworkFloatingIpsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutNetworkFloatingIpsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutNetworkFloatingIpsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutNetworkFloatingIpsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutNetworkFloatingIpsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutNetworkFloatingIpsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /network/floating-ips] PutNetworkFloatingIps", response, response.Code())
	}
}

// NewPutNetworkFloatingIpsOK creates a PutNetworkFloatingIpsOK with default headers values
func NewPutNetworkFloatingIpsOK() *PutNetworkFloatingIpsOK {
	return &PutNetworkFloatingIpsOK{}
}

/*
PutNetworkFloatingIpsOK describes a response with status code 200, with default header values.

OK
*/
type PutNetworkFloatingIpsOK struct {
	Payload *models.CreateFloatingIPResponse
}

// IsSuccess returns true when this put network floating ips o k response has a 2xx status code
func (o *PutNetworkFloatingIpsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put network floating ips o k response has a 3xx status code
func (o *PutNetworkFloatingIpsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips o k response has a 4xx status code
func (o *PutNetworkFloatingIpsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put network floating ips o k response has a 5xx status code
func (o *PutNetworkFloatingIpsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips o k response a status code equal to that given
func (o *PutNetworkFloatingIpsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put network floating ips o k response
func (o *PutNetworkFloatingIpsOK) Code() int {
	return 200
}

func (o *PutNetworkFloatingIpsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips][%d] putNetworkFloatingIpsOK %s", 200, payload)
}

func (o *PutNetworkFloatingIpsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips][%d] putNetworkFloatingIpsOK %s", 200, payload)
}

func (o *PutNetworkFloatingIpsOK) GetPayload() *models.CreateFloatingIPResponse {
	return o.Payload
}

func (o *PutNetworkFloatingIpsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateFloatingIPResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkFloatingIpsBadRequest creates a PutNetworkFloatingIpsBadRequest with default headers values
func NewPutNetworkFloatingIpsBadRequest() *PutNetworkFloatingIpsBadRequest {
	return &PutNetworkFloatingIpsBadRequest{}
}

/*
PutNetworkFloatingIpsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutNetworkFloatingIpsBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network floating ips bad request response has a 2xx status code
func (o *PutNetworkFloatingIpsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network floating ips bad request response has a 3xx status code
func (o *PutNetworkFloatingIpsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips bad request response has a 4xx status code
func (o *PutNetworkFloatingIpsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network floating ips bad request response has a 5xx status code
func (o *PutNetworkFloatingIpsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips bad request response a status code equal to that given
func (o *PutNetworkFloatingIpsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put network floating ips bad request response
func (o *PutNetworkFloatingIpsBadRequest) Code() int {
	return 400
}

func (o *PutNetworkFloatingIpsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips][%d] putNetworkFloatingIpsBadRequest %s", 400, payload)
}

func (o *PutNetworkFloatingIpsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips][%d] putNetworkFloatingIpsBadRequest %s", 400, payload)
}

func (o *PutNetworkFloatingIpsBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkFloatingIpsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkFloatingIpsUnauthorized creates a PutNetworkFloatingIpsUnauthorized with default headers values
func NewPutNetworkFloatingIpsUnauthorized() *PutNetworkFloatingIpsUnauthorized {
	return &PutNetworkFloatingIpsUnauthorized{}
}

/*
PutNetworkFloatingIpsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutNetworkFloatingIpsUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network floating ips unauthorized response has a 2xx status code
func (o *PutNetworkFloatingIpsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network floating ips unauthorized response has a 3xx status code
func (o *PutNetworkFloatingIpsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips unauthorized response has a 4xx status code
func (o *PutNetworkFloatingIpsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network floating ips unauthorized response has a 5xx status code
func (o *PutNetworkFloatingIpsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips unauthorized response a status code equal to that given
func (o *PutNetworkFloatingIpsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put network floating ips unauthorized response
func (o *PutNetworkFloatingIpsUnauthorized) Code() int {
	return 401
}

func (o *PutNetworkFloatingIpsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips][%d] putNetworkFloatingIpsUnauthorized %s", 401, payload)
}

func (o *PutNetworkFloatingIpsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips][%d] putNetworkFloatingIpsUnauthorized %s", 401, payload)
}

func (o *PutNetworkFloatingIpsUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkFloatingIpsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkFloatingIpsForbidden creates a PutNetworkFloatingIpsForbidden with default headers values
func NewPutNetworkFloatingIpsForbidden() *PutNetworkFloatingIpsForbidden {
	return &PutNetworkFloatingIpsForbidden{}
}

/*
PutNetworkFloatingIpsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutNetworkFloatingIpsForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network floating ips forbidden response has a 2xx status code
func (o *PutNetworkFloatingIpsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network floating ips forbidden response has a 3xx status code
func (o *PutNetworkFloatingIpsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips forbidden response has a 4xx status code
func (o *PutNetworkFloatingIpsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network floating ips forbidden response has a 5xx status code
func (o *PutNetworkFloatingIpsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips forbidden response a status code equal to that given
func (o *PutNetworkFloatingIpsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put network floating ips forbidden response
func (o *PutNetworkFloatingIpsForbidden) Code() int {
	return 403
}

func (o *PutNetworkFloatingIpsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips][%d] putNetworkFloatingIpsForbidden %s", 403, payload)
}

func (o *PutNetworkFloatingIpsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips][%d] putNetworkFloatingIpsForbidden %s", 403, payload)
}

func (o *PutNetworkFloatingIpsForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkFloatingIpsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
