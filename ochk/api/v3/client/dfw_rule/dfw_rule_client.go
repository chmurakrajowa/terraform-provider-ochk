// Code generated by go-swagger; DO NOT EDIT.

package dfw_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new dfw rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new dfw rule API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new dfw rule API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for dfw rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationStarJSON sets the Content-Type header to "application/*+json".
func WithContentTypeApplicationStarJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/*+json"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteNetworkRoutersRouterIDRulesEWRuleID(params *DeleteNetworkRoutersRouterIDRulesEWRuleIDParams, opts ...ClientOption) (*DeleteNetworkRoutersRouterIDRulesEWRuleIDOK, error)

	GetNetworkRoutersRouterIDRulesEW(params *GetNetworkRoutersRouterIDRulesEWParams, opts ...ClientOption) (*GetNetworkRoutersRouterIDRulesEWOK, error)

	GetNetworkRoutersRouterIDRulesEWRuleID(params *GetNetworkRoutersRouterIDRulesEWRuleIDParams, opts ...ClientOption) (*GetNetworkRoutersRouterIDRulesEWRuleIDOK, error)

	PutNetworkRoutersRouterIDRulesEW(params *PutNetworkRoutersRouterIDRulesEWParams, opts ...ClientOption) (*PutNetworkRoutersRouterIDRulesEWOK, error)

	PutNetworkRoutersRouterIDRulesEWRuleID(params *PutNetworkRoutersRouterIDRulesEWRuleIDParams, opts ...ClientOption) (*PutNetworkRoutersRouterIDRulesEWRuleIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteNetworkRoutersRouterIDRulesEWRuleID deletes e w rule

Delete E-W Rule
*/
func (a *Client) DeleteNetworkRoutersRouterIDRulesEWRuleID(params *DeleteNetworkRoutersRouterIDRulesEWRuleIDParams, opts ...ClientOption) (*DeleteNetworkRoutersRouterIDRulesEWRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkRoutersRouterIDRulesEWRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNetworkRoutersRouterIDRulesEWRuleID",
		Method:             "DELETE",
		PathPattern:        "/network/routers/{routerId}/rules/e-w/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkRoutersRouterIDRulesEWRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkRoutersRouterIDRulesEWRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNetworkRoutersRouterIDRulesEWRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetworkRoutersRouterIDRulesEW lists e w rules

List E-W Rules
*/
func (a *Client) GetNetworkRoutersRouterIDRulesEW(params *GetNetworkRoutersRouterIDRulesEWParams, opts ...ClientOption) (*GetNetworkRoutersRouterIDRulesEWOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkRoutersRouterIDRulesEWParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetworkRoutersRouterIDRulesEW",
		Method:             "GET",
		PathPattern:        "/network/routers/{routerId}/rules/e-w",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkRoutersRouterIDRulesEWReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkRoutersRouterIDRulesEWOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNetworkRoutersRouterIDRulesEW: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetworkRoutersRouterIDRulesEWRuleID gets e w rule

Get E-W Rule
*/
func (a *Client) GetNetworkRoutersRouterIDRulesEWRuleID(params *GetNetworkRoutersRouterIDRulesEWRuleIDParams, opts ...ClientOption) (*GetNetworkRoutersRouterIDRulesEWRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkRoutersRouterIDRulesEWRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetworkRoutersRouterIDRulesEWRuleID",
		Method:             "GET",
		PathPattern:        "/network/routers/{routerId}/rules/e-w/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkRoutersRouterIDRulesEWRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkRoutersRouterIDRulesEWRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNetworkRoutersRouterIDRulesEWRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutNetworkRoutersRouterIDRulesEW creates e w rule

Create E-W Rule
*/
func (a *Client) PutNetworkRoutersRouterIDRulesEW(params *PutNetworkRoutersRouterIDRulesEWParams, opts ...ClientOption) (*PutNetworkRoutersRouterIDRulesEWOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworkRoutersRouterIDRulesEWParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutNetworkRoutersRouterIDRulesEW",
		Method:             "PUT",
		PathPattern:        "/network/routers/{routerId}/rules/e-w",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNetworkRoutersRouterIDRulesEWReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworkRoutersRouterIDRulesEWOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutNetworkRoutersRouterIDRulesEW: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutNetworkRoutersRouterIDRulesEWRuleID updates e w rule

Update E-W Rule
*/
func (a *Client) PutNetworkRoutersRouterIDRulesEWRuleID(params *PutNetworkRoutersRouterIDRulesEWRuleIDParams, opts ...ClientOption) (*PutNetworkRoutersRouterIDRulesEWRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworkRoutersRouterIDRulesEWRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutNetworkRoutersRouterIDRulesEWRuleID",
		Method:             "PUT",
		PathPattern:        "/network/routers/{routerId}/rules/e-w/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNetworkRoutersRouterIDRulesEWRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworkRoutersRouterIDRulesEWRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutNetworkRoutersRouterIDRulesEWRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
