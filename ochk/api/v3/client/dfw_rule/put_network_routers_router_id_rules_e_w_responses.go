// Code generated by go-swagger; DO NOT EDIT.

package dfw_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutNetworkRoutersRouterIDRulesEWReader is a Reader for the PutNetworkRoutersRouterIDRulesEW structure.
type PutNetworkRoutersRouterIDRulesEWReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutNetworkRoutersRouterIDRulesEWReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutNetworkRoutersRouterIDRulesEWOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutNetworkRoutersRouterIDRulesEWBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutNetworkRoutersRouterIDRulesEWUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutNetworkRoutersRouterIDRulesEWForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /network/routers/{routerId}/rules/e-w] PutNetworkRoutersRouterIDRulesEW", response, response.Code())
	}
}

// NewPutNetworkRoutersRouterIDRulesEWOK creates a PutNetworkRoutersRouterIDRulesEWOK with default headers values
func NewPutNetworkRoutersRouterIDRulesEWOK() *PutNetworkRoutersRouterIDRulesEWOK {
	return &PutNetworkRoutersRouterIDRulesEWOK{}
}

/*
PutNetworkRoutersRouterIDRulesEWOK describes a response with status code 200, with default header values.

OK
*/
type PutNetworkRoutersRouterIDRulesEWOK struct {
	Payload *models.CreateDfwRuleResponse
}

// IsSuccess returns true when this put network routers router Id rules e w o k response has a 2xx status code
func (o *PutNetworkRoutersRouterIDRulesEWOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put network routers router Id rules e w o k response has a 3xx status code
func (o *PutNetworkRoutersRouterIDRulesEWOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network routers router Id rules e w o k response has a 4xx status code
func (o *PutNetworkRoutersRouterIDRulesEWOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put network routers router Id rules e w o k response has a 5xx status code
func (o *PutNetworkRoutersRouterIDRulesEWOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put network routers router Id rules e w o k response a status code equal to that given
func (o *PutNetworkRoutersRouterIDRulesEWOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put network routers router Id rules e w o k response
func (o *PutNetworkRoutersRouterIDRulesEWOK) Code() int {
	return 200
}

func (o *PutNetworkRoutersRouterIDRulesEWOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w][%d] putNetworkRoutersRouterIdRulesEWOK %s", 200, payload)
}

func (o *PutNetworkRoutersRouterIDRulesEWOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w][%d] putNetworkRoutersRouterIdRulesEWOK %s", 200, payload)
}

func (o *PutNetworkRoutersRouterIDRulesEWOK) GetPayload() *models.CreateDfwRuleResponse {
	return o.Payload
}

func (o *PutNetworkRoutersRouterIDRulesEWOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateDfwRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkRoutersRouterIDRulesEWBadRequest creates a PutNetworkRoutersRouterIDRulesEWBadRequest with default headers values
func NewPutNetworkRoutersRouterIDRulesEWBadRequest() *PutNetworkRoutersRouterIDRulesEWBadRequest {
	return &PutNetworkRoutersRouterIDRulesEWBadRequest{}
}

/*
PutNetworkRoutersRouterIDRulesEWBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutNetworkRoutersRouterIDRulesEWBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network routers router Id rules e w bad request response has a 2xx status code
func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network routers router Id rules e w bad request response has a 3xx status code
func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network routers router Id rules e w bad request response has a 4xx status code
func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network routers router Id rules e w bad request response has a 5xx status code
func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put network routers router Id rules e w bad request response a status code equal to that given
func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put network routers router Id rules e w bad request response
func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) Code() int {
	return 400
}

func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w][%d] putNetworkRoutersRouterIdRulesEWBadRequest %s", 400, payload)
}

func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w][%d] putNetworkRoutersRouterIdRulesEWBadRequest %s", 400, payload)
}

func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkRoutersRouterIDRulesEWBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkRoutersRouterIDRulesEWUnauthorized creates a PutNetworkRoutersRouterIDRulesEWUnauthorized with default headers values
func NewPutNetworkRoutersRouterIDRulesEWUnauthorized() *PutNetworkRoutersRouterIDRulesEWUnauthorized {
	return &PutNetworkRoutersRouterIDRulesEWUnauthorized{}
}

/*
PutNetworkRoutersRouterIDRulesEWUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutNetworkRoutersRouterIDRulesEWUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network routers router Id rules e w unauthorized response has a 2xx status code
func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network routers router Id rules e w unauthorized response has a 3xx status code
func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network routers router Id rules e w unauthorized response has a 4xx status code
func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network routers router Id rules e w unauthorized response has a 5xx status code
func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put network routers router Id rules e w unauthorized response a status code equal to that given
func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put network routers router Id rules e w unauthorized response
func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) Code() int {
	return 401
}

func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w][%d] putNetworkRoutersRouterIdRulesEWUnauthorized %s", 401, payload)
}

func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w][%d] putNetworkRoutersRouterIdRulesEWUnauthorized %s", 401, payload)
}

func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkRoutersRouterIDRulesEWUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkRoutersRouterIDRulesEWForbidden creates a PutNetworkRoutersRouterIDRulesEWForbidden with default headers values
func NewPutNetworkRoutersRouterIDRulesEWForbidden() *PutNetworkRoutersRouterIDRulesEWForbidden {
	return &PutNetworkRoutersRouterIDRulesEWForbidden{}
}

/*
PutNetworkRoutersRouterIDRulesEWForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutNetworkRoutersRouterIDRulesEWForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network routers router Id rules e w forbidden response has a 2xx status code
func (o *PutNetworkRoutersRouterIDRulesEWForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network routers router Id rules e w forbidden response has a 3xx status code
func (o *PutNetworkRoutersRouterIDRulesEWForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network routers router Id rules e w forbidden response has a 4xx status code
func (o *PutNetworkRoutersRouterIDRulesEWForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network routers router Id rules e w forbidden response has a 5xx status code
func (o *PutNetworkRoutersRouterIDRulesEWForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put network routers router Id rules e w forbidden response a status code equal to that given
func (o *PutNetworkRoutersRouterIDRulesEWForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put network routers router Id rules e w forbidden response
func (o *PutNetworkRoutersRouterIDRulesEWForbidden) Code() int {
	return 403
}

func (o *PutNetworkRoutersRouterIDRulesEWForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w][%d] putNetworkRoutersRouterIdRulesEWForbidden %s", 403, payload)
}

func (o *PutNetworkRoutersRouterIDRulesEWForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/routers/{routerId}/rules/e-w][%d] putNetworkRoutersRouterIdRulesEWForbidden %s", 403, payload)
}

func (o *PutNetworkRoutersRouterIDRulesEWForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkRoutersRouterIDRulesEWForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
