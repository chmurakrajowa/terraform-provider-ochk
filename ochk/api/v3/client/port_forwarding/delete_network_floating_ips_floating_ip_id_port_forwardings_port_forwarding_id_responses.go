// Code generated by go-swagger; DO NOT EDIT.

package port_forwarding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDReader is a Reader for the DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID structure.
type DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}] DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID", response, response.Code())
	}
}

// NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK creates a DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK with default headers values
func NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK() *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK {
	return &DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK{}
}

/*
DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK describes a response with status code 200, with default header values.

OK
*/
type DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK struct {
	Payload *models.DeletePortForwardingResponse
}

// IsSuccess returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id o k response has a 2xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id o k response has a 3xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id o k response has a 4xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id o k response has a 5xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id o k response a status code equal to that given
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete network floating ips floating Ip Id port forwardings port forwarding Id o k response
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) Code() int {
	return 200
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] deleteNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdOK %s", 200, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] deleteNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdOK %s", 200, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) GetPayload() *models.DeletePortForwardingResponse {
	return o.Payload
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeletePortForwardingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest creates a DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest with default headers values
func NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest() *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest {
	return &DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest{}
}

/*
DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id bad request response has a 2xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id bad request response has a 3xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id bad request response has a 4xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id bad request response has a 5xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id bad request response a status code equal to that given
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete network floating ips floating Ip Id port forwardings port forwarding Id bad request response
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) Code() int {
	return 400
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] deleteNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdBadRequest %s", 400, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] deleteNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdBadRequest %s", 400, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized creates a DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized with default headers values
func NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized() *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized {
	return &DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized{}
}

/*
DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response has a 2xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response has a 3xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response has a 4xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response has a 5xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response a status code equal to that given
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) Code() int {
	return 401
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] deleteNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdUnauthorized %s", 401, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] deleteNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdUnauthorized %s", 401, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden creates a DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden with default headers values
func NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden() *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden {
	return &DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden{}
}

/*
DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id forbidden response has a 2xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id forbidden response has a 3xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id forbidden response has a 4xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id forbidden response has a 5xx status code
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network floating ips floating Ip Id port forwardings port forwarding Id forbidden response a status code equal to that given
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete network floating ips floating Ip Id port forwardings port forwarding Id forbidden response
func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) Code() int {
	return 403
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] deleteNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdForbidden %s", 403, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] deleteNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdForbidden %s", 403, payload)
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
