// Code generated by go-swagger; DO NOT EDIT.

package port_forwarding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDReader is a Reader for the GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID structure.
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}] GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID", response, response.Code())
	}
}

// NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK creates a GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK() *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK {
	return &GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK{}
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK describes a response with status code 200, with default header values.

OK
*/
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK struct {
	Payload *models.GetPortForwardingResponse
}

// IsSuccess returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id o k response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id o k response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id o k response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id o k response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id o k response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network floating ips floating Ip Id port forwardings port forwarding Id o k response
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) Code() int {
	return 200
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdOK %s", 200, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdOK %s", 200, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) GetPayload() *models.GetPortForwardingResponse {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetPortForwardingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest creates a GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest() *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest {
	return &GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest{}
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id bad request response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id bad request response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id bad request response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id bad request response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id bad request response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get network floating ips floating Ip Id port forwardings port forwarding Id bad request response
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) Code() int {
	return 400
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdBadRequest %s", 400, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdBadRequest %s", 400, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized creates a GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized() *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized {
	return &GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized{}
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get network floating ips floating Ip Id port forwardings port forwarding Id unauthorized response
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) Code() int {
	return 401
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdUnauthorized %s", 401, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdUnauthorized %s", 401, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden creates a GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden() *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden {
	return &GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden{}
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id forbidden response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id forbidden response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id forbidden response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id forbidden response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id port forwardings port forwarding Id forbidden response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get network floating ips floating Ip Id port forwardings port forwarding Id forbidden response
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) Code() int {
	return 403
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdForbidden %s", 403, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsPortForwardingIdForbidden %s", 403, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
