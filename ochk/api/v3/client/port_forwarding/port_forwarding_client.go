// Code generated by go-swagger; DO NOT EDIT.

package port_forwarding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new port forwarding API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new port forwarding API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new port forwarding API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for port forwarding API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationStarJSON sets the Content-Type header to "application/*+json".
func WithContentTypeApplicationStarJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/*+json"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID(params *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDParams, opts ...ClientOption) (*DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK, error)

	GetNetworkFloatingIpsFloatingIPIDPortForwardings(params *GetNetworkFloatingIpsFloatingIPIDPortForwardingsParams, opts ...ClientOption) (*GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK, error)

	GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID(params *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDParams, opts ...ClientOption) (*GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK, error)

	PutNetworkFloatingIpsFloatingIPIDPortForwardings(params *PutNetworkFloatingIpsFloatingIPIDPortForwardingsParams, opts ...ClientOption) (*PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK, error)

	PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID(params *PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDParams, opts ...ClientOption) (*PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID deletes firewall rule o s c

Delete firewall rule (OSC)
*/
func (a *Client) DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID(params *DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDParams, opts ...ClientOption) (*DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID",
		Method:             "DELETE",
		PathPattern:        "/network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardings lists floating ips o s c

List floating ips (OSC)
*/
func (a *Client) GetNetworkFloatingIpsFloatingIPIDPortForwardings(params *GetNetworkFloatingIpsFloatingIPIDPortForwardingsParams, opts ...ClientOption) (*GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetworkFloatingIpsFloatingIPIDPortForwardings",
		Method:             "GET",
		PathPattern:        "/network/floating-ips/{floatingIpId}/port-forwardings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkFloatingIpsFloatingIPIDPortForwardingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNetworkFloatingIpsFloatingIPIDPortForwardings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID gets floating ip o s c

Get floating ip (OSC)
*/
func (a *Client) GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID(params *GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDParams, opts ...ClientOption) (*GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID",
		Method:             "GET",
		PathPattern:        "/network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutNetworkFloatingIpsFloatingIPIDPortForwardings creates floating ip o s c

Create floating ip (OSC)
*/
func (a *Client) PutNetworkFloatingIpsFloatingIPIDPortForwardings(params *PutNetworkFloatingIpsFloatingIPIDPortForwardingsParams, opts ...ClientOption) (*PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutNetworkFloatingIpsFloatingIPIDPortForwardings",
		Method:             "PUT",
		PathPattern:        "/network/floating-ips/{floatingIpId}/port-forwardings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNetworkFloatingIpsFloatingIPIDPortForwardingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutNetworkFloatingIpsFloatingIPIDPortForwardings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID updates firewall rule o s c

Update firewall rule (OSC)
*/
func (a *Client) PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID(params *PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDParams, opts ...ClientOption) (*PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID",
		Method:             "PUT",
		PathPattern:        "/network/floating-ips/{floatingIpId}/port-forwardings/{portForwardingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutNetworkFloatingIpsFloatingIPIDPortForwardingsPortForwardingID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
