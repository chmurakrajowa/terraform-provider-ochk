// Code generated by go-swagger; DO NOT EDIT.

package port_forwarding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetNetworkFloatingIpsFloatingIPIDPortForwardingsReader is a Reader for the GetNetworkFloatingIpsFloatingIPIDPortForwardings structure.
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /network/floating-ips/{floatingIpId}/port-forwardings] GetNetworkFloatingIpsFloatingIPIDPortForwardings", response, response.Code())
	}
}

// NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsOK creates a GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsOK() *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK {
	return &GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK{}
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK describes a response with status code 200, with default header values.

OK
*/
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK struct {
	Payload *models.ListPortForwardingResponse
}

// IsSuccess returns true when this get network floating ips floating Ip Id port forwardings o k response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network floating ips floating Ip Id port forwardings o k response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id port forwardings o k response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network floating ips floating Ip Id port forwardings o k response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id port forwardings o k response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network floating ips floating Ip Id port forwardings o k response
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) Code() int {
	return 200
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsOK %s", 200, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsOK %s", 200, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) GetPayload() *models.ListPortForwardingResponse {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListPortForwardingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest creates a GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest() *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest {
	return &GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest{}
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips floating Ip Id port forwardings bad request response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips floating Ip Id port forwardings bad request response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id port forwardings bad request response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips floating Ip Id port forwardings bad request response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id port forwardings bad request response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get network floating ips floating Ip Id port forwardings bad request response
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) Code() int {
	return 400
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsBadRequest %s", 400, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsBadRequest %s", 400, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized creates a GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized() *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized {
	return &GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized{}
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips floating Ip Id port forwardings unauthorized response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips floating Ip Id port forwardings unauthorized response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id port forwardings unauthorized response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips floating Ip Id port forwardings unauthorized response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id port forwardings unauthorized response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get network floating ips floating Ip Id port forwardings unauthorized response
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) Code() int {
	return 401
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsUnauthorized %s", 401, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsUnauthorized %s", 401, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden creates a GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden with default headers values
func NewGetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden() *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden {
	return &GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden{}
}

/*
GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips floating Ip Id port forwardings forbidden response has a 2xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips floating Ip Id port forwardings forbidden response has a 3xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips floating Ip Id port forwardings forbidden response has a 4xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips floating Ip Id port forwardings forbidden response has a 5xx status code
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips floating Ip Id port forwardings forbidden response a status code equal to that given
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get network floating ips floating Ip Id port forwardings forbidden response
func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) Code() int {
	return 403
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsForbidden %s", 403, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips/{floatingIpId}/port-forwardings][%d] getNetworkFloatingIpsFloatingIpIdPortForwardingsForbidden %s", 403, payload)
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
