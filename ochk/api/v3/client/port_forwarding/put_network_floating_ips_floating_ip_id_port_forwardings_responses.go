// Code generated by go-swagger; DO NOT EDIT.

package port_forwarding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutNetworkFloatingIpsFloatingIPIDPortForwardingsReader is a Reader for the PutNetworkFloatingIpsFloatingIPIDPortForwardings structure.
type PutNetworkFloatingIpsFloatingIPIDPortForwardingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /network/floating-ips/{floatingIpId}/port-forwardings] PutNetworkFloatingIpsFloatingIPIDPortForwardings", response, response.Code())
	}
}

// NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsOK creates a PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK with default headers values
func NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsOK() *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK {
	return &PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK{}
}

/*
PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK describes a response with status code 200, with default header values.

OK
*/
type PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK struct {
	Payload *models.CreatePortForwardingResponse
}

// IsSuccess returns true when this put network floating ips floating Ip Id port forwardings o k response has a 2xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put network floating ips floating Ip Id port forwardings o k response has a 3xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips floating Ip Id port forwardings o k response has a 4xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put network floating ips floating Ip Id port forwardings o k response has a 5xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips floating Ip Id port forwardings o k response a status code equal to that given
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put network floating ips floating Ip Id port forwardings o k response
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) Code() int {
	return 200
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}/port-forwardings][%d] putNetworkFloatingIpsFloatingIpIdPortForwardingsOK %s", 200, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}/port-forwardings][%d] putNetworkFloatingIpsFloatingIpIdPortForwardingsOK %s", 200, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) GetPayload() *models.CreatePortForwardingResponse {
	return o.Payload
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreatePortForwardingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest creates a PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest with default headers values
func NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest() *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest {
	return &PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest{}
}

/*
PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network floating ips floating Ip Id port forwardings bad request response has a 2xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network floating ips floating Ip Id port forwardings bad request response has a 3xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips floating Ip Id port forwardings bad request response has a 4xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network floating ips floating Ip Id port forwardings bad request response has a 5xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips floating Ip Id port forwardings bad request response a status code equal to that given
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put network floating ips floating Ip Id port forwardings bad request response
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) Code() int {
	return 400
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}/port-forwardings][%d] putNetworkFloatingIpsFloatingIpIdPortForwardingsBadRequest %s", 400, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}/port-forwardings][%d] putNetworkFloatingIpsFloatingIpIdPortForwardingsBadRequest %s", 400, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized creates a PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized with default headers values
func NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized() *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized {
	return &PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized{}
}

/*
PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network floating ips floating Ip Id port forwardings unauthorized response has a 2xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network floating ips floating Ip Id port forwardings unauthorized response has a 3xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips floating Ip Id port forwardings unauthorized response has a 4xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network floating ips floating Ip Id port forwardings unauthorized response has a 5xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips floating Ip Id port forwardings unauthorized response a status code equal to that given
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put network floating ips floating Ip Id port forwardings unauthorized response
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) Code() int {
	return 401
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}/port-forwardings][%d] putNetworkFloatingIpsFloatingIpIdPortForwardingsUnauthorized %s", 401, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}/port-forwardings][%d] putNetworkFloatingIpsFloatingIpIdPortForwardingsUnauthorized %s", 401, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden creates a PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden with default headers values
func NewPutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden() *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden {
	return &PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden{}
}

/*
PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network floating ips floating Ip Id port forwardings forbidden response has a 2xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network floating ips floating Ip Id port forwardings forbidden response has a 3xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network floating ips floating Ip Id port forwardings forbidden response has a 4xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network floating ips floating Ip Id port forwardings forbidden response has a 5xx status code
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put network floating ips floating Ip Id port forwardings forbidden response a status code equal to that given
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put network floating ips floating Ip Id port forwardings forbidden response
func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) Code() int {
	return 403
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}/port-forwardings][%d] putNetworkFloatingIpsFloatingIpIdPortForwardingsForbidden %s", 403, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/floating-ips/{floatingIpId}/port-forwardings][%d] putNetworkFloatingIpsFloatingIpIdPortForwardingsForbidden %s", 403, payload)
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkFloatingIpsFloatingIPIDPortForwardingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
