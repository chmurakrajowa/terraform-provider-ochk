// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// DeleteKmsKeyIDReader is a Reader for the DeleteKmsKeyID structure.
type DeleteKmsKeyIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteKmsKeyIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteKmsKeyIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteKmsKeyIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteKmsKeyIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteKmsKeyIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteKmsKeyIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /kms/key/{id}] DeleteKmsKeyID", response, response.Code())
	}
}

// NewDeleteKmsKeyIDOK creates a DeleteKmsKeyIDOK with default headers values
func NewDeleteKmsKeyIDOK() *DeleteKmsKeyIDOK {
	return &DeleteKmsKeyIDOK{}
}

/*
DeleteKmsKeyIDOK describes a response with status code 200, with default header values.

OK
*/
type DeleteKmsKeyIDOK struct {
	Payload *models.DeleteKmsKeyResponse
}

// IsSuccess returns true when this delete kms key Id o k response has a 2xx status code
func (o *DeleteKmsKeyIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete kms key Id o k response has a 3xx status code
func (o *DeleteKmsKeyIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete kms key Id o k response has a 4xx status code
func (o *DeleteKmsKeyIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete kms key Id o k response has a 5xx status code
func (o *DeleteKmsKeyIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete kms key Id o k response a status code equal to that given
func (o *DeleteKmsKeyIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete kms key Id o k response
func (o *DeleteKmsKeyIDOK) Code() int {
	return 200
}

func (o *DeleteKmsKeyIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdOK %s", 200, payload)
}

func (o *DeleteKmsKeyIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdOK %s", 200, payload)
}

func (o *DeleteKmsKeyIDOK) GetPayload() *models.DeleteKmsKeyResponse {
	return o.Payload
}

func (o *DeleteKmsKeyIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteKmsKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKmsKeyIDBadRequest creates a DeleteKmsKeyIDBadRequest with default headers values
func NewDeleteKmsKeyIDBadRequest() *DeleteKmsKeyIDBadRequest {
	return &DeleteKmsKeyIDBadRequest{}
}

/*
DeleteKmsKeyIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteKmsKeyIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete kms key Id bad request response has a 2xx status code
func (o *DeleteKmsKeyIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete kms key Id bad request response has a 3xx status code
func (o *DeleteKmsKeyIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete kms key Id bad request response has a 4xx status code
func (o *DeleteKmsKeyIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete kms key Id bad request response has a 5xx status code
func (o *DeleteKmsKeyIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete kms key Id bad request response a status code equal to that given
func (o *DeleteKmsKeyIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete kms key Id bad request response
func (o *DeleteKmsKeyIDBadRequest) Code() int {
	return 400
}

func (o *DeleteKmsKeyIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdBadRequest %s", 400, payload)
}

func (o *DeleteKmsKeyIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdBadRequest %s", 400, payload)
}

func (o *DeleteKmsKeyIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteKmsKeyIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKmsKeyIDUnauthorized creates a DeleteKmsKeyIDUnauthorized with default headers values
func NewDeleteKmsKeyIDUnauthorized() *DeleteKmsKeyIDUnauthorized {
	return &DeleteKmsKeyIDUnauthorized{}
}

/*
DeleteKmsKeyIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteKmsKeyIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete kms key Id unauthorized response has a 2xx status code
func (o *DeleteKmsKeyIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete kms key Id unauthorized response has a 3xx status code
func (o *DeleteKmsKeyIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete kms key Id unauthorized response has a 4xx status code
func (o *DeleteKmsKeyIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete kms key Id unauthorized response has a 5xx status code
func (o *DeleteKmsKeyIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete kms key Id unauthorized response a status code equal to that given
func (o *DeleteKmsKeyIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete kms key Id unauthorized response
func (o *DeleteKmsKeyIDUnauthorized) Code() int {
	return 401
}

func (o *DeleteKmsKeyIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdUnauthorized %s", 401, payload)
}

func (o *DeleteKmsKeyIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdUnauthorized %s", 401, payload)
}

func (o *DeleteKmsKeyIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteKmsKeyIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKmsKeyIDForbidden creates a DeleteKmsKeyIDForbidden with default headers values
func NewDeleteKmsKeyIDForbidden() *DeleteKmsKeyIDForbidden {
	return &DeleteKmsKeyIDForbidden{}
}

/*
DeleteKmsKeyIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteKmsKeyIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete kms key Id forbidden response has a 2xx status code
func (o *DeleteKmsKeyIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete kms key Id forbidden response has a 3xx status code
func (o *DeleteKmsKeyIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete kms key Id forbidden response has a 4xx status code
func (o *DeleteKmsKeyIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete kms key Id forbidden response has a 5xx status code
func (o *DeleteKmsKeyIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete kms key Id forbidden response a status code equal to that given
func (o *DeleteKmsKeyIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete kms key Id forbidden response
func (o *DeleteKmsKeyIDForbidden) Code() int {
	return 403
}

func (o *DeleteKmsKeyIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdForbidden %s", 403, payload)
}

func (o *DeleteKmsKeyIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdForbidden %s", 403, payload)
}

func (o *DeleteKmsKeyIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteKmsKeyIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKmsKeyIDNotFound creates a DeleteKmsKeyIDNotFound with default headers values
func NewDeleteKmsKeyIDNotFound() *DeleteKmsKeyIDNotFound {
	return &DeleteKmsKeyIDNotFound{}
}

/*
DeleteKmsKeyIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteKmsKeyIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete kms key Id not found response has a 2xx status code
func (o *DeleteKmsKeyIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete kms key Id not found response has a 3xx status code
func (o *DeleteKmsKeyIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete kms key Id not found response has a 4xx status code
func (o *DeleteKmsKeyIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete kms key Id not found response has a 5xx status code
func (o *DeleteKmsKeyIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete kms key Id not found response a status code equal to that given
func (o *DeleteKmsKeyIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete kms key Id not found response
func (o *DeleteKmsKeyIDNotFound) Code() int {
	return 404
}

func (o *DeleteKmsKeyIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdNotFound %s", 404, payload)
}

func (o *DeleteKmsKeyIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kms/key/{id}][%d] deleteKmsKeyIdNotFound %s", 404, payload)
}

func (o *DeleteKmsKeyIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteKmsKeyIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
