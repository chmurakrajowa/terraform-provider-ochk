// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new key API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new key API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new key API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for key API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationStarJSON sets the Content-Type header to "application/*+json".
func WithContentTypeApplicationStarJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/*+json"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteKmsKeyID(params *DeleteKmsKeyIDParams, opts ...ClientOption) (*DeleteKmsKeyIDOK, error)

	GetKmsKey(params *GetKmsKeyParams, opts ...ClientOption) (*GetKmsKeyOK, error)

	GetKmsKeyID(params *GetKmsKeyIDParams, opts ...ClientOption) (*GetKmsKeyIDOK, error)

	PostKmsKeyIDExport(params *PostKmsKeyIDExportParams, opts ...ClientOption) (*PostKmsKeyIDExportOK, error)

	PostKmsKeyIDRevoke(params *PostKmsKeyIDRevokeParams, opts ...ClientOption) (*PostKmsKeyIDRevokeOK, error)

	PostKmsKeyIDVersions(params *PostKmsKeyIDVersionsParams, opts ...ClientOption) (*PostKmsKeyIDVersionsOK, error)

	PostKmsKeyImport(params *PostKmsKeyImportParams, opts ...ClientOption) (*PostKmsKeyImportOK, error)

	PutKmsKey(params *PutKmsKeyParams, opts ...ClientOption) (*PutKmsKeyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteKmsKeyID deletes k m s key

Delete KMS Key
*/
func (a *Client) DeleteKmsKeyID(params *DeleteKmsKeyIDParams, opts ...ClientOption) (*DeleteKmsKeyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKmsKeyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteKmsKeyID",
		Method:             "DELETE",
		PathPattern:        "/kms/key/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteKmsKeyIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKmsKeyIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteKmsKeyID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKmsKey lists k m s keys

List KMS Keys
*/
func (a *Client) GetKmsKey(params *GetKmsKeyParams, opts ...ClientOption) (*GetKmsKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKmsKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKmsKey",
		Method:             "GET",
		PathPattern:        "/kms/key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKmsKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKmsKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKmsKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKmsKeyID gets k m s key

Get KMS Key
*/
func (a *Client) GetKmsKeyID(params *GetKmsKeyIDParams, opts ...ClientOption) (*GetKmsKeyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKmsKeyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKmsKeyID",
		Method:             "GET",
		PathPattern:        "/kms/key/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKmsKeyIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKmsKeyIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKmsKeyID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostKmsKeyIDExport exports k m s key

Export KMS Key
*/
func (a *Client) PostKmsKeyIDExport(params *PostKmsKeyIDExportParams, opts ...ClientOption) (*PostKmsKeyIDExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostKmsKeyIDExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostKmsKeyIDExport",
		Method:             "POST",
		PathPattern:        "/kms/key/{id}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostKmsKeyIDExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostKmsKeyIDExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostKmsKeyIDExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostKmsKeyIDRevoke revokes k m s key

Revoke KMS Key
*/
func (a *Client) PostKmsKeyIDRevoke(params *PostKmsKeyIDRevokeParams, opts ...ClientOption) (*PostKmsKeyIDRevokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostKmsKeyIDRevokeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostKmsKeyIDRevoke",
		Method:             "POST",
		PathPattern:        "/kms/key/{id}/revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostKmsKeyIDRevokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostKmsKeyIDRevokeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostKmsKeyIDRevoke: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostKmsKeyIDVersions news k m s key version

New KMS Key version
*/
func (a *Client) PostKmsKeyIDVersions(params *PostKmsKeyIDVersionsParams, opts ...ClientOption) (*PostKmsKeyIDVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostKmsKeyIDVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostKmsKeyIDVersions",
		Method:             "POST",
		PathPattern:        "/kms/key/{id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostKmsKeyIDVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostKmsKeyIDVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostKmsKeyIDVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostKmsKeyImport imports k m s key

Import KMS Key
*/
func (a *Client) PostKmsKeyImport(params *PostKmsKeyImportParams, opts ...ClientOption) (*PostKmsKeyImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostKmsKeyImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostKmsKeyImport",
		Method:             "POST",
		PathPattern:        "/kms/key/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostKmsKeyImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostKmsKeyImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostKmsKeyImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutKmsKey creates k m s key

Create KMS Key
*/
func (a *Client) PutKmsKey(params *PutKmsKeyParams, opts ...ClientOption) (*PutKmsKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutKmsKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutKmsKey",
		Method:             "PUT",
		PathPattern:        "/kms/key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutKmsKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutKmsKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutKmsKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
