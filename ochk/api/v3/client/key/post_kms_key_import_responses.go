// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PostKmsKeyImportReader is a Reader for the PostKmsKeyImport structure.
type PostKmsKeyImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostKmsKeyImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostKmsKeyImportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostKmsKeyImportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostKmsKeyImportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostKmsKeyImportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /kms/key/import] PostKmsKeyImport", response, response.Code())
	}
}

// NewPostKmsKeyImportOK creates a PostKmsKeyImportOK with default headers values
func NewPostKmsKeyImportOK() *PostKmsKeyImportOK {
	return &PostKmsKeyImportOK{}
}

/*
PostKmsKeyImportOK describes a response with status code 200, with default header values.

OK
*/
type PostKmsKeyImportOK struct {
	Payload *models.ImportKmsKeyResponse
}

// IsSuccess returns true when this post kms key import o k response has a 2xx status code
func (o *PostKmsKeyImportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post kms key import o k response has a 3xx status code
func (o *PostKmsKeyImportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post kms key import o k response has a 4xx status code
func (o *PostKmsKeyImportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post kms key import o k response has a 5xx status code
func (o *PostKmsKeyImportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post kms key import o k response a status code equal to that given
func (o *PostKmsKeyImportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post kms key import o k response
func (o *PostKmsKeyImportOK) Code() int {
	return 200
}

func (o *PostKmsKeyImportOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/key/import][%d] postKmsKeyImportOK %s", 200, payload)
}

func (o *PostKmsKeyImportOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/key/import][%d] postKmsKeyImportOK %s", 200, payload)
}

func (o *PostKmsKeyImportOK) GetPayload() *models.ImportKmsKeyResponse {
	return o.Payload
}

func (o *PostKmsKeyImportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImportKmsKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKmsKeyImportBadRequest creates a PostKmsKeyImportBadRequest with default headers values
func NewPostKmsKeyImportBadRequest() *PostKmsKeyImportBadRequest {
	return &PostKmsKeyImportBadRequest{}
}

/*
PostKmsKeyImportBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostKmsKeyImportBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post kms key import bad request response has a 2xx status code
func (o *PostKmsKeyImportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post kms key import bad request response has a 3xx status code
func (o *PostKmsKeyImportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post kms key import bad request response has a 4xx status code
func (o *PostKmsKeyImportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post kms key import bad request response has a 5xx status code
func (o *PostKmsKeyImportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post kms key import bad request response a status code equal to that given
func (o *PostKmsKeyImportBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post kms key import bad request response
func (o *PostKmsKeyImportBadRequest) Code() int {
	return 400
}

func (o *PostKmsKeyImportBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/key/import][%d] postKmsKeyImportBadRequest %s", 400, payload)
}

func (o *PostKmsKeyImportBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/key/import][%d] postKmsKeyImportBadRequest %s", 400, payload)
}

func (o *PostKmsKeyImportBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostKmsKeyImportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKmsKeyImportUnauthorized creates a PostKmsKeyImportUnauthorized with default headers values
func NewPostKmsKeyImportUnauthorized() *PostKmsKeyImportUnauthorized {
	return &PostKmsKeyImportUnauthorized{}
}

/*
PostKmsKeyImportUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostKmsKeyImportUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post kms key import unauthorized response has a 2xx status code
func (o *PostKmsKeyImportUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post kms key import unauthorized response has a 3xx status code
func (o *PostKmsKeyImportUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post kms key import unauthorized response has a 4xx status code
func (o *PostKmsKeyImportUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post kms key import unauthorized response has a 5xx status code
func (o *PostKmsKeyImportUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post kms key import unauthorized response a status code equal to that given
func (o *PostKmsKeyImportUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post kms key import unauthorized response
func (o *PostKmsKeyImportUnauthorized) Code() int {
	return 401
}

func (o *PostKmsKeyImportUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/key/import][%d] postKmsKeyImportUnauthorized %s", 401, payload)
}

func (o *PostKmsKeyImportUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/key/import][%d] postKmsKeyImportUnauthorized %s", 401, payload)
}

func (o *PostKmsKeyImportUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostKmsKeyImportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKmsKeyImportForbidden creates a PostKmsKeyImportForbidden with default headers values
func NewPostKmsKeyImportForbidden() *PostKmsKeyImportForbidden {
	return &PostKmsKeyImportForbidden{}
}

/*
PostKmsKeyImportForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostKmsKeyImportForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this post kms key import forbidden response has a 2xx status code
func (o *PostKmsKeyImportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post kms key import forbidden response has a 3xx status code
func (o *PostKmsKeyImportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post kms key import forbidden response has a 4xx status code
func (o *PostKmsKeyImportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post kms key import forbidden response has a 5xx status code
func (o *PostKmsKeyImportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post kms key import forbidden response a status code equal to that given
func (o *PostKmsKeyImportForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post kms key import forbidden response
func (o *PostKmsKeyImportForbidden) Code() int {
	return 403
}

func (o *PostKmsKeyImportForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/key/import][%d] postKmsKeyImportForbidden %s", 403, payload)
}

func (o *PostKmsKeyImportForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/key/import][%d] postKmsKeyImportForbidden %s", 403, payload)
}

func (o *PostKmsKeyImportForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PostKmsKeyImportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
