// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetFolderProjectIDReader is a Reader for the GetFolderProjectID structure.
type GetFolderProjectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFolderProjectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFolderProjectIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFolderProjectIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFolderProjectIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFolderProjectIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /folder/{projectId}] GetFolderProjectID", response, response.Code())
	}
}

// NewGetFolderProjectIDOK creates a GetFolderProjectIDOK with default headers values
func NewGetFolderProjectIDOK() *GetFolderProjectIDOK {
	return &GetFolderProjectIDOK{}
}

/*
GetFolderProjectIDOK describes a response with status code 200, with default header values.

OK
*/
type GetFolderProjectIDOK struct {
	Payload *models.FolderListResponse
}

// IsSuccess returns true when this get folder project Id o k response has a 2xx status code
func (o *GetFolderProjectIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get folder project Id o k response has a 3xx status code
func (o *GetFolderProjectIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get folder project Id o k response has a 4xx status code
func (o *GetFolderProjectIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get folder project Id o k response has a 5xx status code
func (o *GetFolderProjectIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get folder project Id o k response a status code equal to that given
func (o *GetFolderProjectIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get folder project Id o k response
func (o *GetFolderProjectIDOK) Code() int {
	return 200
}

func (o *GetFolderProjectIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /folder/{projectId}][%d] getFolderProjectIdOK %s", 200, payload)
}

func (o *GetFolderProjectIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /folder/{projectId}][%d] getFolderProjectIdOK %s", 200, payload)
}

func (o *GetFolderProjectIDOK) GetPayload() *models.FolderListResponse {
	return o.Payload
}

func (o *GetFolderProjectIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FolderListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFolderProjectIDBadRequest creates a GetFolderProjectIDBadRequest with default headers values
func NewGetFolderProjectIDBadRequest() *GetFolderProjectIDBadRequest {
	return &GetFolderProjectIDBadRequest{}
}

/*
GetFolderProjectIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetFolderProjectIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get folder project Id bad request response has a 2xx status code
func (o *GetFolderProjectIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get folder project Id bad request response has a 3xx status code
func (o *GetFolderProjectIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get folder project Id bad request response has a 4xx status code
func (o *GetFolderProjectIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get folder project Id bad request response has a 5xx status code
func (o *GetFolderProjectIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get folder project Id bad request response a status code equal to that given
func (o *GetFolderProjectIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get folder project Id bad request response
func (o *GetFolderProjectIDBadRequest) Code() int {
	return 400
}

func (o *GetFolderProjectIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /folder/{projectId}][%d] getFolderProjectIdBadRequest %s", 400, payload)
}

func (o *GetFolderProjectIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /folder/{projectId}][%d] getFolderProjectIdBadRequest %s", 400, payload)
}

func (o *GetFolderProjectIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetFolderProjectIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFolderProjectIDUnauthorized creates a GetFolderProjectIDUnauthorized with default headers values
func NewGetFolderProjectIDUnauthorized() *GetFolderProjectIDUnauthorized {
	return &GetFolderProjectIDUnauthorized{}
}

/*
GetFolderProjectIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetFolderProjectIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get folder project Id unauthorized response has a 2xx status code
func (o *GetFolderProjectIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get folder project Id unauthorized response has a 3xx status code
func (o *GetFolderProjectIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get folder project Id unauthorized response has a 4xx status code
func (o *GetFolderProjectIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get folder project Id unauthorized response has a 5xx status code
func (o *GetFolderProjectIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get folder project Id unauthorized response a status code equal to that given
func (o *GetFolderProjectIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get folder project Id unauthorized response
func (o *GetFolderProjectIDUnauthorized) Code() int {
	return 401
}

func (o *GetFolderProjectIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /folder/{projectId}][%d] getFolderProjectIdUnauthorized %s", 401, payload)
}

func (o *GetFolderProjectIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /folder/{projectId}][%d] getFolderProjectIdUnauthorized %s", 401, payload)
}

func (o *GetFolderProjectIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetFolderProjectIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFolderProjectIDForbidden creates a GetFolderProjectIDForbidden with default headers values
func NewGetFolderProjectIDForbidden() *GetFolderProjectIDForbidden {
	return &GetFolderProjectIDForbidden{}
}

/*
GetFolderProjectIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetFolderProjectIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get folder project Id forbidden response has a 2xx status code
func (o *GetFolderProjectIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get folder project Id forbidden response has a 3xx status code
func (o *GetFolderProjectIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get folder project Id forbidden response has a 4xx status code
func (o *GetFolderProjectIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get folder project Id forbidden response has a 5xx status code
func (o *GetFolderProjectIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get folder project Id forbidden response a status code equal to that given
func (o *GetFolderProjectIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get folder project Id forbidden response
func (o *GetFolderProjectIDForbidden) Code() int {
	return 403
}

func (o *GetFolderProjectIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /folder/{projectId}][%d] getFolderProjectIdForbidden %s", 403, payload)
}

func (o *GetFolderProjectIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /folder/{projectId}][%d] getFolderProjectIdForbidden %s", 403, payload)
}

func (o *GetFolderProjectIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetFolderProjectIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
