// Code generated by go-swagger; DO NOT EDIT.

package available_public_ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetIpamIpaddressPublicAvailableReader is a Reader for the GetIpamIpaddressPublicAvailable structure.
type GetIpamIpaddressPublicAvailableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIpamIpaddressPublicAvailableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIpamIpaddressPublicAvailableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIpamIpaddressPublicAvailableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetIpamIpaddressPublicAvailableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIpamIpaddressPublicAvailableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ipam/ipaddress/public/available] GetIpamIpaddressPublicAvailable", response, response.Code())
	}
}

// NewGetIpamIpaddressPublicAvailableOK creates a GetIpamIpaddressPublicAvailableOK with default headers values
func NewGetIpamIpaddressPublicAvailableOK() *GetIpamIpaddressPublicAvailableOK {
	return &GetIpamIpaddressPublicAvailableOK{}
}

/*
GetIpamIpaddressPublicAvailableOK describes a response with status code 200, with default header values.

OK
*/
type GetIpamIpaddressPublicAvailableOK struct {
	Payload *models.AvailablePublicIPGetResponse
}

// IsSuccess returns true when this get ipam ipaddress public available o k response has a 2xx status code
func (o *GetIpamIpaddressPublicAvailableOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get ipam ipaddress public available o k response has a 3xx status code
func (o *GetIpamIpaddressPublicAvailableOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ipam ipaddress public available o k response has a 4xx status code
func (o *GetIpamIpaddressPublicAvailableOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get ipam ipaddress public available o k response has a 5xx status code
func (o *GetIpamIpaddressPublicAvailableOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get ipam ipaddress public available o k response a status code equal to that given
func (o *GetIpamIpaddressPublicAvailableOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get ipam ipaddress public available o k response
func (o *GetIpamIpaddressPublicAvailableOK) Code() int {
	return 200
}

func (o *GetIpamIpaddressPublicAvailableOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipam/ipaddress/public/available][%d] getIpamIpaddressPublicAvailableOK %s", 200, payload)
}

func (o *GetIpamIpaddressPublicAvailableOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipam/ipaddress/public/available][%d] getIpamIpaddressPublicAvailableOK %s", 200, payload)
}

func (o *GetIpamIpaddressPublicAvailableOK) GetPayload() *models.AvailablePublicIPGetResponse {
	return o.Payload
}

func (o *GetIpamIpaddressPublicAvailableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AvailablePublicIPGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpamIpaddressPublicAvailableBadRequest creates a GetIpamIpaddressPublicAvailableBadRequest with default headers values
func NewGetIpamIpaddressPublicAvailableBadRequest() *GetIpamIpaddressPublicAvailableBadRequest {
	return &GetIpamIpaddressPublicAvailableBadRequest{}
}

/*
GetIpamIpaddressPublicAvailableBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetIpamIpaddressPublicAvailableBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get ipam ipaddress public available bad request response has a 2xx status code
func (o *GetIpamIpaddressPublicAvailableBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ipam ipaddress public available bad request response has a 3xx status code
func (o *GetIpamIpaddressPublicAvailableBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ipam ipaddress public available bad request response has a 4xx status code
func (o *GetIpamIpaddressPublicAvailableBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ipam ipaddress public available bad request response has a 5xx status code
func (o *GetIpamIpaddressPublicAvailableBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get ipam ipaddress public available bad request response a status code equal to that given
func (o *GetIpamIpaddressPublicAvailableBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get ipam ipaddress public available bad request response
func (o *GetIpamIpaddressPublicAvailableBadRequest) Code() int {
	return 400
}

func (o *GetIpamIpaddressPublicAvailableBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipam/ipaddress/public/available][%d] getIpamIpaddressPublicAvailableBadRequest %s", 400, payload)
}

func (o *GetIpamIpaddressPublicAvailableBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipam/ipaddress/public/available][%d] getIpamIpaddressPublicAvailableBadRequest %s", 400, payload)
}

func (o *GetIpamIpaddressPublicAvailableBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetIpamIpaddressPublicAvailableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpamIpaddressPublicAvailableUnauthorized creates a GetIpamIpaddressPublicAvailableUnauthorized with default headers values
func NewGetIpamIpaddressPublicAvailableUnauthorized() *GetIpamIpaddressPublicAvailableUnauthorized {
	return &GetIpamIpaddressPublicAvailableUnauthorized{}
}

/*
GetIpamIpaddressPublicAvailableUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetIpamIpaddressPublicAvailableUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get ipam ipaddress public available unauthorized response has a 2xx status code
func (o *GetIpamIpaddressPublicAvailableUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ipam ipaddress public available unauthorized response has a 3xx status code
func (o *GetIpamIpaddressPublicAvailableUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ipam ipaddress public available unauthorized response has a 4xx status code
func (o *GetIpamIpaddressPublicAvailableUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ipam ipaddress public available unauthorized response has a 5xx status code
func (o *GetIpamIpaddressPublicAvailableUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get ipam ipaddress public available unauthorized response a status code equal to that given
func (o *GetIpamIpaddressPublicAvailableUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get ipam ipaddress public available unauthorized response
func (o *GetIpamIpaddressPublicAvailableUnauthorized) Code() int {
	return 401
}

func (o *GetIpamIpaddressPublicAvailableUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipam/ipaddress/public/available][%d] getIpamIpaddressPublicAvailableUnauthorized %s", 401, payload)
}

func (o *GetIpamIpaddressPublicAvailableUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipam/ipaddress/public/available][%d] getIpamIpaddressPublicAvailableUnauthorized %s", 401, payload)
}

func (o *GetIpamIpaddressPublicAvailableUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetIpamIpaddressPublicAvailableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpamIpaddressPublicAvailableForbidden creates a GetIpamIpaddressPublicAvailableForbidden with default headers values
func NewGetIpamIpaddressPublicAvailableForbidden() *GetIpamIpaddressPublicAvailableForbidden {
	return &GetIpamIpaddressPublicAvailableForbidden{}
}

/*
GetIpamIpaddressPublicAvailableForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetIpamIpaddressPublicAvailableForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get ipam ipaddress public available forbidden response has a 2xx status code
func (o *GetIpamIpaddressPublicAvailableForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ipam ipaddress public available forbidden response has a 3xx status code
func (o *GetIpamIpaddressPublicAvailableForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ipam ipaddress public available forbidden response has a 4xx status code
func (o *GetIpamIpaddressPublicAvailableForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ipam ipaddress public available forbidden response has a 5xx status code
func (o *GetIpamIpaddressPublicAvailableForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get ipam ipaddress public available forbidden response a status code equal to that given
func (o *GetIpamIpaddressPublicAvailableForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get ipam ipaddress public available forbidden response
func (o *GetIpamIpaddressPublicAvailableForbidden) Code() int {
	return 403
}

func (o *GetIpamIpaddressPublicAvailableForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipam/ipaddress/public/available][%d] getIpamIpaddressPublicAvailableForbidden %s", 403, payload)
}

func (o *GetIpamIpaddressPublicAvailableForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ipam/ipaddress/public/available][%d] getIpamIpaddressPublicAvailableForbidden %s", 403, payload)
}

func (o *GetIpamIpaddressPublicAvailableForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetIpamIpaddressPublicAvailableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
