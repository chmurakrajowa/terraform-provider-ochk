// Code generated by go-swagger; DO NOT EDIT.

package router

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetNetworkRoutersReader is a Reader for the GetNetworkRouters structure.
type GetNetworkRoutersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkRoutersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkRoutersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworkRoutersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworkRoutersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNetworkRoutersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /network/routers] GetNetworkRouters", response, response.Code())
	}
}

// NewGetNetworkRoutersOK creates a GetNetworkRoutersOK with default headers values
func NewGetNetworkRoutersOK() *GetNetworkRoutersOK {
	return &GetNetworkRoutersOK{}
}

/*
GetNetworkRoutersOK describes a response with status code 200, with default header values.

OK
*/
type GetNetworkRoutersOK struct {
	Payload *models.ListRoutersResponse
}

// IsSuccess returns true when this get network routers o k response has a 2xx status code
func (o *GetNetworkRoutersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network routers o k response has a 3xx status code
func (o *GetNetworkRoutersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network routers o k response has a 4xx status code
func (o *GetNetworkRoutersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network routers o k response has a 5xx status code
func (o *GetNetworkRoutersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network routers o k response a status code equal to that given
func (o *GetNetworkRoutersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network routers o k response
func (o *GetNetworkRoutersOK) Code() int {
	return 200
}

func (o *GetNetworkRoutersOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers][%d] getNetworkRoutersOK %s", 200, payload)
}

func (o *GetNetworkRoutersOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers][%d] getNetworkRoutersOK %s", 200, payload)
}

func (o *GetNetworkRoutersOK) GetPayload() *models.ListRoutersResponse {
	return o.Payload
}

func (o *GetNetworkRoutersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListRoutersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkRoutersBadRequest creates a GetNetworkRoutersBadRequest with default headers values
func NewGetNetworkRoutersBadRequest() *GetNetworkRoutersBadRequest {
	return &GetNetworkRoutersBadRequest{}
}

/*
GetNetworkRoutersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNetworkRoutersBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network routers bad request response has a 2xx status code
func (o *GetNetworkRoutersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network routers bad request response has a 3xx status code
func (o *GetNetworkRoutersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network routers bad request response has a 4xx status code
func (o *GetNetworkRoutersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network routers bad request response has a 5xx status code
func (o *GetNetworkRoutersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get network routers bad request response a status code equal to that given
func (o *GetNetworkRoutersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get network routers bad request response
func (o *GetNetworkRoutersBadRequest) Code() int {
	return 400
}

func (o *GetNetworkRoutersBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers][%d] getNetworkRoutersBadRequest %s", 400, payload)
}

func (o *GetNetworkRoutersBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers][%d] getNetworkRoutersBadRequest %s", 400, payload)
}

func (o *GetNetworkRoutersBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkRoutersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkRoutersUnauthorized creates a GetNetworkRoutersUnauthorized with default headers values
func NewGetNetworkRoutersUnauthorized() *GetNetworkRoutersUnauthorized {
	return &GetNetworkRoutersUnauthorized{}
}

/*
GetNetworkRoutersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNetworkRoutersUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network routers unauthorized response has a 2xx status code
func (o *GetNetworkRoutersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network routers unauthorized response has a 3xx status code
func (o *GetNetworkRoutersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network routers unauthorized response has a 4xx status code
func (o *GetNetworkRoutersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network routers unauthorized response has a 5xx status code
func (o *GetNetworkRoutersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get network routers unauthorized response a status code equal to that given
func (o *GetNetworkRoutersUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get network routers unauthorized response
func (o *GetNetworkRoutersUnauthorized) Code() int {
	return 401
}

func (o *GetNetworkRoutersUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers][%d] getNetworkRoutersUnauthorized %s", 401, payload)
}

func (o *GetNetworkRoutersUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers][%d] getNetworkRoutersUnauthorized %s", 401, payload)
}

func (o *GetNetworkRoutersUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkRoutersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkRoutersForbidden creates a GetNetworkRoutersForbidden with default headers values
func NewGetNetworkRoutersForbidden() *GetNetworkRoutersForbidden {
	return &GetNetworkRoutersForbidden{}
}

/*
GetNetworkRoutersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNetworkRoutersForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network routers forbidden response has a 2xx status code
func (o *GetNetworkRoutersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network routers forbidden response has a 3xx status code
func (o *GetNetworkRoutersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network routers forbidden response has a 4xx status code
func (o *GetNetworkRoutersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network routers forbidden response has a 5xx status code
func (o *GetNetworkRoutersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get network routers forbidden response a status code equal to that given
func (o *GetNetworkRoutersForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get network routers forbidden response
func (o *GetNetworkRoutersForbidden) Code() int {
	return 403
}

func (o *GetNetworkRoutersForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers][%d] getNetworkRoutersForbidden %s", 403, payload)
}

func (o *GetNetworkRoutersForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/routers][%d] getNetworkRoutersForbidden %s", 403, payload)
}

func (o *GetNetworkRoutersForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkRoutersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
