// Code generated by go-swagger; DO NOT EDIT.

package log_category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetLogCategoriesReader is a Reader for the GetLogCategories structure.
type GetLogCategoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogCategoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLogCategoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLogCategoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLogCategoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLogCategoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /log/categories] GetLogCategories", response, response.Code())
	}
}

// NewGetLogCategoriesOK creates a GetLogCategoriesOK with default headers values
func NewGetLogCategoriesOK() *GetLogCategoriesOK {
	return &GetLogCategoriesOK{}
}

/*
GetLogCategoriesOK describes a response with status code 200, with default header values.

OK
*/
type GetLogCategoriesOK struct {
	Payload *models.ListLogCategoriesResponse
}

// IsSuccess returns true when this get log categories o k response has a 2xx status code
func (o *GetLogCategoriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get log categories o k response has a 3xx status code
func (o *GetLogCategoriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log categories o k response has a 4xx status code
func (o *GetLogCategoriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log categories o k response has a 5xx status code
func (o *GetLogCategoriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get log categories o k response a status code equal to that given
func (o *GetLogCategoriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get log categories o k response
func (o *GetLogCategoriesOK) Code() int {
	return 200
}

func (o *GetLogCategoriesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/categories][%d] getLogCategoriesOK %s", 200, payload)
}

func (o *GetLogCategoriesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/categories][%d] getLogCategoriesOK %s", 200, payload)
}

func (o *GetLogCategoriesOK) GetPayload() *models.ListLogCategoriesResponse {
	return o.Payload
}

func (o *GetLogCategoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListLogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogCategoriesBadRequest creates a GetLogCategoriesBadRequest with default headers values
func NewGetLogCategoriesBadRequest() *GetLogCategoriesBadRequest {
	return &GetLogCategoriesBadRequest{}
}

/*
GetLogCategoriesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLogCategoriesBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get log categories bad request response has a 2xx status code
func (o *GetLogCategoriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log categories bad request response has a 3xx status code
func (o *GetLogCategoriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log categories bad request response has a 4xx status code
func (o *GetLogCategoriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log categories bad request response has a 5xx status code
func (o *GetLogCategoriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get log categories bad request response a status code equal to that given
func (o *GetLogCategoriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get log categories bad request response
func (o *GetLogCategoriesBadRequest) Code() int {
	return 400
}

func (o *GetLogCategoriesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/categories][%d] getLogCategoriesBadRequest %s", 400, payload)
}

func (o *GetLogCategoriesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/categories][%d] getLogCategoriesBadRequest %s", 400, payload)
}

func (o *GetLogCategoriesBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetLogCategoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogCategoriesUnauthorized creates a GetLogCategoriesUnauthorized with default headers values
func NewGetLogCategoriesUnauthorized() *GetLogCategoriesUnauthorized {
	return &GetLogCategoriesUnauthorized{}
}

/*
GetLogCategoriesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLogCategoriesUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get log categories unauthorized response has a 2xx status code
func (o *GetLogCategoriesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log categories unauthorized response has a 3xx status code
func (o *GetLogCategoriesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log categories unauthorized response has a 4xx status code
func (o *GetLogCategoriesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log categories unauthorized response has a 5xx status code
func (o *GetLogCategoriesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get log categories unauthorized response a status code equal to that given
func (o *GetLogCategoriesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get log categories unauthorized response
func (o *GetLogCategoriesUnauthorized) Code() int {
	return 401
}

func (o *GetLogCategoriesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/categories][%d] getLogCategoriesUnauthorized %s", 401, payload)
}

func (o *GetLogCategoriesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/categories][%d] getLogCategoriesUnauthorized %s", 401, payload)
}

func (o *GetLogCategoriesUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetLogCategoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogCategoriesForbidden creates a GetLogCategoriesForbidden with default headers values
func NewGetLogCategoriesForbidden() *GetLogCategoriesForbidden {
	return &GetLogCategoriesForbidden{}
}

/*
GetLogCategoriesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLogCategoriesForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get log categories forbidden response has a 2xx status code
func (o *GetLogCategoriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log categories forbidden response has a 3xx status code
func (o *GetLogCategoriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log categories forbidden response has a 4xx status code
func (o *GetLogCategoriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log categories forbidden response has a 5xx status code
func (o *GetLogCategoriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get log categories forbidden response a status code equal to that given
func (o *GetLogCategoriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get log categories forbidden response
func (o *GetLogCategoriesForbidden) Code() int {
	return 403
}

func (o *GetLogCategoriesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/categories][%d] getLogCategoriesForbidden %s", 403, payload)
}

func (o *GetLogCategoriesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /log/categories][%d] getLogCategoriesForbidden %s", 403, payload)
}

func (o *GetLogCategoriesForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetLogCategoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
