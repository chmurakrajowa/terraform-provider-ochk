// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutTagsTagIDReader is a Reader for the PutTagsTagID structure.
type PutTagsTagIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutTagsTagIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutTagsTagIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutTagsTagIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutTagsTagIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutTagsTagIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutTagsTagIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /tags/{tagId}] PutTagsTagID", response, response.Code())
	}
}

// NewPutTagsTagIDOK creates a PutTagsTagIDOK with default headers values
func NewPutTagsTagIDOK() *PutTagsTagIDOK {
	return &PutTagsTagIDOK{}
}

/*
PutTagsTagIDOK describes a response with status code 200, with default header values.

OK
*/
type PutTagsTagIDOK struct {
	Payload *models.UpdateTagResponse
}

// IsSuccess returns true when this put tags tag Id o k response has a 2xx status code
func (o *PutTagsTagIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put tags tag Id o k response has a 3xx status code
func (o *PutTagsTagIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put tags tag Id o k response has a 4xx status code
func (o *PutTagsTagIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put tags tag Id o k response has a 5xx status code
func (o *PutTagsTagIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put tags tag Id o k response a status code equal to that given
func (o *PutTagsTagIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put tags tag Id o k response
func (o *PutTagsTagIDOK) Code() int {
	return 200
}

func (o *PutTagsTagIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdOK %s", 200, payload)
}

func (o *PutTagsTagIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdOK %s", 200, payload)
}

func (o *PutTagsTagIDOK) GetPayload() *models.UpdateTagResponse {
	return o.Payload
}

func (o *PutTagsTagIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateTagResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTagsTagIDBadRequest creates a PutTagsTagIDBadRequest with default headers values
func NewPutTagsTagIDBadRequest() *PutTagsTagIDBadRequest {
	return &PutTagsTagIDBadRequest{}
}

/*
PutTagsTagIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutTagsTagIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put tags tag Id bad request response has a 2xx status code
func (o *PutTagsTagIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put tags tag Id bad request response has a 3xx status code
func (o *PutTagsTagIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put tags tag Id bad request response has a 4xx status code
func (o *PutTagsTagIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put tags tag Id bad request response has a 5xx status code
func (o *PutTagsTagIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put tags tag Id bad request response a status code equal to that given
func (o *PutTagsTagIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put tags tag Id bad request response
func (o *PutTagsTagIDBadRequest) Code() int {
	return 400
}

func (o *PutTagsTagIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdBadRequest %s", 400, payload)
}

func (o *PutTagsTagIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdBadRequest %s", 400, payload)
}

func (o *PutTagsTagIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutTagsTagIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTagsTagIDUnauthorized creates a PutTagsTagIDUnauthorized with default headers values
func NewPutTagsTagIDUnauthorized() *PutTagsTagIDUnauthorized {
	return &PutTagsTagIDUnauthorized{}
}

/*
PutTagsTagIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutTagsTagIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put tags tag Id unauthorized response has a 2xx status code
func (o *PutTagsTagIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put tags tag Id unauthorized response has a 3xx status code
func (o *PutTagsTagIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put tags tag Id unauthorized response has a 4xx status code
func (o *PutTagsTagIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put tags tag Id unauthorized response has a 5xx status code
func (o *PutTagsTagIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put tags tag Id unauthorized response a status code equal to that given
func (o *PutTagsTagIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put tags tag Id unauthorized response
func (o *PutTagsTagIDUnauthorized) Code() int {
	return 401
}

func (o *PutTagsTagIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdUnauthorized %s", 401, payload)
}

func (o *PutTagsTagIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdUnauthorized %s", 401, payload)
}

func (o *PutTagsTagIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutTagsTagIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTagsTagIDForbidden creates a PutTagsTagIDForbidden with default headers values
func NewPutTagsTagIDForbidden() *PutTagsTagIDForbidden {
	return &PutTagsTagIDForbidden{}
}

/*
PutTagsTagIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutTagsTagIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put tags tag Id forbidden response has a 2xx status code
func (o *PutTagsTagIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put tags tag Id forbidden response has a 3xx status code
func (o *PutTagsTagIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put tags tag Id forbidden response has a 4xx status code
func (o *PutTagsTagIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put tags tag Id forbidden response has a 5xx status code
func (o *PutTagsTagIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put tags tag Id forbidden response a status code equal to that given
func (o *PutTagsTagIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put tags tag Id forbidden response
func (o *PutTagsTagIDForbidden) Code() int {
	return 403
}

func (o *PutTagsTagIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdForbidden %s", 403, payload)
}

func (o *PutTagsTagIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdForbidden %s", 403, payload)
}

func (o *PutTagsTagIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutTagsTagIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTagsTagIDNotFound creates a PutTagsTagIDNotFound with default headers values
func NewPutTagsTagIDNotFound() *PutTagsTagIDNotFound {
	return &PutTagsTagIDNotFound{}
}

/*
PutTagsTagIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutTagsTagIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put tags tag Id not found response has a 2xx status code
func (o *PutTagsTagIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put tags tag Id not found response has a 3xx status code
func (o *PutTagsTagIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put tags tag Id not found response has a 4xx status code
func (o *PutTagsTagIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put tags tag Id not found response has a 5xx status code
func (o *PutTagsTagIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put tags tag Id not found response a status code equal to that given
func (o *PutTagsTagIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put tags tag Id not found response
func (o *PutTagsTagIDNotFound) Code() int {
	return 404
}

func (o *PutTagsTagIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdNotFound %s", 404, payload)
}

func (o *PutTagsTagIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /tags/{tagId}][%d] putTagsTagIdNotFound %s", 404, payload)
}

func (o *PutTagsTagIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutTagsTagIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
