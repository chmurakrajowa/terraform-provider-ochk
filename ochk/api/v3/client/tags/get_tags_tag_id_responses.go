// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetTagsTagIDReader is a Reader for the GetTagsTagID structure.
type GetTagsTagIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTagsTagIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTagsTagIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTagsTagIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTagsTagIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTagsTagIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTagsTagIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /tags/{tagId}] GetTagsTagID", response, response.Code())
	}
}

// NewGetTagsTagIDOK creates a GetTagsTagIDOK with default headers values
func NewGetTagsTagIDOK() *GetTagsTagIDOK {
	return &GetTagsTagIDOK{}
}

/*
GetTagsTagIDOK describes a response with status code 200, with default header values.

OK
*/
type GetTagsTagIDOK struct {
	Payload *models.GetTagResponse
}

// IsSuccess returns true when this get tags tag Id o k response has a 2xx status code
func (o *GetTagsTagIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get tags tag Id o k response has a 3xx status code
func (o *GetTagsTagIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags tag Id o k response has a 4xx status code
func (o *GetTagsTagIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tags tag Id o k response has a 5xx status code
func (o *GetTagsTagIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags tag Id o k response a status code equal to that given
func (o *GetTagsTagIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get tags tag Id o k response
func (o *GetTagsTagIDOK) Code() int {
	return 200
}

func (o *GetTagsTagIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdOK %s", 200, payload)
}

func (o *GetTagsTagIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdOK %s", 200, payload)
}

func (o *GetTagsTagIDOK) GetPayload() *models.GetTagResponse {
	return o.Payload
}

func (o *GetTagsTagIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetTagResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsTagIDBadRequest creates a GetTagsTagIDBadRequest with default headers values
func NewGetTagsTagIDBadRequest() *GetTagsTagIDBadRequest {
	return &GetTagsTagIDBadRequest{}
}

/*
GetTagsTagIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTagsTagIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get tags tag Id bad request response has a 2xx status code
func (o *GetTagsTagIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags tag Id bad request response has a 3xx status code
func (o *GetTagsTagIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags tag Id bad request response has a 4xx status code
func (o *GetTagsTagIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tags tag Id bad request response has a 5xx status code
func (o *GetTagsTagIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags tag Id bad request response a status code equal to that given
func (o *GetTagsTagIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get tags tag Id bad request response
func (o *GetTagsTagIDBadRequest) Code() int {
	return 400
}

func (o *GetTagsTagIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdBadRequest %s", 400, payload)
}

func (o *GetTagsTagIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdBadRequest %s", 400, payload)
}

func (o *GetTagsTagIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetTagsTagIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsTagIDUnauthorized creates a GetTagsTagIDUnauthorized with default headers values
func NewGetTagsTagIDUnauthorized() *GetTagsTagIDUnauthorized {
	return &GetTagsTagIDUnauthorized{}
}

/*
GetTagsTagIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTagsTagIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get tags tag Id unauthorized response has a 2xx status code
func (o *GetTagsTagIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags tag Id unauthorized response has a 3xx status code
func (o *GetTagsTagIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags tag Id unauthorized response has a 4xx status code
func (o *GetTagsTagIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tags tag Id unauthorized response has a 5xx status code
func (o *GetTagsTagIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags tag Id unauthorized response a status code equal to that given
func (o *GetTagsTagIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get tags tag Id unauthorized response
func (o *GetTagsTagIDUnauthorized) Code() int {
	return 401
}

func (o *GetTagsTagIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdUnauthorized %s", 401, payload)
}

func (o *GetTagsTagIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdUnauthorized %s", 401, payload)
}

func (o *GetTagsTagIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetTagsTagIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsTagIDForbidden creates a GetTagsTagIDForbidden with default headers values
func NewGetTagsTagIDForbidden() *GetTagsTagIDForbidden {
	return &GetTagsTagIDForbidden{}
}

/*
GetTagsTagIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTagsTagIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get tags tag Id forbidden response has a 2xx status code
func (o *GetTagsTagIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags tag Id forbidden response has a 3xx status code
func (o *GetTagsTagIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags tag Id forbidden response has a 4xx status code
func (o *GetTagsTagIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tags tag Id forbidden response has a 5xx status code
func (o *GetTagsTagIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags tag Id forbidden response a status code equal to that given
func (o *GetTagsTagIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get tags tag Id forbidden response
func (o *GetTagsTagIDForbidden) Code() int {
	return 403
}

func (o *GetTagsTagIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdForbidden %s", 403, payload)
}

func (o *GetTagsTagIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdForbidden %s", 403, payload)
}

func (o *GetTagsTagIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetTagsTagIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsTagIDNotFound creates a GetTagsTagIDNotFound with default headers values
func NewGetTagsTagIDNotFound() *GetTagsTagIDNotFound {
	return &GetTagsTagIDNotFound{}
}

/*
GetTagsTagIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetTagsTagIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get tags tag Id not found response has a 2xx status code
func (o *GetTagsTagIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags tag Id not found response has a 3xx status code
func (o *GetTagsTagIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags tag Id not found response has a 4xx status code
func (o *GetTagsTagIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tags tag Id not found response has a 5xx status code
func (o *GetTagsTagIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags tag Id not found response a status code equal to that given
func (o *GetTagsTagIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get tags tag Id not found response
func (o *GetTagsTagIDNotFound) Code() int {
	return 404
}

func (o *GetTagsTagIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdNotFound %s", 404, payload)
}

func (o *GetTagsTagIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tags/{tagId}][%d] getTagsTagIdNotFound %s", 404, payload)
}

func (o *GetTagsTagIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetTagsTagIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
