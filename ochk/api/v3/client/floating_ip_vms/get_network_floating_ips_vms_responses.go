// Code generated by go-swagger; DO NOT EDIT.

package floating_ip_vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetNetworkFloatingIpsVmsReader is a Reader for the GetNetworkFloatingIpsVms structure.
type GetNetworkFloatingIpsVmsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkFloatingIpsVmsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkFloatingIpsVmsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworkFloatingIpsVmsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworkFloatingIpsVmsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNetworkFloatingIpsVmsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /network/floating-ips-vms] GetNetworkFloatingIpsVms", response, response.Code())
	}
}

// NewGetNetworkFloatingIpsVmsOK creates a GetNetworkFloatingIpsVmsOK with default headers values
func NewGetNetworkFloatingIpsVmsOK() *GetNetworkFloatingIpsVmsOK {
	return &GetNetworkFloatingIpsVmsOK{}
}

/*
GetNetworkFloatingIpsVmsOK describes a response with status code 200, with default header values.

OK
*/
type GetNetworkFloatingIpsVmsOK struct {
	Payload *models.ListPortFwdVMResponse
}

// IsSuccess returns true when this get network floating ips vms o k response has a 2xx status code
func (o *GetNetworkFloatingIpsVmsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network floating ips vms o k response has a 3xx status code
func (o *GetNetworkFloatingIpsVmsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips vms o k response has a 4xx status code
func (o *GetNetworkFloatingIpsVmsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network floating ips vms o k response has a 5xx status code
func (o *GetNetworkFloatingIpsVmsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips vms o k response a status code equal to that given
func (o *GetNetworkFloatingIpsVmsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network floating ips vms o k response
func (o *GetNetworkFloatingIpsVmsOK) Code() int {
	return 200
}

func (o *GetNetworkFloatingIpsVmsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips-vms][%d] getNetworkFloatingIpsVmsOK %s", 200, payload)
}

func (o *GetNetworkFloatingIpsVmsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips-vms][%d] getNetworkFloatingIpsVmsOK %s", 200, payload)
}

func (o *GetNetworkFloatingIpsVmsOK) GetPayload() *models.ListPortFwdVMResponse {
	return o.Payload
}

func (o *GetNetworkFloatingIpsVmsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListPortFwdVMResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsVmsBadRequest creates a GetNetworkFloatingIpsVmsBadRequest with default headers values
func NewGetNetworkFloatingIpsVmsBadRequest() *GetNetworkFloatingIpsVmsBadRequest {
	return &GetNetworkFloatingIpsVmsBadRequest{}
}

/*
GetNetworkFloatingIpsVmsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNetworkFloatingIpsVmsBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips vms bad request response has a 2xx status code
func (o *GetNetworkFloatingIpsVmsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips vms bad request response has a 3xx status code
func (o *GetNetworkFloatingIpsVmsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips vms bad request response has a 4xx status code
func (o *GetNetworkFloatingIpsVmsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips vms bad request response has a 5xx status code
func (o *GetNetworkFloatingIpsVmsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips vms bad request response a status code equal to that given
func (o *GetNetworkFloatingIpsVmsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get network floating ips vms bad request response
func (o *GetNetworkFloatingIpsVmsBadRequest) Code() int {
	return 400
}

func (o *GetNetworkFloatingIpsVmsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips-vms][%d] getNetworkFloatingIpsVmsBadRequest %s", 400, payload)
}

func (o *GetNetworkFloatingIpsVmsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips-vms][%d] getNetworkFloatingIpsVmsBadRequest %s", 400, payload)
}

func (o *GetNetworkFloatingIpsVmsBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsVmsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsVmsUnauthorized creates a GetNetworkFloatingIpsVmsUnauthorized with default headers values
func NewGetNetworkFloatingIpsVmsUnauthorized() *GetNetworkFloatingIpsVmsUnauthorized {
	return &GetNetworkFloatingIpsVmsUnauthorized{}
}

/*
GetNetworkFloatingIpsVmsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNetworkFloatingIpsVmsUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips vms unauthorized response has a 2xx status code
func (o *GetNetworkFloatingIpsVmsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips vms unauthorized response has a 3xx status code
func (o *GetNetworkFloatingIpsVmsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips vms unauthorized response has a 4xx status code
func (o *GetNetworkFloatingIpsVmsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips vms unauthorized response has a 5xx status code
func (o *GetNetworkFloatingIpsVmsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips vms unauthorized response a status code equal to that given
func (o *GetNetworkFloatingIpsVmsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get network floating ips vms unauthorized response
func (o *GetNetworkFloatingIpsVmsUnauthorized) Code() int {
	return 401
}

func (o *GetNetworkFloatingIpsVmsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips-vms][%d] getNetworkFloatingIpsVmsUnauthorized %s", 401, payload)
}

func (o *GetNetworkFloatingIpsVmsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips-vms][%d] getNetworkFloatingIpsVmsUnauthorized %s", 401, payload)
}

func (o *GetNetworkFloatingIpsVmsUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsVmsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkFloatingIpsVmsForbidden creates a GetNetworkFloatingIpsVmsForbidden with default headers values
func NewGetNetworkFloatingIpsVmsForbidden() *GetNetworkFloatingIpsVmsForbidden {
	return &GetNetworkFloatingIpsVmsForbidden{}
}

/*
GetNetworkFloatingIpsVmsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNetworkFloatingIpsVmsForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network floating ips vms forbidden response has a 2xx status code
func (o *GetNetworkFloatingIpsVmsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network floating ips vms forbidden response has a 3xx status code
func (o *GetNetworkFloatingIpsVmsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floating ips vms forbidden response has a 4xx status code
func (o *GetNetworkFloatingIpsVmsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network floating ips vms forbidden response has a 5xx status code
func (o *GetNetworkFloatingIpsVmsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floating ips vms forbidden response a status code equal to that given
func (o *GetNetworkFloatingIpsVmsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get network floating ips vms forbidden response
func (o *GetNetworkFloatingIpsVmsForbidden) Code() int {
	return 403
}

func (o *GetNetworkFloatingIpsVmsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips-vms][%d] getNetworkFloatingIpsVmsForbidden %s", 403, payload)
}

func (o *GetNetworkFloatingIpsVmsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/floating-ips-vms][%d] getNetworkFloatingIpsVmsForbidden %s", 403, payload)
}

func (o *GetNetworkFloatingIpsVmsForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkFloatingIpsVmsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
