// Code generated by go-swagger; DO NOT EDIT.

package key_schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetKmsScheduleIDReader is a Reader for the GetKmsScheduleID structure.
type GetKmsScheduleIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKmsScheduleIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKmsScheduleIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetKmsScheduleIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetKmsScheduleIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetKmsScheduleIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /kms/schedule/{id}] GetKmsScheduleID", response, response.Code())
	}
}

// NewGetKmsScheduleIDOK creates a GetKmsScheduleIDOK with default headers values
func NewGetKmsScheduleIDOK() *GetKmsScheduleIDOK {
	return &GetKmsScheduleIDOK{}
}

/*
GetKmsScheduleIDOK describes a response with status code 200, with default header values.

OK
*/
type GetKmsScheduleIDOK struct {
	Payload *models.KeyRotationScheduleGetResponse
}

// IsSuccess returns true when this get kms schedule Id o k response has a 2xx status code
func (o *GetKmsScheduleIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get kms schedule Id o k response has a 3xx status code
func (o *GetKmsScheduleIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get kms schedule Id o k response has a 4xx status code
func (o *GetKmsScheduleIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get kms schedule Id o k response has a 5xx status code
func (o *GetKmsScheduleIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get kms schedule Id o k response a status code equal to that given
func (o *GetKmsScheduleIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get kms schedule Id o k response
func (o *GetKmsScheduleIDOK) Code() int {
	return 200
}

func (o *GetKmsScheduleIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/schedule/{id}][%d] getKmsScheduleIdOK %s", 200, payload)
}

func (o *GetKmsScheduleIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/schedule/{id}][%d] getKmsScheduleIdOK %s", 200, payload)
}

func (o *GetKmsScheduleIDOK) GetPayload() *models.KeyRotationScheduleGetResponse {
	return o.Payload
}

func (o *GetKmsScheduleIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KeyRotationScheduleGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKmsScheduleIDBadRequest creates a GetKmsScheduleIDBadRequest with default headers values
func NewGetKmsScheduleIDBadRequest() *GetKmsScheduleIDBadRequest {
	return &GetKmsScheduleIDBadRequest{}
}

/*
GetKmsScheduleIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetKmsScheduleIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get kms schedule Id bad request response has a 2xx status code
func (o *GetKmsScheduleIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get kms schedule Id bad request response has a 3xx status code
func (o *GetKmsScheduleIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get kms schedule Id bad request response has a 4xx status code
func (o *GetKmsScheduleIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get kms schedule Id bad request response has a 5xx status code
func (o *GetKmsScheduleIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get kms schedule Id bad request response a status code equal to that given
func (o *GetKmsScheduleIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get kms schedule Id bad request response
func (o *GetKmsScheduleIDBadRequest) Code() int {
	return 400
}

func (o *GetKmsScheduleIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/schedule/{id}][%d] getKmsScheduleIdBadRequest %s", 400, payload)
}

func (o *GetKmsScheduleIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/schedule/{id}][%d] getKmsScheduleIdBadRequest %s", 400, payload)
}

func (o *GetKmsScheduleIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetKmsScheduleIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKmsScheduleIDUnauthorized creates a GetKmsScheduleIDUnauthorized with default headers values
func NewGetKmsScheduleIDUnauthorized() *GetKmsScheduleIDUnauthorized {
	return &GetKmsScheduleIDUnauthorized{}
}

/*
GetKmsScheduleIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetKmsScheduleIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get kms schedule Id unauthorized response has a 2xx status code
func (o *GetKmsScheduleIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get kms schedule Id unauthorized response has a 3xx status code
func (o *GetKmsScheduleIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get kms schedule Id unauthorized response has a 4xx status code
func (o *GetKmsScheduleIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get kms schedule Id unauthorized response has a 5xx status code
func (o *GetKmsScheduleIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get kms schedule Id unauthorized response a status code equal to that given
func (o *GetKmsScheduleIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get kms schedule Id unauthorized response
func (o *GetKmsScheduleIDUnauthorized) Code() int {
	return 401
}

func (o *GetKmsScheduleIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/schedule/{id}][%d] getKmsScheduleIdUnauthorized %s", 401, payload)
}

func (o *GetKmsScheduleIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/schedule/{id}][%d] getKmsScheduleIdUnauthorized %s", 401, payload)
}

func (o *GetKmsScheduleIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetKmsScheduleIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKmsScheduleIDForbidden creates a GetKmsScheduleIDForbidden with default headers values
func NewGetKmsScheduleIDForbidden() *GetKmsScheduleIDForbidden {
	return &GetKmsScheduleIDForbidden{}
}

/*
GetKmsScheduleIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetKmsScheduleIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get kms schedule Id forbidden response has a 2xx status code
func (o *GetKmsScheduleIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get kms schedule Id forbidden response has a 3xx status code
func (o *GetKmsScheduleIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get kms schedule Id forbidden response has a 4xx status code
func (o *GetKmsScheduleIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get kms schedule Id forbidden response has a 5xx status code
func (o *GetKmsScheduleIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get kms schedule Id forbidden response a status code equal to that given
func (o *GetKmsScheduleIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get kms schedule Id forbidden response
func (o *GetKmsScheduleIDForbidden) Code() int {
	return 403
}

func (o *GetKmsScheduleIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/schedule/{id}][%d] getKmsScheduleIdForbidden %s", 403, payload)
}

func (o *GetKmsScheduleIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/schedule/{id}][%d] getKmsScheduleIdForbidden %s", 403, payload)
}

func (o *GetKmsScheduleIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetKmsScheduleIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
