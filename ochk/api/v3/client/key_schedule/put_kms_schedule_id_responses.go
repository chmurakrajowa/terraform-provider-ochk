// Code generated by go-swagger; DO NOT EDIT.

package key_schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutKmsScheduleIDReader is a Reader for the PutKmsScheduleID structure.
type PutKmsScheduleIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutKmsScheduleIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutKmsScheduleIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutKmsScheduleIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutKmsScheduleIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutKmsScheduleIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /kms/schedule/{id}] PutKmsScheduleID", response, response.Code())
	}
}

// NewPutKmsScheduleIDOK creates a PutKmsScheduleIDOK with default headers values
func NewPutKmsScheduleIDOK() *PutKmsScheduleIDOK {
	return &PutKmsScheduleIDOK{}
}

/*
PutKmsScheduleIDOK describes a response with status code 200, with default header values.

OK
*/
type PutKmsScheduleIDOK struct {
	Payload *models.UpdateKeyRotationScheduleResponse
}

// IsSuccess returns true when this put kms schedule Id o k response has a 2xx status code
func (o *PutKmsScheduleIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put kms schedule Id o k response has a 3xx status code
func (o *PutKmsScheduleIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put kms schedule Id o k response has a 4xx status code
func (o *PutKmsScheduleIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put kms schedule Id o k response has a 5xx status code
func (o *PutKmsScheduleIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put kms schedule Id o k response a status code equal to that given
func (o *PutKmsScheduleIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put kms schedule Id o k response
func (o *PutKmsScheduleIDOK) Code() int {
	return 200
}

func (o *PutKmsScheduleIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /kms/schedule/{id}][%d] putKmsScheduleIdOK %s", 200, payload)
}

func (o *PutKmsScheduleIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /kms/schedule/{id}][%d] putKmsScheduleIdOK %s", 200, payload)
}

func (o *PutKmsScheduleIDOK) GetPayload() *models.UpdateKeyRotationScheduleResponse {
	return o.Payload
}

func (o *PutKmsScheduleIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateKeyRotationScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutKmsScheduleIDBadRequest creates a PutKmsScheduleIDBadRequest with default headers values
func NewPutKmsScheduleIDBadRequest() *PutKmsScheduleIDBadRequest {
	return &PutKmsScheduleIDBadRequest{}
}

/*
PutKmsScheduleIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutKmsScheduleIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put kms schedule Id bad request response has a 2xx status code
func (o *PutKmsScheduleIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put kms schedule Id bad request response has a 3xx status code
func (o *PutKmsScheduleIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put kms schedule Id bad request response has a 4xx status code
func (o *PutKmsScheduleIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put kms schedule Id bad request response has a 5xx status code
func (o *PutKmsScheduleIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put kms schedule Id bad request response a status code equal to that given
func (o *PutKmsScheduleIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put kms schedule Id bad request response
func (o *PutKmsScheduleIDBadRequest) Code() int {
	return 400
}

func (o *PutKmsScheduleIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /kms/schedule/{id}][%d] putKmsScheduleIdBadRequest %s", 400, payload)
}

func (o *PutKmsScheduleIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /kms/schedule/{id}][%d] putKmsScheduleIdBadRequest %s", 400, payload)
}

func (o *PutKmsScheduleIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutKmsScheduleIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutKmsScheduleIDUnauthorized creates a PutKmsScheduleIDUnauthorized with default headers values
func NewPutKmsScheduleIDUnauthorized() *PutKmsScheduleIDUnauthorized {
	return &PutKmsScheduleIDUnauthorized{}
}

/*
PutKmsScheduleIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutKmsScheduleIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put kms schedule Id unauthorized response has a 2xx status code
func (o *PutKmsScheduleIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put kms schedule Id unauthorized response has a 3xx status code
func (o *PutKmsScheduleIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put kms schedule Id unauthorized response has a 4xx status code
func (o *PutKmsScheduleIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put kms schedule Id unauthorized response has a 5xx status code
func (o *PutKmsScheduleIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put kms schedule Id unauthorized response a status code equal to that given
func (o *PutKmsScheduleIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put kms schedule Id unauthorized response
func (o *PutKmsScheduleIDUnauthorized) Code() int {
	return 401
}

func (o *PutKmsScheduleIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /kms/schedule/{id}][%d] putKmsScheduleIdUnauthorized %s", 401, payload)
}

func (o *PutKmsScheduleIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /kms/schedule/{id}][%d] putKmsScheduleIdUnauthorized %s", 401, payload)
}

func (o *PutKmsScheduleIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutKmsScheduleIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutKmsScheduleIDForbidden creates a PutKmsScheduleIDForbidden with default headers values
func NewPutKmsScheduleIDForbidden() *PutKmsScheduleIDForbidden {
	return &PutKmsScheduleIDForbidden{}
}

/*
PutKmsScheduleIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutKmsScheduleIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put kms schedule Id forbidden response has a 2xx status code
func (o *PutKmsScheduleIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put kms schedule Id forbidden response has a 3xx status code
func (o *PutKmsScheduleIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put kms schedule Id forbidden response has a 4xx status code
func (o *PutKmsScheduleIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put kms schedule Id forbidden response has a 5xx status code
func (o *PutKmsScheduleIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put kms schedule Id forbidden response a status code equal to that given
func (o *PutKmsScheduleIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put kms schedule Id forbidden response
func (o *PutKmsScheduleIDForbidden) Code() int {
	return 403
}

func (o *PutKmsScheduleIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /kms/schedule/{id}][%d] putKmsScheduleIdForbidden %s", 403, payload)
}

func (o *PutKmsScheduleIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /kms/schedule/{id}][%d] putKmsScheduleIdForbidden %s", 403, payload)
}

func (o *PutKmsScheduleIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutKmsScheduleIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
