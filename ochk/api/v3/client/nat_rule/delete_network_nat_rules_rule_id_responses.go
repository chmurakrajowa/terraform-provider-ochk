// Code generated by go-swagger; DO NOT EDIT.

package nat_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// DeleteNetworkNatRulesRuleIDReader is a Reader for the DeleteNetworkNatRulesRuleID structure.
type DeleteNetworkNatRulesRuleIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNetworkNatRulesRuleIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNetworkNatRulesRuleIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteNetworkNatRulesRuleIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteNetworkNatRulesRuleIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteNetworkNatRulesRuleIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteNetworkNatRulesRuleIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /network/nat/rules/{ruleId}] DeleteNetworkNatRulesRuleID", response, response.Code())
	}
}

// NewDeleteNetworkNatRulesRuleIDOK creates a DeleteNetworkNatRulesRuleIDOK with default headers values
func NewDeleteNetworkNatRulesRuleIDOK() *DeleteNetworkNatRulesRuleIDOK {
	return &DeleteNetworkNatRulesRuleIDOK{}
}

/*
DeleteNetworkNatRulesRuleIDOK describes a response with status code 200, with default header values.

OK
*/
type DeleteNetworkNatRulesRuleIDOK struct {
	Payload *models.DeleteNATRuleResponse
}

// IsSuccess returns true when this delete network nat rules rule Id o k response has a 2xx status code
func (o *DeleteNetworkNatRulesRuleIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete network nat rules rule Id o k response has a 3xx status code
func (o *DeleteNetworkNatRulesRuleIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network nat rules rule Id o k response has a 4xx status code
func (o *DeleteNetworkNatRulesRuleIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete network nat rules rule Id o k response has a 5xx status code
func (o *DeleteNetworkNatRulesRuleIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network nat rules rule Id o k response a status code equal to that given
func (o *DeleteNetworkNatRulesRuleIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete network nat rules rule Id o k response
func (o *DeleteNetworkNatRulesRuleIDOK) Code() int {
	return 200
}

func (o *DeleteNetworkNatRulesRuleIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdOK %s", 200, payload)
}

func (o *DeleteNetworkNatRulesRuleIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdOK %s", 200, payload)
}

func (o *DeleteNetworkNatRulesRuleIDOK) GetPayload() *models.DeleteNATRuleResponse {
	return o.Payload
}

func (o *DeleteNetworkNatRulesRuleIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteNATRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkNatRulesRuleIDBadRequest creates a DeleteNetworkNatRulesRuleIDBadRequest with default headers values
func NewDeleteNetworkNatRulesRuleIDBadRequest() *DeleteNetworkNatRulesRuleIDBadRequest {
	return &DeleteNetworkNatRulesRuleIDBadRequest{}
}

/*
DeleteNetworkNatRulesRuleIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteNetworkNatRulesRuleIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network nat rules rule Id bad request response has a 2xx status code
func (o *DeleteNetworkNatRulesRuleIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network nat rules rule Id bad request response has a 3xx status code
func (o *DeleteNetworkNatRulesRuleIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network nat rules rule Id bad request response has a 4xx status code
func (o *DeleteNetworkNatRulesRuleIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network nat rules rule Id bad request response has a 5xx status code
func (o *DeleteNetworkNatRulesRuleIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network nat rules rule Id bad request response a status code equal to that given
func (o *DeleteNetworkNatRulesRuleIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete network nat rules rule Id bad request response
func (o *DeleteNetworkNatRulesRuleIDBadRequest) Code() int {
	return 400
}

func (o *DeleteNetworkNatRulesRuleIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdBadRequest %s", 400, payload)
}

func (o *DeleteNetworkNatRulesRuleIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdBadRequest %s", 400, payload)
}

func (o *DeleteNetworkNatRulesRuleIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkNatRulesRuleIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkNatRulesRuleIDUnauthorized creates a DeleteNetworkNatRulesRuleIDUnauthorized with default headers values
func NewDeleteNetworkNatRulesRuleIDUnauthorized() *DeleteNetworkNatRulesRuleIDUnauthorized {
	return &DeleteNetworkNatRulesRuleIDUnauthorized{}
}

/*
DeleteNetworkNatRulesRuleIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteNetworkNatRulesRuleIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network nat rules rule Id unauthorized response has a 2xx status code
func (o *DeleteNetworkNatRulesRuleIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network nat rules rule Id unauthorized response has a 3xx status code
func (o *DeleteNetworkNatRulesRuleIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network nat rules rule Id unauthorized response has a 4xx status code
func (o *DeleteNetworkNatRulesRuleIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network nat rules rule Id unauthorized response has a 5xx status code
func (o *DeleteNetworkNatRulesRuleIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network nat rules rule Id unauthorized response a status code equal to that given
func (o *DeleteNetworkNatRulesRuleIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete network nat rules rule Id unauthorized response
func (o *DeleteNetworkNatRulesRuleIDUnauthorized) Code() int {
	return 401
}

func (o *DeleteNetworkNatRulesRuleIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdUnauthorized %s", 401, payload)
}

func (o *DeleteNetworkNatRulesRuleIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdUnauthorized %s", 401, payload)
}

func (o *DeleteNetworkNatRulesRuleIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkNatRulesRuleIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkNatRulesRuleIDForbidden creates a DeleteNetworkNatRulesRuleIDForbidden with default headers values
func NewDeleteNetworkNatRulesRuleIDForbidden() *DeleteNetworkNatRulesRuleIDForbidden {
	return &DeleteNetworkNatRulesRuleIDForbidden{}
}

/*
DeleteNetworkNatRulesRuleIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteNetworkNatRulesRuleIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network nat rules rule Id forbidden response has a 2xx status code
func (o *DeleteNetworkNatRulesRuleIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network nat rules rule Id forbidden response has a 3xx status code
func (o *DeleteNetworkNatRulesRuleIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network nat rules rule Id forbidden response has a 4xx status code
func (o *DeleteNetworkNatRulesRuleIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network nat rules rule Id forbidden response has a 5xx status code
func (o *DeleteNetworkNatRulesRuleIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network nat rules rule Id forbidden response a status code equal to that given
func (o *DeleteNetworkNatRulesRuleIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete network nat rules rule Id forbidden response
func (o *DeleteNetworkNatRulesRuleIDForbidden) Code() int {
	return 403
}

func (o *DeleteNetworkNatRulesRuleIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdForbidden %s", 403, payload)
}

func (o *DeleteNetworkNatRulesRuleIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdForbidden %s", 403, payload)
}

func (o *DeleteNetworkNatRulesRuleIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkNatRulesRuleIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNetworkNatRulesRuleIDNotFound creates a DeleteNetworkNatRulesRuleIDNotFound with default headers values
func NewDeleteNetworkNatRulesRuleIDNotFound() *DeleteNetworkNatRulesRuleIDNotFound {
	return &DeleteNetworkNatRulesRuleIDNotFound{}
}

/*
DeleteNetworkNatRulesRuleIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteNetworkNatRulesRuleIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this delete network nat rules rule Id not found response has a 2xx status code
func (o *DeleteNetworkNatRulesRuleIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete network nat rules rule Id not found response has a 3xx status code
func (o *DeleteNetworkNatRulesRuleIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete network nat rules rule Id not found response has a 4xx status code
func (o *DeleteNetworkNatRulesRuleIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete network nat rules rule Id not found response has a 5xx status code
func (o *DeleteNetworkNatRulesRuleIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete network nat rules rule Id not found response a status code equal to that given
func (o *DeleteNetworkNatRulesRuleIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete network nat rules rule Id not found response
func (o *DeleteNetworkNatRulesRuleIDNotFound) Code() int {
	return 404
}

func (o *DeleteNetworkNatRulesRuleIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdNotFound %s", 404, payload)
}

func (o *DeleteNetworkNatRulesRuleIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /network/nat/rules/{ruleId}][%d] deleteNetworkNatRulesRuleIdNotFound %s", 404, payload)
}

func (o *DeleteNetworkNatRulesRuleIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *DeleteNetworkNatRulesRuleIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
