// Code generated by go-swagger; DO NOT EDIT.

package nat_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetNetworkNatRulesReader is a Reader for the GetNetworkNatRules structure.
type GetNetworkNatRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkNatRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkNatRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworkNatRulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworkNatRulesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNetworkNatRulesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /network/nat/rules] GetNetworkNatRules", response, response.Code())
	}
}

// NewGetNetworkNatRulesOK creates a GetNetworkNatRulesOK with default headers values
func NewGetNetworkNatRulesOK() *GetNetworkNatRulesOK {
	return &GetNetworkNatRulesOK{}
}

/*
GetNetworkNatRulesOK describes a response with status code 200, with default header values.

OK
*/
type GetNetworkNatRulesOK struct {
	Payload *models.ListNATRulesResponse
}

// IsSuccess returns true when this get network nat rules o k response has a 2xx status code
func (o *GetNetworkNatRulesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network nat rules o k response has a 3xx status code
func (o *GetNetworkNatRulesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network nat rules o k response has a 4xx status code
func (o *GetNetworkNatRulesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network nat rules o k response has a 5xx status code
func (o *GetNetworkNatRulesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network nat rules o k response a status code equal to that given
func (o *GetNetworkNatRulesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network nat rules o k response
func (o *GetNetworkNatRulesOK) Code() int {
	return 200
}

func (o *GetNetworkNatRulesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules][%d] getNetworkNatRulesOK %s", 200, payload)
}

func (o *GetNetworkNatRulesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules][%d] getNetworkNatRulesOK %s", 200, payload)
}

func (o *GetNetworkNatRulesOK) GetPayload() *models.ListNATRulesResponse {
	return o.Payload
}

func (o *GetNetworkNatRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListNATRulesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkNatRulesBadRequest creates a GetNetworkNatRulesBadRequest with default headers values
func NewGetNetworkNatRulesBadRequest() *GetNetworkNatRulesBadRequest {
	return &GetNetworkNatRulesBadRequest{}
}

/*
GetNetworkNatRulesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNetworkNatRulesBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network nat rules bad request response has a 2xx status code
func (o *GetNetworkNatRulesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network nat rules bad request response has a 3xx status code
func (o *GetNetworkNatRulesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network nat rules bad request response has a 4xx status code
func (o *GetNetworkNatRulesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network nat rules bad request response has a 5xx status code
func (o *GetNetworkNatRulesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get network nat rules bad request response a status code equal to that given
func (o *GetNetworkNatRulesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get network nat rules bad request response
func (o *GetNetworkNatRulesBadRequest) Code() int {
	return 400
}

func (o *GetNetworkNatRulesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules][%d] getNetworkNatRulesBadRequest %s", 400, payload)
}

func (o *GetNetworkNatRulesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules][%d] getNetworkNatRulesBadRequest %s", 400, payload)
}

func (o *GetNetworkNatRulesBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkNatRulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkNatRulesUnauthorized creates a GetNetworkNatRulesUnauthorized with default headers values
func NewGetNetworkNatRulesUnauthorized() *GetNetworkNatRulesUnauthorized {
	return &GetNetworkNatRulesUnauthorized{}
}

/*
GetNetworkNatRulesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNetworkNatRulesUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network nat rules unauthorized response has a 2xx status code
func (o *GetNetworkNatRulesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network nat rules unauthorized response has a 3xx status code
func (o *GetNetworkNatRulesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network nat rules unauthorized response has a 4xx status code
func (o *GetNetworkNatRulesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network nat rules unauthorized response has a 5xx status code
func (o *GetNetworkNatRulesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get network nat rules unauthorized response a status code equal to that given
func (o *GetNetworkNatRulesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get network nat rules unauthorized response
func (o *GetNetworkNatRulesUnauthorized) Code() int {
	return 401
}

func (o *GetNetworkNatRulesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules][%d] getNetworkNatRulesUnauthorized %s", 401, payload)
}

func (o *GetNetworkNatRulesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules][%d] getNetworkNatRulesUnauthorized %s", 401, payload)
}

func (o *GetNetworkNatRulesUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkNatRulesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkNatRulesForbidden creates a GetNetworkNatRulesForbidden with default headers values
func NewGetNetworkNatRulesForbidden() *GetNetworkNatRulesForbidden {
	return &GetNetworkNatRulesForbidden{}
}

/*
GetNetworkNatRulesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNetworkNatRulesForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network nat rules forbidden response has a 2xx status code
func (o *GetNetworkNatRulesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network nat rules forbidden response has a 3xx status code
func (o *GetNetworkNatRulesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network nat rules forbidden response has a 4xx status code
func (o *GetNetworkNatRulesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network nat rules forbidden response has a 5xx status code
func (o *GetNetworkNatRulesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get network nat rules forbidden response a status code equal to that given
func (o *GetNetworkNatRulesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get network nat rules forbidden response
func (o *GetNetworkNatRulesForbidden) Code() int {
	return 403
}

func (o *GetNetworkNatRulesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules][%d] getNetworkNatRulesForbidden %s", 403, payload)
}

func (o *GetNetworkNatRulesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules][%d] getNetworkNatRulesForbidden %s", 403, payload)
}

func (o *GetNetworkNatRulesForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkNatRulesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
