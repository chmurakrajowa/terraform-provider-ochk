// Code generated by go-swagger; DO NOT EDIT.

package nat_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetNetworkNatRulesRuleIDReader is a Reader for the GetNetworkNatRulesRuleID structure.
type GetNetworkNatRulesRuleIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkNatRulesRuleIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkNatRulesRuleIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworkNatRulesRuleIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworkNatRulesRuleIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNetworkNatRulesRuleIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNetworkNatRulesRuleIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /network/nat/rules/{ruleId}] GetNetworkNatRulesRuleID", response, response.Code())
	}
}

// NewGetNetworkNatRulesRuleIDOK creates a GetNetworkNatRulesRuleIDOK with default headers values
func NewGetNetworkNatRulesRuleIDOK() *GetNetworkNatRulesRuleIDOK {
	return &GetNetworkNatRulesRuleIDOK{}
}

/*
GetNetworkNatRulesRuleIDOK describes a response with status code 200, with default header values.

OK
*/
type GetNetworkNatRulesRuleIDOK struct {
	Payload *models.GetNATRuleResponse
}

// IsSuccess returns true when this get network nat rules rule Id o k response has a 2xx status code
func (o *GetNetworkNatRulesRuleIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network nat rules rule Id o k response has a 3xx status code
func (o *GetNetworkNatRulesRuleIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network nat rules rule Id o k response has a 4xx status code
func (o *GetNetworkNatRulesRuleIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network nat rules rule Id o k response has a 5xx status code
func (o *GetNetworkNatRulesRuleIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network nat rules rule Id o k response a status code equal to that given
func (o *GetNetworkNatRulesRuleIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network nat rules rule Id o k response
func (o *GetNetworkNatRulesRuleIDOK) Code() int {
	return 200
}

func (o *GetNetworkNatRulesRuleIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdOK %s", 200, payload)
}

func (o *GetNetworkNatRulesRuleIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdOK %s", 200, payload)
}

func (o *GetNetworkNatRulesRuleIDOK) GetPayload() *models.GetNATRuleResponse {
	return o.Payload
}

func (o *GetNetworkNatRulesRuleIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetNATRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkNatRulesRuleIDBadRequest creates a GetNetworkNatRulesRuleIDBadRequest with default headers values
func NewGetNetworkNatRulesRuleIDBadRequest() *GetNetworkNatRulesRuleIDBadRequest {
	return &GetNetworkNatRulesRuleIDBadRequest{}
}

/*
GetNetworkNatRulesRuleIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNetworkNatRulesRuleIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network nat rules rule Id bad request response has a 2xx status code
func (o *GetNetworkNatRulesRuleIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network nat rules rule Id bad request response has a 3xx status code
func (o *GetNetworkNatRulesRuleIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network nat rules rule Id bad request response has a 4xx status code
func (o *GetNetworkNatRulesRuleIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network nat rules rule Id bad request response has a 5xx status code
func (o *GetNetworkNatRulesRuleIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get network nat rules rule Id bad request response a status code equal to that given
func (o *GetNetworkNatRulesRuleIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get network nat rules rule Id bad request response
func (o *GetNetworkNatRulesRuleIDBadRequest) Code() int {
	return 400
}

func (o *GetNetworkNatRulesRuleIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdBadRequest %s", 400, payload)
}

func (o *GetNetworkNatRulesRuleIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdBadRequest %s", 400, payload)
}

func (o *GetNetworkNatRulesRuleIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkNatRulesRuleIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkNatRulesRuleIDUnauthorized creates a GetNetworkNatRulesRuleIDUnauthorized with default headers values
func NewGetNetworkNatRulesRuleIDUnauthorized() *GetNetworkNatRulesRuleIDUnauthorized {
	return &GetNetworkNatRulesRuleIDUnauthorized{}
}

/*
GetNetworkNatRulesRuleIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNetworkNatRulesRuleIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network nat rules rule Id unauthorized response has a 2xx status code
func (o *GetNetworkNatRulesRuleIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network nat rules rule Id unauthorized response has a 3xx status code
func (o *GetNetworkNatRulesRuleIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network nat rules rule Id unauthorized response has a 4xx status code
func (o *GetNetworkNatRulesRuleIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network nat rules rule Id unauthorized response has a 5xx status code
func (o *GetNetworkNatRulesRuleIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get network nat rules rule Id unauthorized response a status code equal to that given
func (o *GetNetworkNatRulesRuleIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get network nat rules rule Id unauthorized response
func (o *GetNetworkNatRulesRuleIDUnauthorized) Code() int {
	return 401
}

func (o *GetNetworkNatRulesRuleIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdUnauthorized %s", 401, payload)
}

func (o *GetNetworkNatRulesRuleIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdUnauthorized %s", 401, payload)
}

func (o *GetNetworkNatRulesRuleIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkNatRulesRuleIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkNatRulesRuleIDForbidden creates a GetNetworkNatRulesRuleIDForbidden with default headers values
func NewGetNetworkNatRulesRuleIDForbidden() *GetNetworkNatRulesRuleIDForbidden {
	return &GetNetworkNatRulesRuleIDForbidden{}
}

/*
GetNetworkNatRulesRuleIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNetworkNatRulesRuleIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network nat rules rule Id forbidden response has a 2xx status code
func (o *GetNetworkNatRulesRuleIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network nat rules rule Id forbidden response has a 3xx status code
func (o *GetNetworkNatRulesRuleIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network nat rules rule Id forbidden response has a 4xx status code
func (o *GetNetworkNatRulesRuleIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network nat rules rule Id forbidden response has a 5xx status code
func (o *GetNetworkNatRulesRuleIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get network nat rules rule Id forbidden response a status code equal to that given
func (o *GetNetworkNatRulesRuleIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get network nat rules rule Id forbidden response
func (o *GetNetworkNatRulesRuleIDForbidden) Code() int {
	return 403
}

func (o *GetNetworkNatRulesRuleIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdForbidden %s", 403, payload)
}

func (o *GetNetworkNatRulesRuleIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdForbidden %s", 403, payload)
}

func (o *GetNetworkNatRulesRuleIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkNatRulesRuleIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkNatRulesRuleIDNotFound creates a GetNetworkNatRulesRuleIDNotFound with default headers values
func NewGetNetworkNatRulesRuleIDNotFound() *GetNetworkNatRulesRuleIDNotFound {
	return &GetNetworkNatRulesRuleIDNotFound{}
}

/*
GetNetworkNatRulesRuleIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetNetworkNatRulesRuleIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get network nat rules rule Id not found response has a 2xx status code
func (o *GetNetworkNatRulesRuleIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get network nat rules rule Id not found response has a 3xx status code
func (o *GetNetworkNatRulesRuleIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network nat rules rule Id not found response has a 4xx status code
func (o *GetNetworkNatRulesRuleIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get network nat rules rule Id not found response has a 5xx status code
func (o *GetNetworkNatRulesRuleIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get network nat rules rule Id not found response a status code equal to that given
func (o *GetNetworkNatRulesRuleIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get network nat rules rule Id not found response
func (o *GetNetworkNatRulesRuleIDNotFound) Code() int {
	return 404
}

func (o *GetNetworkNatRulesRuleIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdNotFound %s", 404, payload)
}

func (o *GetNetworkNatRulesRuleIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/nat/rules/{ruleId}][%d] getNetworkNatRulesRuleIdNotFound %s", 404, payload)
}

func (o *GetNetworkNatRulesRuleIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetNetworkNatRulesRuleIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
