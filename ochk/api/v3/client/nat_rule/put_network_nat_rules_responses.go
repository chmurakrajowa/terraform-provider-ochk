// Code generated by go-swagger; DO NOT EDIT.

package nat_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutNetworkNatRulesReader is a Reader for the PutNetworkNatRules structure.
type PutNetworkNatRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutNetworkNatRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutNetworkNatRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutNetworkNatRulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutNetworkNatRulesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutNetworkNatRulesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /network/nat/rules] PutNetworkNatRules", response, response.Code())
	}
}

// NewPutNetworkNatRulesOK creates a PutNetworkNatRulesOK with default headers values
func NewPutNetworkNatRulesOK() *PutNetworkNatRulesOK {
	return &PutNetworkNatRulesOK{}
}

/*
PutNetworkNatRulesOK describes a response with status code 200, with default header values.

OK
*/
type PutNetworkNatRulesOK struct {
	Payload *models.CreateNATRuleResponse
}

// IsSuccess returns true when this put network nat rules o k response has a 2xx status code
func (o *PutNetworkNatRulesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put network nat rules o k response has a 3xx status code
func (o *PutNetworkNatRulesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network nat rules o k response has a 4xx status code
func (o *PutNetworkNatRulesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put network nat rules o k response has a 5xx status code
func (o *PutNetworkNatRulesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put network nat rules o k response a status code equal to that given
func (o *PutNetworkNatRulesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put network nat rules o k response
func (o *PutNetworkNatRulesOK) Code() int {
	return 200
}

func (o *PutNetworkNatRulesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/nat/rules][%d] putNetworkNatRulesOK %s", 200, payload)
}

func (o *PutNetworkNatRulesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/nat/rules][%d] putNetworkNatRulesOK %s", 200, payload)
}

func (o *PutNetworkNatRulesOK) GetPayload() *models.CreateNATRuleResponse {
	return o.Payload
}

func (o *PutNetworkNatRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateNATRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkNatRulesBadRequest creates a PutNetworkNatRulesBadRequest with default headers values
func NewPutNetworkNatRulesBadRequest() *PutNetworkNatRulesBadRequest {
	return &PutNetworkNatRulesBadRequest{}
}

/*
PutNetworkNatRulesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutNetworkNatRulesBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network nat rules bad request response has a 2xx status code
func (o *PutNetworkNatRulesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network nat rules bad request response has a 3xx status code
func (o *PutNetworkNatRulesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network nat rules bad request response has a 4xx status code
func (o *PutNetworkNatRulesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network nat rules bad request response has a 5xx status code
func (o *PutNetworkNatRulesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put network nat rules bad request response a status code equal to that given
func (o *PutNetworkNatRulesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put network nat rules bad request response
func (o *PutNetworkNatRulesBadRequest) Code() int {
	return 400
}

func (o *PutNetworkNatRulesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/nat/rules][%d] putNetworkNatRulesBadRequest %s", 400, payload)
}

func (o *PutNetworkNatRulesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/nat/rules][%d] putNetworkNatRulesBadRequest %s", 400, payload)
}

func (o *PutNetworkNatRulesBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkNatRulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkNatRulesUnauthorized creates a PutNetworkNatRulesUnauthorized with default headers values
func NewPutNetworkNatRulesUnauthorized() *PutNetworkNatRulesUnauthorized {
	return &PutNetworkNatRulesUnauthorized{}
}

/*
PutNetworkNatRulesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutNetworkNatRulesUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network nat rules unauthorized response has a 2xx status code
func (o *PutNetworkNatRulesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network nat rules unauthorized response has a 3xx status code
func (o *PutNetworkNatRulesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network nat rules unauthorized response has a 4xx status code
func (o *PutNetworkNatRulesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network nat rules unauthorized response has a 5xx status code
func (o *PutNetworkNatRulesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put network nat rules unauthorized response a status code equal to that given
func (o *PutNetworkNatRulesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put network nat rules unauthorized response
func (o *PutNetworkNatRulesUnauthorized) Code() int {
	return 401
}

func (o *PutNetworkNatRulesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/nat/rules][%d] putNetworkNatRulesUnauthorized %s", 401, payload)
}

func (o *PutNetworkNatRulesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/nat/rules][%d] putNetworkNatRulesUnauthorized %s", 401, payload)
}

func (o *PutNetworkNatRulesUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkNatRulesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNetworkNatRulesForbidden creates a PutNetworkNatRulesForbidden with default headers values
func NewPutNetworkNatRulesForbidden() *PutNetworkNatRulesForbidden {
	return &PutNetworkNatRulesForbidden{}
}

/*
PutNetworkNatRulesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutNetworkNatRulesForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put network nat rules forbidden response has a 2xx status code
func (o *PutNetworkNatRulesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put network nat rules forbidden response has a 3xx status code
func (o *PutNetworkNatRulesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put network nat rules forbidden response has a 4xx status code
func (o *PutNetworkNatRulesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put network nat rules forbidden response has a 5xx status code
func (o *PutNetworkNatRulesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put network nat rules forbidden response a status code equal to that given
func (o *PutNetworkNatRulesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put network nat rules forbidden response
func (o *PutNetworkNatRulesForbidden) Code() int {
	return 403
}

func (o *PutNetworkNatRulesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/nat/rules][%d] putNetworkNatRulesForbidden %s", 403, payload)
}

func (o *PutNetworkNatRulesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /network/nat/rules][%d] putNetworkNatRulesForbidden %s", 403, payload)
}

func (o *PutNetworkNatRulesForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutNetworkNatRulesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
