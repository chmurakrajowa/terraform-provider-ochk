// Code generated by go-swagger; DO NOT EDIT.

package firewall_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDReader is a Reader for the PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID structure.
type PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}] PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID", response, response.Code())
	}
}

// NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK creates a PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK with default headers values
func NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK() *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK {
	return &PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK{}
}

/*
PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK describes a response with status code 200, with default header values.

OK
*/
type PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK struct {
	Payload *models.UpdateFirewallRuleResponse
}

// IsSuccess returns true when this put projects project Id osc security groups security group Id firewall rule Id o k response has a 2xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put projects project Id osc security groups security group Id firewall rule Id o k response has a 3xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put projects project Id osc security groups security group Id firewall rule Id o k response has a 4xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put projects project Id osc security groups security group Id firewall rule Id o k response has a 5xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put projects project Id osc security groups security group Id firewall rule Id o k response a status code equal to that given
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put projects project Id osc security groups security group Id firewall rule Id o k response
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) Code() int {
	return 200
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}][%d] putProjectsProjectIdOscSecurityGroupsSecurityGroupIdFirewallRuleIdOK %s", 200, payload)
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}][%d] putProjectsProjectIdOscSecurityGroupsSecurityGroupIdFirewallRuleIdOK %s", 200, payload)
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) GetPayload() *models.UpdateFirewallRuleResponse {
	return o.Payload
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateFirewallRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest creates a PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest with default headers values
func NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest() *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest {
	return &PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest{}
}

/*
PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put projects project Id osc security groups security group Id firewall rule Id bad request response has a 2xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put projects project Id osc security groups security group Id firewall rule Id bad request response has a 3xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put projects project Id osc security groups security group Id firewall rule Id bad request response has a 4xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put projects project Id osc security groups security group Id firewall rule Id bad request response has a 5xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put projects project Id osc security groups security group Id firewall rule Id bad request response a status code equal to that given
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put projects project Id osc security groups security group Id firewall rule Id bad request response
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) Code() int {
	return 400
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}][%d] putProjectsProjectIdOscSecurityGroupsSecurityGroupIdFirewallRuleIdBadRequest %s", 400, payload)
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}][%d] putProjectsProjectIdOscSecurityGroupsSecurityGroupIdFirewallRuleIdBadRequest %s", 400, payload)
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized creates a PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized with default headers values
func NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized() *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized {
	return &PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized{}
}

/*
PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put projects project Id osc security groups security group Id firewall rule Id unauthorized response has a 2xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put projects project Id osc security groups security group Id firewall rule Id unauthorized response has a 3xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put projects project Id osc security groups security group Id firewall rule Id unauthorized response has a 4xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put projects project Id osc security groups security group Id firewall rule Id unauthorized response has a 5xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put projects project Id osc security groups security group Id firewall rule Id unauthorized response a status code equal to that given
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put projects project Id osc security groups security group Id firewall rule Id unauthorized response
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) Code() int {
	return 401
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}][%d] putProjectsProjectIdOscSecurityGroupsSecurityGroupIdFirewallRuleIdUnauthorized %s", 401, payload)
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}][%d] putProjectsProjectIdOscSecurityGroupsSecurityGroupIdFirewallRuleIdUnauthorized %s", 401, payload)
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden creates a PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden with default headers values
func NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden() *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden {
	return &PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden{}
}

/*
PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put projects project Id osc security groups security group Id firewall rule Id forbidden response has a 2xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put projects project Id osc security groups security group Id firewall rule Id forbidden response has a 3xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put projects project Id osc security groups security group Id firewall rule Id forbidden response has a 4xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put projects project Id osc security groups security group Id firewall rule Id forbidden response has a 5xx status code
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put projects project Id osc security groups security group Id firewall rule Id forbidden response a status code equal to that given
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put projects project Id osc security groups security group Id firewall rule Id forbidden response
func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) Code() int {
	return 403
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}][%d] putProjectsProjectIdOscSecurityGroupsSecurityGroupIdFirewallRuleIdForbidden %s", 403, payload)
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}][%d] putProjectsProjectIdOscSecurityGroupsSecurityGroupIdFirewallRuleIdForbidden %s", 403, payload)
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
