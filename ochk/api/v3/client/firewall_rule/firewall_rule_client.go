// Code generated by go-swagger; DO NOT EDIT.

package firewall_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new firewall rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new firewall rule API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new firewall rule API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for firewall rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationStarJSON sets the Content-Type header to "application/*+json".
func WithContentTypeApplicationStarJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/*+json"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID(params *DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDParams, opts ...ClientOption) (*DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK, error)

	GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall(params *GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallParams, opts ...ClientOption) (*GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallOK, error)

	GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID(params *GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDParams, opts ...ClientOption) (*GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK, error)

	PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall(params *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallParams, opts ...ClientOption) (*PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallOK, error)

	PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID(params *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDParams, opts ...ClientOption) (*PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID deletes firewall rule o s c

Delete firewall rule (OSC)
*/
func (a *Client) DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID(params *DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDParams, opts ...ClientOption) (*DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall lists firewall rules o s c

List firewall rules (OSC)
*/
func (a *Client) GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall(params *GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallParams, opts ...ClientOption) (*GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/osc/security-groups/{securityGroupId}/firewall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID gets firewall rule o s c

Get firewall rule (OSC)
*/
func (a *Client) GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID(params *GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDParams, opts ...ClientOption) (*GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall creates firewall rule o s c

Create firewall rule (OSC)
*/
func (a *Client) PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall(params *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallParams, opts ...ClientOption) (*PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}/osc/security-groups/{securityGroupId}/firewall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID updates firewall rule o s c

Update firewall rule (OSC)
*/
func (a *Client) PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID(params *PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDParams, opts ...ClientOption) (*PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}/osc/security-groups/{securityGroupId}/firewall/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/*+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectsProjectIDOscSecurityGroupsSecurityGroupIDFirewallRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
