// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutBillingAccountsAccountIDReader is a Reader for the PutBillingAccountsAccountID structure.
type PutBillingAccountsAccountIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutBillingAccountsAccountIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutBillingAccountsAccountIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutBillingAccountsAccountIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutBillingAccountsAccountIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutBillingAccountsAccountIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutBillingAccountsAccountIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /billing/accounts/{accountId}] PutBillingAccountsAccountID", response, response.Code())
	}
}

// NewPutBillingAccountsAccountIDOK creates a PutBillingAccountsAccountIDOK with default headers values
func NewPutBillingAccountsAccountIDOK() *PutBillingAccountsAccountIDOK {
	return &PutBillingAccountsAccountIDOK{}
}

/*
PutBillingAccountsAccountIDOK describes a response with status code 200, with default header values.

OK
*/
type PutBillingAccountsAccountIDOK struct {
	Payload *models.UpdateAccountResponse
}

// IsSuccess returns true when this put billing accounts account Id o k response has a 2xx status code
func (o *PutBillingAccountsAccountIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put billing accounts account Id o k response has a 3xx status code
func (o *PutBillingAccountsAccountIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts account Id o k response has a 4xx status code
func (o *PutBillingAccountsAccountIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put billing accounts account Id o k response has a 5xx status code
func (o *PutBillingAccountsAccountIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts account Id o k response a status code equal to that given
func (o *PutBillingAccountsAccountIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put billing accounts account Id o k response
func (o *PutBillingAccountsAccountIDOK) Code() int {
	return 200
}

func (o *PutBillingAccountsAccountIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdOK %s", 200, payload)
}

func (o *PutBillingAccountsAccountIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdOK %s", 200, payload)
}

func (o *PutBillingAccountsAccountIDOK) GetPayload() *models.UpdateAccountResponse {
	return o.Payload
}

func (o *PutBillingAccountsAccountIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutBillingAccountsAccountIDBadRequest creates a PutBillingAccountsAccountIDBadRequest with default headers values
func NewPutBillingAccountsAccountIDBadRequest() *PutBillingAccountsAccountIDBadRequest {
	return &PutBillingAccountsAccountIDBadRequest{}
}

/*
PutBillingAccountsAccountIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutBillingAccountsAccountIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put billing accounts account Id bad request response has a 2xx status code
func (o *PutBillingAccountsAccountIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put billing accounts account Id bad request response has a 3xx status code
func (o *PutBillingAccountsAccountIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts account Id bad request response has a 4xx status code
func (o *PutBillingAccountsAccountIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put billing accounts account Id bad request response has a 5xx status code
func (o *PutBillingAccountsAccountIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts account Id bad request response a status code equal to that given
func (o *PutBillingAccountsAccountIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put billing accounts account Id bad request response
func (o *PutBillingAccountsAccountIDBadRequest) Code() int {
	return 400
}

func (o *PutBillingAccountsAccountIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdBadRequest %s", 400, payload)
}

func (o *PutBillingAccountsAccountIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdBadRequest %s", 400, payload)
}

func (o *PutBillingAccountsAccountIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutBillingAccountsAccountIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutBillingAccountsAccountIDUnauthorized creates a PutBillingAccountsAccountIDUnauthorized with default headers values
func NewPutBillingAccountsAccountIDUnauthorized() *PutBillingAccountsAccountIDUnauthorized {
	return &PutBillingAccountsAccountIDUnauthorized{}
}

/*
PutBillingAccountsAccountIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutBillingAccountsAccountIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put billing accounts account Id unauthorized response has a 2xx status code
func (o *PutBillingAccountsAccountIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put billing accounts account Id unauthorized response has a 3xx status code
func (o *PutBillingAccountsAccountIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts account Id unauthorized response has a 4xx status code
func (o *PutBillingAccountsAccountIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put billing accounts account Id unauthorized response has a 5xx status code
func (o *PutBillingAccountsAccountIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts account Id unauthorized response a status code equal to that given
func (o *PutBillingAccountsAccountIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put billing accounts account Id unauthorized response
func (o *PutBillingAccountsAccountIDUnauthorized) Code() int {
	return 401
}

func (o *PutBillingAccountsAccountIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdUnauthorized %s", 401, payload)
}

func (o *PutBillingAccountsAccountIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdUnauthorized %s", 401, payload)
}

func (o *PutBillingAccountsAccountIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutBillingAccountsAccountIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutBillingAccountsAccountIDForbidden creates a PutBillingAccountsAccountIDForbidden with default headers values
func NewPutBillingAccountsAccountIDForbidden() *PutBillingAccountsAccountIDForbidden {
	return &PutBillingAccountsAccountIDForbidden{}
}

/*
PutBillingAccountsAccountIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutBillingAccountsAccountIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put billing accounts account Id forbidden response has a 2xx status code
func (o *PutBillingAccountsAccountIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put billing accounts account Id forbidden response has a 3xx status code
func (o *PutBillingAccountsAccountIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts account Id forbidden response has a 4xx status code
func (o *PutBillingAccountsAccountIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put billing accounts account Id forbidden response has a 5xx status code
func (o *PutBillingAccountsAccountIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts account Id forbidden response a status code equal to that given
func (o *PutBillingAccountsAccountIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put billing accounts account Id forbidden response
func (o *PutBillingAccountsAccountIDForbidden) Code() int {
	return 403
}

func (o *PutBillingAccountsAccountIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdForbidden %s", 403, payload)
}

func (o *PutBillingAccountsAccountIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdForbidden %s", 403, payload)
}

func (o *PutBillingAccountsAccountIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutBillingAccountsAccountIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutBillingAccountsAccountIDNotFound creates a PutBillingAccountsAccountIDNotFound with default headers values
func NewPutBillingAccountsAccountIDNotFound() *PutBillingAccountsAccountIDNotFound {
	return &PutBillingAccountsAccountIDNotFound{}
}

/*
PutBillingAccountsAccountIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutBillingAccountsAccountIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put billing accounts account Id not found response has a 2xx status code
func (o *PutBillingAccountsAccountIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put billing accounts account Id not found response has a 3xx status code
func (o *PutBillingAccountsAccountIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts account Id not found response has a 4xx status code
func (o *PutBillingAccountsAccountIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put billing accounts account Id not found response has a 5xx status code
func (o *PutBillingAccountsAccountIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts account Id not found response a status code equal to that given
func (o *PutBillingAccountsAccountIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put billing accounts account Id not found response
func (o *PutBillingAccountsAccountIDNotFound) Code() int {
	return 404
}

func (o *PutBillingAccountsAccountIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdNotFound %s", 404, payload)
}

func (o *PutBillingAccountsAccountIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts/{accountId}][%d] putBillingAccountsAccountIdNotFound %s", 404, payload)
}

func (o *PutBillingAccountsAccountIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutBillingAccountsAccountIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
