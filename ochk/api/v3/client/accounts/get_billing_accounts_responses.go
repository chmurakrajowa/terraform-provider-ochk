// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetBillingAccountsReader is a Reader for the GetBillingAccounts structure.
type GetBillingAccountsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBillingAccountsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBillingAccountsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBillingAccountsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetBillingAccountsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBillingAccountsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /billing/accounts] GetBillingAccounts", response, response.Code())
	}
}

// NewGetBillingAccountsOK creates a GetBillingAccountsOK with default headers values
func NewGetBillingAccountsOK() *GetBillingAccountsOK {
	return &GetBillingAccountsOK{}
}

/*
GetBillingAccountsOK describes a response with status code 200, with default header values.

OK
*/
type GetBillingAccountsOK struct {
	Payload *models.ListAccountResponse
}

// IsSuccess returns true when this get billing accounts o k response has a 2xx status code
func (o *GetBillingAccountsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get billing accounts o k response has a 3xx status code
func (o *GetBillingAccountsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing accounts o k response has a 4xx status code
func (o *GetBillingAccountsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get billing accounts o k response has a 5xx status code
func (o *GetBillingAccountsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing accounts o k response a status code equal to that given
func (o *GetBillingAccountsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get billing accounts o k response
func (o *GetBillingAccountsOK) Code() int {
	return 200
}

func (o *GetBillingAccountsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts][%d] getBillingAccountsOK %s", 200, payload)
}

func (o *GetBillingAccountsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts][%d] getBillingAccountsOK %s", 200, payload)
}

func (o *GetBillingAccountsOK) GetPayload() *models.ListAccountResponse {
	return o.Payload
}

func (o *GetBillingAccountsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingAccountsBadRequest creates a GetBillingAccountsBadRequest with default headers values
func NewGetBillingAccountsBadRequest() *GetBillingAccountsBadRequest {
	return &GetBillingAccountsBadRequest{}
}

/*
GetBillingAccountsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetBillingAccountsBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get billing accounts bad request response has a 2xx status code
func (o *GetBillingAccountsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing accounts bad request response has a 3xx status code
func (o *GetBillingAccountsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing accounts bad request response has a 4xx status code
func (o *GetBillingAccountsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing accounts bad request response has a 5xx status code
func (o *GetBillingAccountsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing accounts bad request response a status code equal to that given
func (o *GetBillingAccountsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get billing accounts bad request response
func (o *GetBillingAccountsBadRequest) Code() int {
	return 400
}

func (o *GetBillingAccountsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts][%d] getBillingAccountsBadRequest %s", 400, payload)
}

func (o *GetBillingAccountsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts][%d] getBillingAccountsBadRequest %s", 400, payload)
}

func (o *GetBillingAccountsBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBillingAccountsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingAccountsUnauthorized creates a GetBillingAccountsUnauthorized with default headers values
func NewGetBillingAccountsUnauthorized() *GetBillingAccountsUnauthorized {
	return &GetBillingAccountsUnauthorized{}
}

/*
GetBillingAccountsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetBillingAccountsUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get billing accounts unauthorized response has a 2xx status code
func (o *GetBillingAccountsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing accounts unauthorized response has a 3xx status code
func (o *GetBillingAccountsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing accounts unauthorized response has a 4xx status code
func (o *GetBillingAccountsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing accounts unauthorized response has a 5xx status code
func (o *GetBillingAccountsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing accounts unauthorized response a status code equal to that given
func (o *GetBillingAccountsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get billing accounts unauthorized response
func (o *GetBillingAccountsUnauthorized) Code() int {
	return 401
}

func (o *GetBillingAccountsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts][%d] getBillingAccountsUnauthorized %s", 401, payload)
}

func (o *GetBillingAccountsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts][%d] getBillingAccountsUnauthorized %s", 401, payload)
}

func (o *GetBillingAccountsUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBillingAccountsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingAccountsForbidden creates a GetBillingAccountsForbidden with default headers values
func NewGetBillingAccountsForbidden() *GetBillingAccountsForbidden {
	return &GetBillingAccountsForbidden{}
}

/*
GetBillingAccountsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetBillingAccountsForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get billing accounts forbidden response has a 2xx status code
func (o *GetBillingAccountsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing accounts forbidden response has a 3xx status code
func (o *GetBillingAccountsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing accounts forbidden response has a 4xx status code
func (o *GetBillingAccountsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing accounts forbidden response has a 5xx status code
func (o *GetBillingAccountsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing accounts forbidden response a status code equal to that given
func (o *GetBillingAccountsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get billing accounts forbidden response
func (o *GetBillingAccountsForbidden) Code() int {
	return 403
}

func (o *GetBillingAccountsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts][%d] getBillingAccountsForbidden %s", 403, payload)
}

func (o *GetBillingAccountsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts][%d] getBillingAccountsForbidden %s", 403, payload)
}

func (o *GetBillingAccountsForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBillingAccountsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
