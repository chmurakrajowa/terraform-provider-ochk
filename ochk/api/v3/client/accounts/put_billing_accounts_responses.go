// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// PutBillingAccountsReader is a Reader for the PutBillingAccounts structure.
type PutBillingAccountsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutBillingAccountsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutBillingAccountsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutBillingAccountsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutBillingAccountsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutBillingAccountsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutBillingAccountsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /billing/accounts] PutBillingAccounts", response, response.Code())
	}
}

// NewPutBillingAccountsOK creates a PutBillingAccountsOK with default headers values
func NewPutBillingAccountsOK() *PutBillingAccountsOK {
	return &PutBillingAccountsOK{}
}

/*
PutBillingAccountsOK describes a response with status code 200, with default header values.

OK
*/
type PutBillingAccountsOK struct {
	Payload *models.CreateAccountResponse
}

// IsSuccess returns true when this put billing accounts o k response has a 2xx status code
func (o *PutBillingAccountsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put billing accounts o k response has a 3xx status code
func (o *PutBillingAccountsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts o k response has a 4xx status code
func (o *PutBillingAccountsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put billing accounts o k response has a 5xx status code
func (o *PutBillingAccountsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts o k response a status code equal to that given
func (o *PutBillingAccountsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put billing accounts o k response
func (o *PutBillingAccountsOK) Code() int {
	return 200
}

func (o *PutBillingAccountsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsOK %s", 200, payload)
}

func (o *PutBillingAccountsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsOK %s", 200, payload)
}

func (o *PutBillingAccountsOK) GetPayload() *models.CreateAccountResponse {
	return o.Payload
}

func (o *PutBillingAccountsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutBillingAccountsBadRequest creates a PutBillingAccountsBadRequest with default headers values
func NewPutBillingAccountsBadRequest() *PutBillingAccountsBadRequest {
	return &PutBillingAccountsBadRequest{}
}

/*
PutBillingAccountsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutBillingAccountsBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put billing accounts bad request response has a 2xx status code
func (o *PutBillingAccountsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put billing accounts bad request response has a 3xx status code
func (o *PutBillingAccountsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts bad request response has a 4xx status code
func (o *PutBillingAccountsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put billing accounts bad request response has a 5xx status code
func (o *PutBillingAccountsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts bad request response a status code equal to that given
func (o *PutBillingAccountsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put billing accounts bad request response
func (o *PutBillingAccountsBadRequest) Code() int {
	return 400
}

func (o *PutBillingAccountsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsBadRequest %s", 400, payload)
}

func (o *PutBillingAccountsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsBadRequest %s", 400, payload)
}

func (o *PutBillingAccountsBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutBillingAccountsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutBillingAccountsUnauthorized creates a PutBillingAccountsUnauthorized with default headers values
func NewPutBillingAccountsUnauthorized() *PutBillingAccountsUnauthorized {
	return &PutBillingAccountsUnauthorized{}
}

/*
PutBillingAccountsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutBillingAccountsUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put billing accounts unauthorized response has a 2xx status code
func (o *PutBillingAccountsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put billing accounts unauthorized response has a 3xx status code
func (o *PutBillingAccountsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts unauthorized response has a 4xx status code
func (o *PutBillingAccountsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put billing accounts unauthorized response has a 5xx status code
func (o *PutBillingAccountsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts unauthorized response a status code equal to that given
func (o *PutBillingAccountsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put billing accounts unauthorized response
func (o *PutBillingAccountsUnauthorized) Code() int {
	return 401
}

func (o *PutBillingAccountsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsUnauthorized %s", 401, payload)
}

func (o *PutBillingAccountsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsUnauthorized %s", 401, payload)
}

func (o *PutBillingAccountsUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutBillingAccountsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutBillingAccountsForbidden creates a PutBillingAccountsForbidden with default headers values
func NewPutBillingAccountsForbidden() *PutBillingAccountsForbidden {
	return &PutBillingAccountsForbidden{}
}

/*
PutBillingAccountsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutBillingAccountsForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put billing accounts forbidden response has a 2xx status code
func (o *PutBillingAccountsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put billing accounts forbidden response has a 3xx status code
func (o *PutBillingAccountsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts forbidden response has a 4xx status code
func (o *PutBillingAccountsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put billing accounts forbidden response has a 5xx status code
func (o *PutBillingAccountsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts forbidden response a status code equal to that given
func (o *PutBillingAccountsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put billing accounts forbidden response
func (o *PutBillingAccountsForbidden) Code() int {
	return 403
}

func (o *PutBillingAccountsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsForbidden %s", 403, payload)
}

func (o *PutBillingAccountsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsForbidden %s", 403, payload)
}

func (o *PutBillingAccountsForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutBillingAccountsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutBillingAccountsNotFound creates a PutBillingAccountsNotFound with default headers values
func NewPutBillingAccountsNotFound() *PutBillingAccountsNotFound {
	return &PutBillingAccountsNotFound{}
}

/*
PutBillingAccountsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutBillingAccountsNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this put billing accounts not found response has a 2xx status code
func (o *PutBillingAccountsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put billing accounts not found response has a 3xx status code
func (o *PutBillingAccountsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put billing accounts not found response has a 4xx status code
func (o *PutBillingAccountsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put billing accounts not found response has a 5xx status code
func (o *PutBillingAccountsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put billing accounts not found response a status code equal to that given
func (o *PutBillingAccountsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put billing accounts not found response
func (o *PutBillingAccountsNotFound) Code() int {
	return 404
}

func (o *PutBillingAccountsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsNotFound %s", 404, payload)
}

func (o *PutBillingAccountsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing/accounts][%d] putBillingAccountsNotFound %s", 404, payload)
}

func (o *PutBillingAccountsNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *PutBillingAccountsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
