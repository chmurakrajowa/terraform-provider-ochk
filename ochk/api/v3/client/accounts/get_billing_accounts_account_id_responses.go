// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetBillingAccountsAccountIDReader is a Reader for the GetBillingAccountsAccountID structure.
type GetBillingAccountsAccountIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBillingAccountsAccountIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBillingAccountsAccountIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBillingAccountsAccountIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetBillingAccountsAccountIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBillingAccountsAccountIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBillingAccountsAccountIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /billing/accounts/{accountId}] GetBillingAccountsAccountID", response, response.Code())
	}
}

// NewGetBillingAccountsAccountIDOK creates a GetBillingAccountsAccountIDOK with default headers values
func NewGetBillingAccountsAccountIDOK() *GetBillingAccountsAccountIDOK {
	return &GetBillingAccountsAccountIDOK{}
}

/*
GetBillingAccountsAccountIDOK describes a response with status code 200, with default header values.

OK
*/
type GetBillingAccountsAccountIDOK struct {
	Payload *models.GetAccountResponse
}

// IsSuccess returns true when this get billing accounts account Id o k response has a 2xx status code
func (o *GetBillingAccountsAccountIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get billing accounts account Id o k response has a 3xx status code
func (o *GetBillingAccountsAccountIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing accounts account Id o k response has a 4xx status code
func (o *GetBillingAccountsAccountIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get billing accounts account Id o k response has a 5xx status code
func (o *GetBillingAccountsAccountIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing accounts account Id o k response a status code equal to that given
func (o *GetBillingAccountsAccountIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get billing accounts account Id o k response
func (o *GetBillingAccountsAccountIDOK) Code() int {
	return 200
}

func (o *GetBillingAccountsAccountIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdOK %s", 200, payload)
}

func (o *GetBillingAccountsAccountIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdOK %s", 200, payload)
}

func (o *GetBillingAccountsAccountIDOK) GetPayload() *models.GetAccountResponse {
	return o.Payload
}

func (o *GetBillingAccountsAccountIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingAccountsAccountIDBadRequest creates a GetBillingAccountsAccountIDBadRequest with default headers values
func NewGetBillingAccountsAccountIDBadRequest() *GetBillingAccountsAccountIDBadRequest {
	return &GetBillingAccountsAccountIDBadRequest{}
}

/*
GetBillingAccountsAccountIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetBillingAccountsAccountIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get billing accounts account Id bad request response has a 2xx status code
func (o *GetBillingAccountsAccountIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing accounts account Id bad request response has a 3xx status code
func (o *GetBillingAccountsAccountIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing accounts account Id bad request response has a 4xx status code
func (o *GetBillingAccountsAccountIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing accounts account Id bad request response has a 5xx status code
func (o *GetBillingAccountsAccountIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing accounts account Id bad request response a status code equal to that given
func (o *GetBillingAccountsAccountIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get billing accounts account Id bad request response
func (o *GetBillingAccountsAccountIDBadRequest) Code() int {
	return 400
}

func (o *GetBillingAccountsAccountIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdBadRequest %s", 400, payload)
}

func (o *GetBillingAccountsAccountIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdBadRequest %s", 400, payload)
}

func (o *GetBillingAccountsAccountIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBillingAccountsAccountIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingAccountsAccountIDUnauthorized creates a GetBillingAccountsAccountIDUnauthorized with default headers values
func NewGetBillingAccountsAccountIDUnauthorized() *GetBillingAccountsAccountIDUnauthorized {
	return &GetBillingAccountsAccountIDUnauthorized{}
}

/*
GetBillingAccountsAccountIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetBillingAccountsAccountIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get billing accounts account Id unauthorized response has a 2xx status code
func (o *GetBillingAccountsAccountIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing accounts account Id unauthorized response has a 3xx status code
func (o *GetBillingAccountsAccountIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing accounts account Id unauthorized response has a 4xx status code
func (o *GetBillingAccountsAccountIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing accounts account Id unauthorized response has a 5xx status code
func (o *GetBillingAccountsAccountIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing accounts account Id unauthorized response a status code equal to that given
func (o *GetBillingAccountsAccountIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get billing accounts account Id unauthorized response
func (o *GetBillingAccountsAccountIDUnauthorized) Code() int {
	return 401
}

func (o *GetBillingAccountsAccountIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdUnauthorized %s", 401, payload)
}

func (o *GetBillingAccountsAccountIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdUnauthorized %s", 401, payload)
}

func (o *GetBillingAccountsAccountIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBillingAccountsAccountIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingAccountsAccountIDForbidden creates a GetBillingAccountsAccountIDForbidden with default headers values
func NewGetBillingAccountsAccountIDForbidden() *GetBillingAccountsAccountIDForbidden {
	return &GetBillingAccountsAccountIDForbidden{}
}

/*
GetBillingAccountsAccountIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetBillingAccountsAccountIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get billing accounts account Id forbidden response has a 2xx status code
func (o *GetBillingAccountsAccountIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing accounts account Id forbidden response has a 3xx status code
func (o *GetBillingAccountsAccountIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing accounts account Id forbidden response has a 4xx status code
func (o *GetBillingAccountsAccountIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing accounts account Id forbidden response has a 5xx status code
func (o *GetBillingAccountsAccountIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing accounts account Id forbidden response a status code equal to that given
func (o *GetBillingAccountsAccountIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get billing accounts account Id forbidden response
func (o *GetBillingAccountsAccountIDForbidden) Code() int {
	return 403
}

func (o *GetBillingAccountsAccountIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdForbidden %s", 403, payload)
}

func (o *GetBillingAccountsAccountIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdForbidden %s", 403, payload)
}

func (o *GetBillingAccountsAccountIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBillingAccountsAccountIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingAccountsAccountIDNotFound creates a GetBillingAccountsAccountIDNotFound with default headers values
func NewGetBillingAccountsAccountIDNotFound() *GetBillingAccountsAccountIDNotFound {
	return &GetBillingAccountsAccountIDNotFound{}
}

/*
GetBillingAccountsAccountIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetBillingAccountsAccountIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get billing accounts account Id not found response has a 2xx status code
func (o *GetBillingAccountsAccountIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing accounts account Id not found response has a 3xx status code
func (o *GetBillingAccountsAccountIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing accounts account Id not found response has a 4xx status code
func (o *GetBillingAccountsAccountIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing accounts account Id not found response has a 5xx status code
func (o *GetBillingAccountsAccountIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing accounts account Id not found response a status code equal to that given
func (o *GetBillingAccountsAccountIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get billing accounts account Id not found response
func (o *GetBillingAccountsAccountIDNotFound) Code() int {
	return 404
}

func (o *GetBillingAccountsAccountIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdNotFound %s", 404, payload)
}

func (o *GetBillingAccountsAccountIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /billing/accounts/{accountId}][%d] getBillingAccountsAccountIdNotFound %s", 404, payload)
}

func (o *GetBillingAccountsAccountIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetBillingAccountsAccountIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
