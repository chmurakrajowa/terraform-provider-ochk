// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetRequestReader is a Reader for the GetRequest structure.
type GetRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /request] GetRequest", response, response.Code())
	}
}

// NewGetRequestOK creates a GetRequestOK with default headers values
func NewGetRequestOK() *GetRequestOK {
	return &GetRequestOK{}
}

/*
GetRequestOK describes a response with status code 200, with default header values.

OK
*/
type GetRequestOK struct {
	Payload *models.ListRequestsResponse
}

// IsSuccess returns true when this get request o k response has a 2xx status code
func (o *GetRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get request o k response has a 3xx status code
func (o *GetRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request o k response has a 4xx status code
func (o *GetRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get request o k response has a 5xx status code
func (o *GetRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get request o k response a status code equal to that given
func (o *GetRequestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get request o k response
func (o *GetRequestOK) Code() int {
	return 200
}

func (o *GetRequestOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request][%d] getRequestOK %s", 200, payload)
}

func (o *GetRequestOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request][%d] getRequestOK %s", 200, payload)
}

func (o *GetRequestOK) GetPayload() *models.ListRequestsResponse {
	return o.Payload
}

func (o *GetRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListRequestsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestBadRequest creates a GetRequestBadRequest with default headers values
func NewGetRequestBadRequest() *GetRequestBadRequest {
	return &GetRequestBadRequest{}
}

/*
GetRequestBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRequestBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get request bad request response has a 2xx status code
func (o *GetRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get request bad request response has a 3xx status code
func (o *GetRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request bad request response has a 4xx status code
func (o *GetRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get request bad request response has a 5xx status code
func (o *GetRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get request bad request response a status code equal to that given
func (o *GetRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get request bad request response
func (o *GetRequestBadRequest) Code() int {
	return 400
}

func (o *GetRequestBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request][%d] getRequestBadRequest %s", 400, payload)
}

func (o *GetRequestBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request][%d] getRequestBadRequest %s", 400, payload)
}

func (o *GetRequestBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestUnauthorized creates a GetRequestUnauthorized with default headers values
func NewGetRequestUnauthorized() *GetRequestUnauthorized {
	return &GetRequestUnauthorized{}
}

/*
GetRequestUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRequestUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get request unauthorized response has a 2xx status code
func (o *GetRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get request unauthorized response has a 3xx status code
func (o *GetRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request unauthorized response has a 4xx status code
func (o *GetRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get request unauthorized response has a 5xx status code
func (o *GetRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get request unauthorized response a status code equal to that given
func (o *GetRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get request unauthorized response
func (o *GetRequestUnauthorized) Code() int {
	return 401
}

func (o *GetRequestUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request][%d] getRequestUnauthorized %s", 401, payload)
}

func (o *GetRequestUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request][%d] getRequestUnauthorized %s", 401, payload)
}

func (o *GetRequestUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestForbidden creates a GetRequestForbidden with default headers values
func NewGetRequestForbidden() *GetRequestForbidden {
	return &GetRequestForbidden{}
}

/*
GetRequestForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRequestForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get request forbidden response has a 2xx status code
func (o *GetRequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get request forbidden response has a 3xx status code
func (o *GetRequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request forbidden response has a 4xx status code
func (o *GetRequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get request forbidden response has a 5xx status code
func (o *GetRequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get request forbidden response a status code equal to that given
func (o *GetRequestForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get request forbidden response
func (o *GetRequestForbidden) Code() int {
	return 403
}

func (o *GetRequestForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request][%d] getRequestForbidden %s", 403, payload)
}

func (o *GetRequestForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request][%d] getRequestForbidden %s", 403, payload)
}

func (o *GetRequestForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
