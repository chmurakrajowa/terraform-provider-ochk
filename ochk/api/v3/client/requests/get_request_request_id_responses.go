// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/api/v3/models"
)

// GetRequestRequestIDReader is a Reader for the GetRequestRequestID structure.
type GetRequestRequestIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRequestRequestIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRequestRequestIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRequestRequestIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRequestRequestIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRequestRequestIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRequestRequestIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /request/{requestId}] GetRequestRequestID", response, response.Code())
	}
}

// NewGetRequestRequestIDOK creates a GetRequestRequestIDOK with default headers values
func NewGetRequestRequestIDOK() *GetRequestRequestIDOK {
	return &GetRequestRequestIDOK{}
}

/*
GetRequestRequestIDOK describes a response with status code 200, with default header values.

OK
*/
type GetRequestRequestIDOK struct {
	Payload *models.GetRequestResponse
}

// IsSuccess returns true when this get request request Id o k response has a 2xx status code
func (o *GetRequestRequestIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get request request Id o k response has a 3xx status code
func (o *GetRequestRequestIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request request Id o k response has a 4xx status code
func (o *GetRequestRequestIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get request request Id o k response has a 5xx status code
func (o *GetRequestRequestIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get request request Id o k response a status code equal to that given
func (o *GetRequestRequestIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get request request Id o k response
func (o *GetRequestRequestIDOK) Code() int {
	return 200
}

func (o *GetRequestRequestIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdOK %s", 200, payload)
}

func (o *GetRequestRequestIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdOK %s", 200, payload)
}

func (o *GetRequestRequestIDOK) GetPayload() *models.GetRequestResponse {
	return o.Payload
}

func (o *GetRequestRequestIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestRequestIDBadRequest creates a GetRequestRequestIDBadRequest with default headers values
func NewGetRequestRequestIDBadRequest() *GetRequestRequestIDBadRequest {
	return &GetRequestRequestIDBadRequest{}
}

/*
GetRequestRequestIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRequestRequestIDBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get request request Id bad request response has a 2xx status code
func (o *GetRequestRequestIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get request request Id bad request response has a 3xx status code
func (o *GetRequestRequestIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request request Id bad request response has a 4xx status code
func (o *GetRequestRequestIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get request request Id bad request response has a 5xx status code
func (o *GetRequestRequestIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get request request Id bad request response a status code equal to that given
func (o *GetRequestRequestIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get request request Id bad request response
func (o *GetRequestRequestIDBadRequest) Code() int {
	return 400
}

func (o *GetRequestRequestIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdBadRequest %s", 400, payload)
}

func (o *GetRequestRequestIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdBadRequest %s", 400, payload)
}

func (o *GetRequestRequestIDBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetRequestRequestIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestRequestIDUnauthorized creates a GetRequestRequestIDUnauthorized with default headers values
func NewGetRequestRequestIDUnauthorized() *GetRequestRequestIDUnauthorized {
	return &GetRequestRequestIDUnauthorized{}
}

/*
GetRequestRequestIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRequestRequestIDUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get request request Id unauthorized response has a 2xx status code
func (o *GetRequestRequestIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get request request Id unauthorized response has a 3xx status code
func (o *GetRequestRequestIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request request Id unauthorized response has a 4xx status code
func (o *GetRequestRequestIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get request request Id unauthorized response has a 5xx status code
func (o *GetRequestRequestIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get request request Id unauthorized response a status code equal to that given
func (o *GetRequestRequestIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get request request Id unauthorized response
func (o *GetRequestRequestIDUnauthorized) Code() int {
	return 401
}

func (o *GetRequestRequestIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdUnauthorized %s", 401, payload)
}

func (o *GetRequestRequestIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdUnauthorized %s", 401, payload)
}

func (o *GetRequestRequestIDUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetRequestRequestIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestRequestIDForbidden creates a GetRequestRequestIDForbidden with default headers values
func NewGetRequestRequestIDForbidden() *GetRequestRequestIDForbidden {
	return &GetRequestRequestIDForbidden{}
}

/*
GetRequestRequestIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRequestRequestIDForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get request request Id forbidden response has a 2xx status code
func (o *GetRequestRequestIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get request request Id forbidden response has a 3xx status code
func (o *GetRequestRequestIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request request Id forbidden response has a 4xx status code
func (o *GetRequestRequestIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get request request Id forbidden response has a 5xx status code
func (o *GetRequestRequestIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get request request Id forbidden response a status code equal to that given
func (o *GetRequestRequestIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get request request Id forbidden response
func (o *GetRequestRequestIDForbidden) Code() int {
	return 403
}

func (o *GetRequestRequestIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdForbidden %s", 403, payload)
}

func (o *GetRequestRequestIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdForbidden %s", 403, payload)
}

func (o *GetRequestRequestIDForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetRequestRequestIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestRequestIDNotFound creates a GetRequestRequestIDNotFound with default headers values
func NewGetRequestRequestIDNotFound() *GetRequestRequestIDNotFound {
	return &GetRequestRequestIDNotFound{}
}

/*
GetRequestRequestIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRequestRequestIDNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this get request request Id not found response has a 2xx status code
func (o *GetRequestRequestIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get request request Id not found response has a 3xx status code
func (o *GetRequestRequestIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request request Id not found response has a 4xx status code
func (o *GetRequestRequestIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get request request Id not found response has a 5xx status code
func (o *GetRequestRequestIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get request request Id not found response a status code equal to that given
func (o *GetRequestRequestIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get request request Id not found response
func (o *GetRequestRequestIDNotFound) Code() int {
	return 404
}

func (o *GetRequestRequestIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdNotFound %s", 404, payload)
}

func (o *GetRequestRequestIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /request/{requestId}][%d] getRequestRequestIdNotFound %s", 404, payload)
}

func (o *GetRequestRequestIDNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *GetRequestRequestIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
