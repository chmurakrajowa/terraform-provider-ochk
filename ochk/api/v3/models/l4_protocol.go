// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// L4Protocol l4 protocol
//
// swagger:model L4Protocol
type L4Protocol string

func NewL4Protocol(value L4Protocol) *L4Protocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated L4Protocol.
func (m L4Protocol) Pointer() *L4Protocol {
	return &m
}

const (

	// L4ProtocolTCP captures enum value "TCP"
	L4ProtocolTCP L4Protocol = "TCP"

	// L4ProtocolUDP captures enum value "UDP"
	L4ProtocolUDP L4Protocol = "UDP"
)

// for schema
var l4ProtocolEnum []interface{}

func init() {
	var res []L4Protocol
	if err := json.Unmarshal([]byte(`["TCP","UDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		l4ProtocolEnum = append(l4ProtocolEnum, v)
	}
}

func (m L4Protocol) validateL4ProtocolEnum(path, location string, value L4Protocol) error {
	if err := validate.EnumCase(path, location, value, l4ProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this l4 protocol
func (m L4Protocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateL4ProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this l4 protocol based on context it is used
func (m L4Protocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
