// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// KeyExportFormat key export format
//
// swagger:model KeyExportFormat
type KeyExportFormat string

func NewKeyExportFormat(value KeyExportFormat) *KeyExportFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated KeyExportFormat.
func (m KeyExportFormat) Pointer() *KeyExportFormat {
	return &m
}

const (

	// KeyExportFormatPkcs1 captures enum value "pkcs1"
	KeyExportFormatPkcs1 KeyExportFormat = "pkcs1"

	// KeyExportFormatPkcs8 captures enum value "pkcs8"
	KeyExportFormatPkcs8 KeyExportFormat = "pkcs8"
)

// for schema
var keyExportFormatEnum []interface{}

func init() {
	var res []KeyExportFormat
	if err := json.Unmarshal([]byte(`["pkcs1","pkcs8"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keyExportFormatEnum = append(keyExportFormatEnum, v)
	}
}

func (m KeyExportFormat) validateKeyExportFormatEnum(path, location string, value KeyExportFormat) error {
	if err := validate.EnumCase(path, location, value, keyExportFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this key export format
func (m KeyExportFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateKeyExportFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this key export format based on context it is used
func (m KeyExportFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
