// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Direction1 direction1
//
// swagger:model Direction1
type Direction1 string

func NewDirection1(value Direction1) *Direction1 {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Direction1.
func (m Direction1) Pointer() *Direction1 {
	return &m
}

const (

	// Direction1INGRESS captures enum value "INGRESS"
	Direction1INGRESS Direction1 = "INGRESS"

	// Direction1EGRESS captures enum value "EGRESS"
	Direction1EGRESS Direction1 = "EGRESS"
)

// for schema
var direction1Enum []interface{}

func init() {
	var res []Direction1
	if err := json.Unmarshal([]byte(`["INGRESS","EGRESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		direction1Enum = append(direction1Enum, v)
	}
}

func (m Direction1) validateDirection1Enum(path, location string, value Direction1) error {
	if err := validate.EnumCase(path, location, value, direction1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this direction1
func (m Direction1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDirection1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this direction1 based on context it is used
func (m Direction1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
