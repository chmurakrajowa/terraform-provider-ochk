// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PlatformType platform type
//
// swagger:model PlatformType
type PlatformType string

func NewPlatformType(value PlatformType) *PlatformType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PlatformType.
func (m PlatformType) Pointer() *PlatformType {
	return &m
}

const (

	// PlatformTypeVMWARE captures enum value "VMWARE"
	PlatformTypeVMWARE PlatformType = "VMWARE"

	// PlatformTypeOPENSTACK captures enum value "OPENSTACK"
	PlatformTypeOPENSTACK PlatformType = "OPENSTACK"
)

// for schema
var platformTypeEnum []interface{}

func init() {
	var res []PlatformType
	if err := json.Unmarshal([]byte(`["VMWARE","OPENSTACK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformTypeEnum = append(platformTypeEnum, v)
	}
}

func (m PlatformType) validatePlatformTypeEnum(path, location string, value PlatformType) error {
	if err := validate.EnumCase(path, location, value, platformTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this platform type
func (m PlatformType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePlatformTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this platform type based on context it is used
func (m PlatformType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
