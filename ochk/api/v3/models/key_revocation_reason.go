// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// KeyRevocationReason key revocation reason
//
// swagger:model KeyRevocationReason
type KeyRevocationReason string

func NewKeyRevocationReason(value KeyRevocationReason) *KeyRevocationReason {
	return &value
}

// Pointer returns a pointer to a freshly-allocated KeyRevocationReason.
func (m KeyRevocationReason) Pointer() *KeyRevocationReason {
	return &m
}

const (

	// KeyRevocationReasonUnspecified captures enum value "Unspecified"
	KeyRevocationReasonUnspecified KeyRevocationReason = "Unspecified"

	// KeyRevocationReasonKeyCompromise captures enum value "KeyCompromise"
	KeyRevocationReasonKeyCompromise KeyRevocationReason = "KeyCompromise"

	// KeyRevocationReasonCACompromise captures enum value "CACompromise"
	KeyRevocationReasonCACompromise KeyRevocationReason = "CACompromise"

	// KeyRevocationReasonAffiliationChanged captures enum value "AffiliationChanged"
	KeyRevocationReasonAffiliationChanged KeyRevocationReason = "AffiliationChanged"

	// KeyRevocationReasonSuperseded captures enum value "Superseded"
	KeyRevocationReasonSuperseded KeyRevocationReason = "Superseded"

	// KeyRevocationReasonCessationOfOperation captures enum value "CessationOfOperation"
	KeyRevocationReasonCessationOfOperation KeyRevocationReason = "CessationOfOperation"

	// KeyRevocationReasonPrivilegeWithdrawn captures enum value "PrivilegeWithdrawn"
	KeyRevocationReasonPrivilegeWithdrawn KeyRevocationReason = "PrivilegeWithdrawn"
)

// for schema
var keyRevocationReasonEnum []interface{}

func init() {
	var res []KeyRevocationReason
	if err := json.Unmarshal([]byte(`["Unspecified","KeyCompromise","CACompromise","AffiliationChanged","Superseded","CessationOfOperation","PrivilegeWithdrawn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keyRevocationReasonEnum = append(keyRevocationReasonEnum, v)
	}
}

func (m KeyRevocationReason) validateKeyRevocationReasonEnum(path, location string, value KeyRevocationReason) error {
	if err := validate.EnumCase(path, location, value, keyRevocationReasonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this key revocation reason
func (m KeyRevocationReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateKeyRevocationReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this key revocation reason based on context it is used
func (m KeyRevocationReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
