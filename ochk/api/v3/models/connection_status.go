// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConnectionStatus connection status
//
// swagger:model ConnectionStatus
type ConnectionStatus string

func NewConnectionStatus(value ConnectionStatus) *ConnectionStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConnectionStatus.
func (m ConnectionStatus) Pointer() *ConnectionStatus {
	return &m
}

const (

	// ConnectionStatusOk captures enum value "ok"
	ConnectionStatusOk ConnectionStatus = "ok"

	// ConnectionStatusRecoverableError captures enum value "recoverableError"
	ConnectionStatusRecoverableError ConnectionStatus = "recoverableError"

	// ConnectionStatusUnrecoverableError captures enum value "unrecoverableError"
	ConnectionStatusUnrecoverableError ConnectionStatus = "unrecoverableError"

	// ConnectionStatusUntried captures enum value "untried"
	ConnectionStatusUntried ConnectionStatus = "untried"
)

// for schema
var connectionStatusEnum []interface{}

func init() {
	var res []ConnectionStatus
	if err := json.Unmarshal([]byte(`["ok","recoverableError","unrecoverableError","untried"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectionStatusEnum = append(connectionStatusEnum, v)
	}
}

func (m ConnectionStatus) validateConnectionStatusEnum(path, location string, value ConnectionStatus) error {
	if err := validate.EnumCase(path, location, value, connectionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this connection status
func (m ConnectionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConnectionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this connection status based on context it is used
func (m ConnectionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
