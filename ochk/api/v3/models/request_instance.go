// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestInstance request instance
//
// swagger:model RequestInstance
type RequestInstance struct {

	// context body
	ContextBody string `json:"contextBody,omitempty"`

	// customer instance
	CustomerInstance *CustomerInstance `json:"customerInstance,omitempty"`

	// e Id
	EID int32 `json:"eId,omitempty"`

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// last error message
	LastErrorMessage string `json:"lastErrorMessage,omitempty"`

	// last message
	LastMessage string `json:"lastMessage,omitempty"`

	// platform instance
	PlatformInstance *PlatformInstance `json:"platformInstance,omitempty"`

	// request body
	RequestBody string `json:"requestBody,omitempty"`

	// request Id
	// Format: uuid
	RequestID strfmt.UUID `json:"requestId,omitempty"`

	// request message list
	RequestMessageList []*RequestMessage `json:"requestMessageList"`

	// request phase
	RequestPhase RequestPhase `json:"requestPhase,omitempty"`

	// request status
	RequestStatus RequestStatus `json:"requestStatus,omitempty"`

	// request type
	RequestType RequestType `json:"requestType,omitempty"`

	// requestor
	Requestor string `json:"requestor,omitempty"`

	// requestor Id
	// Format: uuid
	RequestorID strfmt.UUID `json:"requestorId,omitempty"`

	// resource Id
	// Format: uuid
	ResourceID strfmt.UUID `json:"resourceId,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`
}

// Validate validates this request instance
func (m *RequestInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestMessageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestPhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestInstance) validateCustomerInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerInstance) { // not required
		return nil
	}

	if m.CustomerInstance != nil {
		if err := m.CustomerInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerInstance")
			}
			return err
		}
	}

	return nil
}

func (m *RequestInstance) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RequestInstance) validatePlatformInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformInstance) { // not required
		return nil
	}

	if m.PlatformInstance != nil {
		if err := m.PlatformInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platformInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("platformInstance")
			}
			return err
		}
	}

	return nil
}

func (m *RequestInstance) validateRequestID(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestID) { // not required
		return nil
	}

	if err := validate.FormatOf("requestId", "body", "uuid", m.RequestID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RequestInstance) validateRequestMessageList(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestMessageList) { // not required
		return nil
	}

	for i := 0; i < len(m.RequestMessageList); i++ {
		if swag.IsZero(m.RequestMessageList[i]) { // not required
			continue
		}

		if m.RequestMessageList[i] != nil {
			if err := m.RequestMessageList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requestMessageList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requestMessageList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RequestInstance) validateRequestPhase(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestPhase) { // not required
		return nil
	}

	if err := m.RequestPhase.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestPhase")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestPhase")
		}
		return err
	}

	return nil
}

func (m *RequestInstance) validateRequestStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestStatus) { // not required
		return nil
	}

	if err := m.RequestStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestStatus")
		}
		return err
	}

	return nil
}

func (m *RequestInstance) validateRequestType(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestType) { // not required
		return nil
	}

	if err := m.RequestType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestType")
		}
		return err
	}

	return nil
}

func (m *RequestInstance) validateRequestorID(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestorID) { // not required
		return nil
	}

	if err := validate.FormatOf("requestorId", "body", "uuid", m.RequestorID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RequestInstance) validateResourceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceID) { // not required
		return nil
	}

	if err := validate.FormatOf("resourceId", "body", "uuid", m.ResourceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RequestInstance) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this request instance based on the context it is used
func (m *RequestInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomerInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlatformInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestMessageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestPhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestInstance) contextValidateCustomerInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomerInstance != nil {

		if swag.IsZero(m.CustomerInstance) { // not required
			return nil
		}

		if err := m.CustomerInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerInstance")
			}
			return err
		}
	}

	return nil
}

func (m *RequestInstance) contextValidatePlatformInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.PlatformInstance != nil {

		if swag.IsZero(m.PlatformInstance) { // not required
			return nil
		}

		if err := m.PlatformInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platformInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("platformInstance")
			}
			return err
		}
	}

	return nil
}

func (m *RequestInstance) contextValidateRequestMessageList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RequestMessageList); i++ {

		if m.RequestMessageList[i] != nil {

			if swag.IsZero(m.RequestMessageList[i]) { // not required
				return nil
			}

			if err := m.RequestMessageList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requestMessageList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requestMessageList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RequestInstance) contextValidateRequestPhase(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RequestPhase) { // not required
		return nil
	}

	if err := m.RequestPhase.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestPhase")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestPhase")
		}
		return err
	}

	return nil
}

func (m *RequestInstance) contextValidateRequestStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RequestStatus) { // not required
		return nil
	}

	if err := m.RequestStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestStatus")
		}
		return err
	}

	return nil
}

func (m *RequestInstance) contextValidateRequestType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RequestType) { // not required
		return nil
	}

	if err := m.RequestType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestInstance) UnmarshalBinary(b []byte) error {
	var res RequestInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
