// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ComputeSiteType compute site type
//
// swagger:model ComputeSiteType
type ComputeSiteType string

func NewComputeSiteType(value ComputeSiteType) *ComputeSiteType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ComputeSiteType.
func (m ComputeSiteType) Pointer() *ComputeSiteType {
	return &m
}

const (

	// ComputeSiteTypeVCenter captures enum value "VCenter"
	ComputeSiteTypeVCenter ComputeSiteType = "VCenter"

	// ComputeSiteTypeOpenStack captures enum value "OpenStack"
	ComputeSiteTypeOpenStack ComputeSiteType = "OpenStack"
)

// for schema
var computeSiteTypeEnum []interface{}

func init() {
	var res []ComputeSiteType
	if err := json.Unmarshal([]byte(`["VCenter","OpenStack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		computeSiteTypeEnum = append(computeSiteTypeEnum, v)
	}
}

func (m ComputeSiteType) validateComputeSiteTypeEnum(path, location string, value ComputeSiteType) error {
	if err := validate.EnumCase(path, location, value, computeSiteTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this compute site type
func (m ComputeSiteType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateComputeSiteTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this compute site type based on context it is used
func (m ComputeSiteType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
