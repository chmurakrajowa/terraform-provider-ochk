// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subnet subnet
//
// swagger:model Subnet
type Subnet struct {

	// allocation pools
	AllocationPools []*AllocationPool `json:"allocationPools"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dns servers
	DNSServers []string `json:"dnsServers"`

	// enable dhcp
	EnableDhcp bool `json:"enableDhcp,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// gateway Ip
	GatewayIP string `json:"gatewayIp,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network cidr
	NetworkCidr string `json:"networkCidr,omitempty"`

	// network Id
	NetworkID string `json:"networkId,omitempty"`

	// pck Id
	// Format: uuid
	PckID strfmt.UUID `json:"pckId,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this subnet
func (m *Subnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocationPools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePckID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subnet) validateAllocationPools(formats strfmt.Registry) error {
	if swag.IsZero(m.AllocationPools) { // not required
		return nil
	}

	for i := 0; i < len(m.AllocationPools); i++ {
		if swag.IsZero(m.AllocationPools[i]) { // not required
			continue
		}

		if m.AllocationPools[i] != nil {
			if err := m.AllocationPools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allocationPools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allocationPools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subnet) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validatePckID(formats strfmt.Registry) error {
	if swag.IsZero(m.PckID) { // not required
		return nil
	}

	if err := validate.FormatOf("pckId", "body", "uuid", m.PckID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this subnet based on the context it is used
func (m *Subnet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllocationPools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subnet) contextValidateAllocationPools(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AllocationPools); i++ {

		if m.AllocationPools[i] != nil {

			if swag.IsZero(m.AllocationPools[i]) { // not required
				return nil
			}

			if err := m.AllocationPools[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allocationPools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allocationPools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subnet) UnmarshalBinary(b []byte) error {
	var res Subnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
