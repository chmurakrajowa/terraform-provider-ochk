// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouterInstance router instance
//
// swagger:model RouterInstance
type RouterInstance struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// default rule logging
	DefaultRuleLogging bool `json:"defaultRuleLogging,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dhcp config path list
	DhcpConfigPathList []*DhcpConfigPath `json:"dhcpConfigPathList"`

	// disable firewall
	DisableFirewall bool `json:"disableFirewall,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// edge cluster instance
	EdgeClusterInstance *EdgeClusterInstance `json:"edgeClusterInstance,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// failover mode
	FailoverMode *FailoverMode `json:"failoverMode,omitempty"`

	// folder path
	FolderPath string `json:"folderPath,omitempty"`

	// force with listing
	ForceWithListing bool `json:"forceWithListing,omitempty"`

	// ha mode
	HaMode *HAMode `json:"haMode,omitempty"`

	// internal transit subnet list
	InternalTransitSubnetList []*InternalTransitSubnet `json:"internalTransitSubnetList"`

	// ip6 profile path list
	Ip6ProfilePathList []*IP6ProfilePath `json:"ip6ProfilePathList"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// overridden
	Overridden bool `json:"overridden,omitempty"`

	// parent path
	ParentPath string `json:"parentPath,omitempty"`

	// parent t0 Id
	// Format: uuid
	ParentT0ID strfmt.UUID `json:"parentT0Id,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// protection
	Protection *Protection `json:"protection,omitempty"`

	// rd admin field
	RdAdminField string `json:"rdAdminField,omitempty"`

	// relative path
	RelativePath string `json:"relativePath,omitempty"`

	// resource type
	ResourceType *ResourceType `json:"resourceType,omitempty"`

	// revision
	Revision int64 `json:"revision,omitempty"`

	// route advertisement type
	RouteAdvertisementType []string `json:"routeAdvertisementType"`

	// router Id
	// Format: uuid
	RouterID strfmt.UUID `json:"routerId,omitempty"`

	// router type
	RouterType RouterType `json:"routerType,omitempty"`

	// schema value
	SchemaValue string `json:"schemaValue,omitempty"`

	// snat enabled
	SnatEnabled bool `json:"snatEnabled,omitempty"`

	// snat Ip
	SnatIP string `json:"snatIp,omitempty"`

	// tier0 path
	Tier0Path string `json:"tier0Path,omitempty"`

	// transit subnet list
	TransitSubnetList []*TransitSubnet `json:"transitSubnetList"`
}

// Validate validates this router instance
func (m *RouterInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpConfigPathList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeClusterInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHaMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalTransitSubnetList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIp6ProfilePathList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentT0ID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransitSubnetList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouterInstance) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RouterInstance) validateDhcpConfigPathList(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpConfigPathList) { // not required
		return nil
	}

	for i := 0; i < len(m.DhcpConfigPathList); i++ {
		if swag.IsZero(m.DhcpConfigPathList[i]) { // not required
			continue
		}

		if m.DhcpConfigPathList[i] != nil {
			if err := m.DhcpConfigPathList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dhcpConfigPathList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dhcpConfigPathList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RouterInstance) validateEdgeClusterInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeClusterInstance) { // not required
		return nil
	}

	if m.EdgeClusterInstance != nil {
		if err := m.EdgeClusterInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeClusterInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeClusterInstance")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) validateFailoverMode(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverMode) { // not required
		return nil
	}

	if m.FailoverMode != nil {
		if err := m.FailoverMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failoverMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failoverMode")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) validateHaMode(formats strfmt.Registry) error {
	if swag.IsZero(m.HaMode) { // not required
		return nil
	}

	if m.HaMode != nil {
		if err := m.HaMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("haMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("haMode")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) validateInternalTransitSubnetList(formats strfmt.Registry) error {
	if swag.IsZero(m.InternalTransitSubnetList) { // not required
		return nil
	}

	for i := 0; i < len(m.InternalTransitSubnetList); i++ {
		if swag.IsZero(m.InternalTransitSubnetList[i]) { // not required
			continue
		}

		if m.InternalTransitSubnetList[i] != nil {
			if err := m.InternalTransitSubnetList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internalTransitSubnetList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internalTransitSubnetList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RouterInstance) validateIp6ProfilePathList(formats strfmt.Registry) error {
	if swag.IsZero(m.Ip6ProfilePathList) { // not required
		return nil
	}

	for i := 0; i < len(m.Ip6ProfilePathList); i++ {
		if swag.IsZero(m.Ip6ProfilePathList[i]) { // not required
			continue
		}

		if m.Ip6ProfilePathList[i] != nil {
			if err := m.Ip6ProfilePathList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip6ProfilePathList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ip6ProfilePathList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RouterInstance) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RouterInstance) validateParentT0ID(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentT0ID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentT0Id", "body", "uuid", m.ParentT0ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RouterInstance) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RouterInstance) validateProtection(formats strfmt.Registry) error {
	if swag.IsZero(m.Protection) { // not required
		return nil
	}

	if m.Protection != nil {
		if err := m.Protection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	if m.ResourceType != nil {
		if err := m.ResourceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceType")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) validateRouterID(formats strfmt.Registry) error {
	if swag.IsZero(m.RouterID) { // not required
		return nil
	}

	if err := validate.FormatOf("routerId", "body", "uuid", m.RouterID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RouterInstance) validateRouterType(formats strfmt.Registry) error {
	if swag.IsZero(m.RouterType) { // not required
		return nil
	}

	if err := m.RouterType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("routerType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("routerType")
		}
		return err
	}

	return nil
}

func (m *RouterInstance) validateTransitSubnetList(formats strfmt.Registry) error {
	if swag.IsZero(m.TransitSubnetList) { // not required
		return nil
	}

	for i := 0; i < len(m.TransitSubnetList); i++ {
		if swag.IsZero(m.TransitSubnetList[i]) { // not required
			continue
		}

		if m.TransitSubnetList[i] != nil {
			if err := m.TransitSubnetList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transitSubnetList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transitSubnetList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this router instance based on the context it is used
func (m *RouterInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhcpConfigPathList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeClusterInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHaMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInternalTransitSubnetList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIp6ProfilePathList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouterType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransitSubnetList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouterInstance) contextValidateDhcpConfigPathList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DhcpConfigPathList); i++ {

		if m.DhcpConfigPathList[i] != nil {

			if swag.IsZero(m.DhcpConfigPathList[i]) { // not required
				return nil
			}

			if err := m.DhcpConfigPathList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dhcpConfigPathList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dhcpConfigPathList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RouterInstance) contextValidateEdgeClusterInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeClusterInstance != nil {

		if swag.IsZero(m.EdgeClusterInstance) { // not required
			return nil
		}

		if err := m.EdgeClusterInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeClusterInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeClusterInstance")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) contextValidateFailoverMode(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverMode != nil {

		if swag.IsZero(m.FailoverMode) { // not required
			return nil
		}

		if err := m.FailoverMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failoverMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failoverMode")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) contextValidateHaMode(ctx context.Context, formats strfmt.Registry) error {

	if m.HaMode != nil {

		if swag.IsZero(m.HaMode) { // not required
			return nil
		}

		if err := m.HaMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("haMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("haMode")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) contextValidateInternalTransitSubnetList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InternalTransitSubnetList); i++ {

		if m.InternalTransitSubnetList[i] != nil {

			if swag.IsZero(m.InternalTransitSubnetList[i]) { // not required
				return nil
			}

			if err := m.InternalTransitSubnetList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internalTransitSubnetList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internalTransitSubnetList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RouterInstance) contextValidateIp6ProfilePathList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ip6ProfilePathList); i++ {

		if m.Ip6ProfilePathList[i] != nil {

			if swag.IsZero(m.Ip6ProfilePathList[i]) { // not required
				return nil
			}

			if err := m.Ip6ProfilePathList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip6ProfilePathList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ip6ProfilePathList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RouterInstance) contextValidateProtection(ctx context.Context, formats strfmt.Registry) error {

	if m.Protection != nil {

		if swag.IsZero(m.Protection) { // not required
			return nil
		}

		if err := m.Protection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceType != nil {

		if swag.IsZero(m.ResourceType) { // not required
			return nil
		}

		if err := m.ResourceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceType")
			}
			return err
		}
	}

	return nil
}

func (m *RouterInstance) contextValidateRouterType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RouterType) { // not required
		return nil
	}

	if err := m.RouterType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("routerType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("routerType")
		}
		return err
	}

	return nil
}

func (m *RouterInstance) contextValidateTransitSubnetList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransitSubnetList); i++ {

		if m.TransitSubnetList[i] != nil {

			if swag.IsZero(m.TransitSubnetList[i]) { // not required
				return nil
			}

			if err := m.TransitSubnetList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transitSubnetList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transitSubnetList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouterInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouterInstance) UnmarshalBinary(b []byte) error {
	var res RouterInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
