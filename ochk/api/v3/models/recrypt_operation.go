// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RecryptOperation recrypt operation
//
// swagger:model RecryptOperation
type RecryptOperation string

func NewRecryptOperation(value RecryptOperation) *RecryptOperation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RecryptOperation.
func (m RecryptOperation) Pointer() *RecryptOperation {
	return &m
}

const (

	// RecryptOperationNONE captures enum value "NONE"
	RecryptOperationNONE RecryptOperation = "NONE"

	// RecryptOperationSHALLOW captures enum value "SHALLOW"
	RecryptOperationSHALLOW RecryptOperation = "SHALLOW"

	// RecryptOperationDEEP captures enum value "DEEP"
	RecryptOperationDEEP RecryptOperation = "DEEP"
)

// for schema
var recryptOperationEnum []interface{}

func init() {
	var res []RecryptOperation
	if err := json.Unmarshal([]byte(`["NONE","SHALLOW","DEEP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recryptOperationEnum = append(recryptOperationEnum, v)
	}
}

func (m RecryptOperation) validateRecryptOperationEnum(path, location string, value RecryptOperation) error {
	if err := validate.EnumCase(path, location, value, recryptOperationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this recrypt operation
func (m RecryptOperation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecryptOperationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this recrypt operation based on context it is used
func (m RecryptOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
