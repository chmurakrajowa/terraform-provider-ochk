// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// KeyUsage key usage
//
// swagger:model KeyUsage
type KeyUsage string

func NewKeyUsage(value KeyUsage) *KeyUsage {
	return &value
}

// Pointer returns a pointer to a freshly-allocated KeyUsage.
func (m KeyUsage) Pointer() *KeyUsage {
	return &m
}

const (

	// KeyUsageSIGN captures enum value "SIGN"
	KeyUsageSIGN KeyUsage = "SIGN"

	// KeyUsageVERIFY captures enum value "VERIFY"
	KeyUsageVERIFY KeyUsage = "VERIFY"

	// KeyUsageENCRYPT captures enum value "ENCRYPT"
	KeyUsageENCRYPT KeyUsage = "ENCRYPT"

	// KeyUsageDECRYPT captures enum value "DECRYPT"
	KeyUsageDECRYPT KeyUsage = "DECRYPT"

	// KeyUsageWRAPKEY captures enum value "WRAP_KEY"
	KeyUsageWRAPKEY KeyUsage = "WRAP_KEY"

	// KeyUsageUNWRAPKEY captures enum value "UNWRAP_KEY"
	KeyUsageUNWRAPKEY KeyUsage = "UNWRAP_KEY"

	// KeyUsageEXPORTKEY captures enum value "EXPORT_KEY"
	KeyUsageEXPORTKEY KeyUsage = "EXPORT_KEY"

	// KeyUsageGENERATEMAC captures enum value "GENERATE_MAC"
	KeyUsageGENERATEMAC KeyUsage = "GENERATE_MAC"

	// KeyUsageVERIFYMAC captures enum value "VERIFY_MAC"
	KeyUsageVERIFYMAC KeyUsage = "VERIFY_MAC"

	// KeyUsageDERIVEKEY captures enum value "DERIVE_KEY"
	KeyUsageDERIVEKEY KeyUsage = "DERIVE_KEY"

	// KeyUsageCONTENTCOMMITMENT captures enum value "CONTENT_COMMITMENT"
	KeyUsageCONTENTCOMMITMENT KeyUsage = "CONTENT_COMMITMENT"

	// KeyUsageKEYAGREEMENT captures enum value "KEY_AGREEMENT"
	KeyUsageKEYAGREEMENT KeyUsage = "KEY_AGREEMENT"

	// KeyUsageCERTIFICATESIGN captures enum value "CERTIFICATE_SIGN"
	KeyUsageCERTIFICATESIGN KeyUsage = "CERTIFICATE_SIGN"

	// KeyUsageCRLSIGN captures enum value "CRL_SIGN"
	KeyUsageCRLSIGN KeyUsage = "CRL_SIGN"

	// KeyUsageGENERATECRYPTOGRAM captures enum value "GENERATE_CRYPTOGRAM"
	KeyUsageGENERATECRYPTOGRAM KeyUsage = "GENERATE_CRYPTOGRAM"

	// KeyUsageVALIDATECRYPTOGRAM captures enum value "VALIDATE_CRYPTOGRAM"
	KeyUsageVALIDATECRYPTOGRAM KeyUsage = "VALIDATE_CRYPTOGRAM"

	// KeyUsageTRANSLATEENCRYPT captures enum value "TRANSLATE_ENCRYPT"
	KeyUsageTRANSLATEENCRYPT KeyUsage = "TRANSLATE_ENCRYPT"

	// KeyUsageTRANSLATEDECRYPT captures enum value "TRANSLATE_DECRYPT"
	KeyUsageTRANSLATEDECRYPT KeyUsage = "TRANSLATE_DECRYPT"

	// KeyUsageTRANSLATEWRAP captures enum value "TRANSLATE_WRAP"
	KeyUsageTRANSLATEWRAP KeyUsage = "TRANSLATE_WRAP"

	// KeyUsageTRANSLATEUNWRAP captures enum value "TRANSLATE_UNWRAP"
	KeyUsageTRANSLATEUNWRAP KeyUsage = "TRANSLATE_UNWRAP"

	// KeyUsageFPEENCRYPT captures enum value "FPE_ENCRYPT"
	KeyUsageFPEENCRYPT KeyUsage = "FPE_ENCRYPT"

	// KeyUsageFPEDECRYPT captures enum value "FPE_DECRYPT"
	KeyUsageFPEDECRYPT KeyUsage = "FPE_DECRYPT"
)

// for schema
var keyUsageEnum []interface{}

func init() {
	var res []KeyUsage
	if err := json.Unmarshal([]byte(`["SIGN","VERIFY","ENCRYPT","DECRYPT","WRAP_KEY","UNWRAP_KEY","EXPORT_KEY","GENERATE_MAC","VERIFY_MAC","DERIVE_KEY","CONTENT_COMMITMENT","KEY_AGREEMENT","CERTIFICATE_SIGN","CRL_SIGN","GENERATE_CRYPTOGRAM","VALIDATE_CRYPTOGRAM","TRANSLATE_ENCRYPT","TRANSLATE_DECRYPT","TRANSLATE_WRAP","TRANSLATE_UNWRAP","FPE_ENCRYPT","FPE_DECRYPT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keyUsageEnum = append(keyUsageEnum, v)
	}
}

func (m KeyUsage) validateKeyUsageEnum(path, location string, value KeyUsage) error {
	if err := validate.EnumCase(path, location, value, keyUsageEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this key usage
func (m KeyUsage) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateKeyUsageEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this key usage based on context it is used
func (m KeyUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
