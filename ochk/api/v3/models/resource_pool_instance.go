// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourcePoolInstance resource pool instance
//
// swagger:model ResourcePoolInstance
type ResourcePoolInstance struct {

	// config Cpu allocation expandable reservation
	ConfigCPUAllocationExpandableReservation bool `json:"configCpuAllocationExpandableReservation,omitempty"`

	// config Cpu allocation limit
	ConfigCPUAllocationLimit int64 `json:"configCpuAllocationLimit,omitempty"`

	// config Cpu allocation overhead limit
	ConfigCPUAllocationOverheadLimit int64 `json:"configCpuAllocationOverheadLimit,omitempty"`

	// config Cpu allocation reservation
	ConfigCPUAllocationReservation int64 `json:"configCpuAllocationReservation,omitempty"`

	// config memory allocation expandable reservation
	ConfigMemoryAllocationExpandableReservation bool `json:"configMemoryAllocationExpandableReservation,omitempty"`

	// config memory allocation limit
	ConfigMemoryAllocationLimit int64 `json:"configMemoryAllocationLimit,omitempty"`

	// config memory allocation overhead limit
	ConfigMemoryAllocationOverheadLimit int64 `json:"configMemoryAllocationOverheadLimit,omitempty"`

	// config memory allocation reservation
	ConfigMemoryAllocationReservation int64 `json:"configMemoryAllocationReservation,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// resource pool Id
	// Format: uuid
	ResourcePoolID strfmt.UUID `json:"resourcePoolId,omitempty"`

	// resource pool name
	ResourcePoolName string `json:"resourcePoolName,omitempty"`

	// runtime Cpu max usage
	RuntimeCPUMaxUsage int64 `json:"runtimeCpuMaxUsage,omitempty"`

	// runtime Cpu overall usage
	RuntimeCPUOverallUsage int64 `json:"runtimeCpuOverallUsage,omitempty"`

	// runtime Cpu reservation used
	RuntimeCPUReservationUsed int64 `json:"runtimeCpuReservationUsed,omitempty"`

	// runtime Cpu reservation used for Vm
	RuntimeCPUReservationUsedForVM int64 `json:"runtimeCpuReservationUsedForVm,omitempty"`

	// runtime Cpu unreserved for pool
	RuntimeCPUUnreservedForPool int64 `json:"runtimeCpuUnreservedForPool,omitempty"`

	// runtime Cpu unreserved for Vm
	RuntimeCPUUnreservedForVM int64 `json:"runtimeCpuUnreservedForVm,omitempty"`

	// runtime memory max usage
	RuntimeMemoryMaxUsage int64 `json:"runtimeMemoryMaxUsage,omitempty"`

	// runtime memory overall usage
	RuntimeMemoryOverallUsage int64 `json:"runtimeMemoryOverallUsage,omitempty"`

	// runtime memory reservation used
	RuntimeMemoryReservationUsed int64 `json:"runtimeMemoryReservationUsed,omitempty"`

	// runtime memory reservation used for Vm
	RuntimeMemoryReservationUsedForVM int64 `json:"runtimeMemoryReservationUsedForVm,omitempty"`

	// runtime memory unreserved for pool
	RuntimeMemoryUnreservedForPool int64 `json:"runtimeMemoryUnreservedForPool,omitempty"`

	// runtime memory unreserved for Vm
	RuntimeMemoryUnreservedForVM int64 `json:"runtimeMemoryUnreservedForVm,omitempty"`

	// vra Id
	VraID string `json:"vraId,omitempty"`
}

// Validate validates this resource pool instance
func (m *ResourcePoolInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourcePoolID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcePoolInstance) validateResourcePoolID(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePoolID) { // not required
		return nil
	}

	if err := validate.FormatOf("resourcePoolId", "body", "uuid", m.ResourcePoolID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource pool instance based on context it is used
func (m *ResourcePoolInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourcePoolInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcePoolInstance) UnmarshalBinary(b []byte) error {
	var res ResourcePoolInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
