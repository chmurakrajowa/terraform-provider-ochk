// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GfwRule gfw rule
//
// swagger:model GfwRule
type GfwRule struct {

	// action
	Action Action `json:"action,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// custom services
	CustomServices []*CustomServiceInstance `json:"customServices"`

	// default services
	DefaultServices []*ServiceInstance `json:"defaultServices"`

	// destination
	Destination []*SecurityGroup `json:"destination"`

	// destination excluded
	DestinationExcluded bool `json:"destinationExcluded,omitempty"`

	// direction
	Direction Direction `json:"direction,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// ip protocol
	IPProtocol IPProtocol `json:"ipProtocol,omitempty"`

	// logged
	Logged bool `json:"logged,omitempty"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// parent path
	ParentPath string `json:"parentPath,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// priority
	Priority int64 `json:"priority,omitempty"`

	// profile
	Profile []*ContextProfileInstance `json:"profile"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// protection
	Protection *Protection `json:"protection,omitempty"`

	// relative path
	RelativePath string `json:"relativePath,omitempty"`

	// resource type
	ResourceType *ResourceType `json:"resourceType,omitempty"`

	// rule Id
	// Format: uuid
	RuleID strfmt.UUID `json:"ruleId,omitempty"`

	// scope
	Scope []*RouterInstance `json:"scope"`

	// sequence number
	SequenceNumber int64 `json:"sequenceNumber,omitempty"`

	// source
	Source []*SecurityGroup `json:"source"`

	// sources excluded
	SourcesExcluded bool `json:"sourcesExcluded,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`
}

// Validate validates this gfw rule
func (m *GfwRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GfwRule) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := m.Action.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("action")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("action")
		}
		return err
	}

	return nil
}

func (m *GfwRule) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GfwRule) validateCustomServices(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomServices) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomServices); i++ {
		if swag.IsZero(m.CustomServices[i]) { // not required
			continue
		}

		if m.CustomServices[i] != nil {
			if err := m.CustomServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) validateDefaultServices(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultServices) { // not required
		return nil
	}

	for i := 0; i < len(m.DefaultServices); i++ {
		if swag.IsZero(m.DefaultServices[i]) { // not required
			continue
		}

		if m.DefaultServices[i] != nil {
			if err := m.DefaultServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("defaultServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("defaultServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	for i := 0; i < len(m.Destination); i++ {
		if swag.IsZero(m.Destination[i]) { // not required
			continue
		}

		if m.Destination[i] != nil {
			if err := m.Destination[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destination" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("destination" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *GfwRule) validateIPProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.IPProtocol) { // not required
		return nil
	}

	if err := m.IPProtocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ipProtocol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ipProtocol")
		}
		return err
	}

	return nil
}

func (m *GfwRule) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GfwRule) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	for i := 0; i < len(m.Profile); i++ {
		if swag.IsZero(m.Profile[i]) { // not required
			continue
		}

		if m.Profile[i] != nil {
			if err := m.Profile[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profile" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profile" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GfwRule) validateProtection(formats strfmt.Registry) error {
	if swag.IsZero(m.Protection) { // not required
		return nil
	}

	if m.Protection != nil {
		if err := m.Protection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection")
			}
			return err
		}
	}

	return nil
}

func (m *GfwRule) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	if m.ResourceType != nil {
		if err := m.ResourceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceType")
			}
			return err
		}
	}

	return nil
}

func (m *GfwRule) validateRuleID(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleID) { // not required
		return nil
	}

	if err := validate.FormatOf("ruleId", "body", "uuid", m.RuleID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GfwRule) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	for i := 0; i < len(m.Scope); i++ {
		if swag.IsZero(m.Scope[i]) { // not required
			continue
		}

		if m.Scope[i] != nil {
			if err := m.Scope[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	for i := 0; i < len(m.Source); i++ {
		if swag.IsZero(m.Source[i]) { // not required
			continue
		}

		if m.Source[i] != nil {
			if err := m.Source[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("source" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("source" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this gfw rule based on the context it is used
func (m *GfwRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDirection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPProtocol(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GfwRule) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := m.Action.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("action")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("action")
		}
		return err
	}

	return nil
}

func (m *GfwRule) contextValidateCustomServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomServices); i++ {

		if m.CustomServices[i] != nil {

			if swag.IsZero(m.CustomServices[i]) { // not required
				return nil
			}

			if err := m.CustomServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) contextValidateDefaultServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DefaultServices); i++ {

		if m.DefaultServices[i] != nil {

			if swag.IsZero(m.DefaultServices[i]) { // not required
				return nil
			}

			if err := m.DefaultServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("defaultServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("defaultServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Destination); i++ {

		if m.Destination[i] != nil {

			if swag.IsZero(m.Destination[i]) { // not required
				return nil
			}

			if err := m.Destination[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destination" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("destination" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) contextValidateDirection(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *GfwRule) contextValidateIPProtocol(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.IPProtocol) { // not required
		return nil
	}

	if err := m.IPProtocol.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ipProtocol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ipProtocol")
		}
		return err
	}

	return nil
}

func (m *GfwRule) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Profile); i++ {

		if m.Profile[i] != nil {

			if swag.IsZero(m.Profile[i]) { // not required
				return nil
			}

			if err := m.Profile[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profile" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profile" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) contextValidateProtection(ctx context.Context, formats strfmt.Registry) error {

	if m.Protection != nil {

		if swag.IsZero(m.Protection) { // not required
			return nil
		}

		if err := m.Protection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection")
			}
			return err
		}
	}

	return nil
}

func (m *GfwRule) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceType != nil {

		if swag.IsZero(m.ResourceType) { // not required
			return nil
		}

		if err := m.ResourceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceType")
			}
			return err
		}
	}

	return nil
}

func (m *GfwRule) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Scope); i++ {

		if m.Scope[i] != nil {

			if swag.IsZero(m.Scope[i]) { // not required
				return nil
			}

			if err := m.Scope[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GfwRule) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Source); i++ {

		if m.Source[i] != nil {

			if swag.IsZero(m.Source[i]) { // not required
				return nil
			}

			if err := m.Source[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("source" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("source" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GfwRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GfwRule) UnmarshalBinary(b []byte) error {
	var res GfwRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
