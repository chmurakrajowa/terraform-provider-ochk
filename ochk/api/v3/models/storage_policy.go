// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StoragePolicy storage policy
//
// swagger:model StoragePolicy
type StoragePolicy string

func NewStoragePolicy(value StoragePolicy) *StoragePolicy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StoragePolicy.
func (m StoragePolicy) Pointer() *StoragePolicy {
	return &m
}

const (

	// StoragePolicyUNKNOWN captures enum value "UNKNOWN"
	StoragePolicyUNKNOWN StoragePolicy = "UNKNOWN"

	// StoragePolicySTANDARD captures enum value "STANDARD"
	StoragePolicySTANDARD StoragePolicy = "STANDARD"

	// StoragePolicySTANDARDW1 captures enum value "STANDARD_W1"
	StoragePolicySTANDARDW1 StoragePolicy = "STANDARD_W1"

	// StoragePolicySTANDARDW2 captures enum value "STANDARD_W2"
	StoragePolicySTANDARDW2 StoragePolicy = "STANDARD_W2"

	// StoragePolicyENTERPRISE captures enum value "ENTERPRISE"
	StoragePolicyENTERPRISE StoragePolicy = "ENTERPRISE"

	// StoragePolicySTANDARDENCRYPTION captures enum value "STANDARDENCRYPTION"
	StoragePolicySTANDARDENCRYPTION StoragePolicy = "STANDARDENCRYPTION"

	// StoragePolicyENTERPRISEENCRYPTION captures enum value "ENTERPRISEENCRYPTION"
	StoragePolicyENTERPRISEENCRYPTION StoragePolicy = "ENTERPRISEENCRYPTION"

	// StoragePolicySTANDARDW1ENCRYPTION captures enum value "STANDARD_W1_ENCRYPTION"
	StoragePolicySTANDARDW1ENCRYPTION StoragePolicy = "STANDARD_W1_ENCRYPTION"

	// StoragePolicySTANDARDW2ENCRYPTION captures enum value "STANDARD_W2_ENCRYPTION"
	StoragePolicySTANDARDW2ENCRYPTION StoragePolicy = "STANDARD_W2_ENCRYPTION"
)

// for schema
var storagePolicyEnum []interface{}

func init() {
	var res []StoragePolicy
	if err := json.Unmarshal([]byte(`["UNKNOWN","STANDARD","STANDARD_W1","STANDARD_W2","ENTERPRISE","STANDARDENCRYPTION","ENTERPRISEENCRYPTION","STANDARD_W1_ENCRYPTION","STANDARD_W2_ENCRYPTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePolicyEnum = append(storagePolicyEnum, v)
	}
}

func (m StoragePolicy) validateStoragePolicyEnum(path, location string, value StoragePolicy) error {
	if err := validate.EnumCase(path, location, value, storagePolicyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage policy
func (m StoragePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStoragePolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this storage policy based on context it is used
func (m StoragePolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
