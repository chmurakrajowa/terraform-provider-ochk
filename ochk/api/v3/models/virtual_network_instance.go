// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualNetworkInstance virtual network instance
//
// swagger:model VirtualNetworkInstance
type VirtualNetworkInstance struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// folder path
	FolderPath string `json:"folderPath,omitempty"`

	// gateway address
	GatewayAddress string `json:"gatewayAddress,omitempty"`

	// ipam enabled
	IpamEnabled bool `json:"ipamEnabled,omitempty"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// network profile Id
	// Format: uuid
	NetworkProfileID strfmt.UUID `json:"networkProfileId,omitempty"`

	// osc network Id
	// Format: uuid
	OscNetworkID strfmt.UUID `json:"oscNetworkId,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// router ref Id
	// Format: uuid
	RouterRefID strfmt.UUID `json:"routerRefId,omitempty"`

	// segment Id
	// Format: uuid
	SegmentID strfmt.UUID `json:"segmentId,omitempty"`

	// subnet
	Subnet *SegmentSubnetInstance `json:"subnet,omitempty"`

	// subnet mask
	SubnetMask string `json:"subnetMask,omitempty"`

	// vcs network Id
	// Format: uuid
	VcsNetworkID strfmt.UUID `json:"vcsNetworkId,omitempty"`

	// virtual network Id
	// Format: uuid
	VirtualNetworkID strfmt.UUID `json:"virtualNetworkId,omitempty"`
}

// Validate validates this virtual network instance
func (m *VirtualNetworkInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOscNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterRefID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkInstance) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNetworkInstance) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNetworkInstance) validateNetworkProfileID(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkProfileID) { // not required
		return nil
	}

	if err := validate.FormatOf("networkProfileId", "body", "uuid", m.NetworkProfileID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNetworkInstance) validateOscNetworkID(formats strfmt.Registry) error {
	if swag.IsZero(m.OscNetworkID) { // not required
		return nil
	}

	if err := validate.FormatOf("oscNetworkId", "body", "uuid", m.OscNetworkID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNetworkInstance) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNetworkInstance) validateRouterRefID(formats strfmt.Registry) error {
	if swag.IsZero(m.RouterRefID) { // not required
		return nil
	}

	if err := validate.FormatOf("routerRefId", "body", "uuid", m.RouterRefID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNetworkInstance) validateSegmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.SegmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("segmentId", "body", "uuid", m.SegmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNetworkInstance) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {
		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualNetworkInstance) validateVcsNetworkID(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsNetworkID) { // not required
		return nil
	}

	if err := validate.FormatOf("vcsNetworkId", "body", "uuid", m.VcsNetworkID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNetworkInstance) validateVirtualNetworkID(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualNetworkID) { // not required
		return nil
	}

	if err := validate.FormatOf("virtualNetworkId", "body", "uuid", m.VirtualNetworkID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this virtual network instance based on the context it is used
func (m *VirtualNetworkInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkInstance) contextValidateSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.Subnet != nil {

		if swag.IsZero(m.Subnet) { // not required
			return nil
		}

		if err := m.Subnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualNetworkInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualNetworkInstance) UnmarshalBinary(b []byte) error {
	var res VirtualNetworkInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
