// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FloatingIP floating Ip
//
// swagger:model FloatingIp
type FloatingIP struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// floating Ip Id
	// Format: uuid
	FloatingIPID strfmt.UUID `json:"floatingIpId,omitempty"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// osc project Id
	// Format: uuid
	OscProjectID strfmt.UUID `json:"oscProjectId,omitempty"`

	// port forwardings
	PortForwardings []*PortForwarding `json:"portForwardings"`

	// public address
	PublicAddress string `json:"publicAddress,omitempty"`

	// vm fixed Ip
	VMFixedIP string `json:"vmFixedIp,omitempty"`

	// vm name
	VMName string `json:"vmName,omitempty"`

	// vm port Id
	// Format: uuid
	VMPortID strfmt.UUID `json:"vmPortId,omitempty"`
}

// Validate validates this floating Ip
func (m *FloatingIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFloatingIPID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOscProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortForwardings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMPortID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FloatingIP) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FloatingIP) validateFloatingIPID(formats strfmt.Registry) error {
	if swag.IsZero(m.FloatingIPID) { // not required
		return nil
	}

	if err := validate.FormatOf("floatingIpId", "body", "uuid", m.FloatingIPID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FloatingIP) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FloatingIP) validateOscProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.OscProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("oscProjectId", "body", "uuid", m.OscProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FloatingIP) validatePortForwardings(formats strfmt.Registry) error {
	if swag.IsZero(m.PortForwardings) { // not required
		return nil
	}

	for i := 0; i < len(m.PortForwardings); i++ {
		if swag.IsZero(m.PortForwardings[i]) { // not required
			continue
		}

		if m.PortForwardings[i] != nil {
			if err := m.PortForwardings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portForwardings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("portForwardings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FloatingIP) validateVMPortID(formats strfmt.Registry) error {
	if swag.IsZero(m.VMPortID) { // not required
		return nil
	}

	if err := validate.FormatOf("vmPortId", "body", "uuid", m.VMPortID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this floating Ip based on the context it is used
func (m *FloatingIP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePortForwardings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FloatingIP) contextValidatePortForwardings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PortForwardings); i++ {

		if m.PortForwardings[i] != nil {

			if swag.IsZero(m.PortForwardings[i]) { // not required
				return nil
			}

			if err := m.PortForwardings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portForwardings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("portForwardings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FloatingIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FloatingIP) UnmarshalBinary(b []byte) error {
	var res FloatingIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
