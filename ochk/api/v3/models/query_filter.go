// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryFilter query filter
//
// swagger:model QueryFilter
type QueryFilter struct {

	// end date time
	// Format: date-time
	EndDateTime strfmt.DateTime `json:"endDateTime,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// log severity
	LogSeverity LogSeverity `json:"logSeverity,omitempty"`

	// query string
	QueryString string `json:"queryString,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`

	// start date time
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"startDateTime,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`
}

// Validate validates this query filter
func (m *QueryFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryFilter) validateEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QueryFilter) validateLogSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.LogSeverity) { // not required
		return nil
	}

	if err := m.LogSeverity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("logSeverity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("logSeverity")
		}
		return err
	}

	return nil
}

func (m *QueryFilter) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this query filter based on the context it is used
func (m *QueryFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLogSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryFilter) contextValidateLogSeverity(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.LogSeverity) { // not required
		return nil
	}

	if err := m.LogSeverity.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("logSeverity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("logSeverity")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryFilter) UnmarshalBinary(b []byte) error {
	var res QueryFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
