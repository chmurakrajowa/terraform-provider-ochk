// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EncryptionInstance encryption instance
//
// swagger:model EncryptionInstance
type EncryptionInstance struct {

	// encrypt
	Encrypt bool `json:"encrypt,omitempty"`

	// encryption key Id
	EncryptionKeyID string `json:"encryptionKeyId,omitempty"`

	// encryption provider Id
	EncryptionProviderID string `json:"encryptionProviderId,omitempty"`

	// managed
	Managed bool `json:"managed,omitempty"`

	// recrypt operation
	RecryptOperation RecryptOperation `json:"recryptOperation,omitempty"`
}

// Validate validates this encryption instance
func (m *EncryptionInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecryptOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptionInstance) validateRecryptOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.RecryptOperation) { // not required
		return nil
	}

	if err := m.RecryptOperation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("recryptOperation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("recryptOperation")
		}
		return err
	}

	return nil
}

// ContextValidate validate this encryption instance based on the context it is used
func (m *EncryptionInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecryptOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptionInstance) contextValidateRecryptOperation(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RecryptOperation) { // not required
		return nil
	}

	if err := m.RecryptOperation.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("recryptOperation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("recryptOperation")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EncryptionInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EncryptionInstance) UnmarshalBinary(b []byte) error {
	var res EncryptionInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
