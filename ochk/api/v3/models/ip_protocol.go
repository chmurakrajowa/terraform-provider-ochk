// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IPProtocol Ip protocol
//
// swagger:model IpProtocol
type IPProtocol string

func NewIPProtocol(value IPProtocol) *IPProtocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated IPProtocol.
func (m IPProtocol) Pointer() *IPProtocol {
	return &m
}

const (

	// IPProtocolIPV4IPV6 captures enum value "IPV4_IPV6"
	IPProtocolIPV4IPV6 IPProtocol = "IPV4_IPV6"

	// IPProtocolIPV4 captures enum value "IPV4"
	IPProtocolIPV4 IPProtocol = "IPV4"

	// IPProtocolIPV6 captures enum value "IPV6"
	IPProtocolIPV6 IPProtocol = "IPV6"
)

// for schema
var ipProtocolEnum []interface{}

func init() {
	var res []IPProtocol
	if err := json.Unmarshal([]byte(`["IPV4_IPV6","IPV4","IPV6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipProtocolEnum = append(ipProtocolEnum, v)
	}
}

func (m IPProtocol) validateIPProtocolEnum(path, location string, value IPProtocol) error {
	if err := validate.EnumCase(path, location, value, ipProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Ip protocol
func (m IPProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIPProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Ip protocol based on context it is used
func (m IPProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
