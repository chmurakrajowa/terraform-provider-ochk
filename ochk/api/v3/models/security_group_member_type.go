// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecurityGroupMemberType security group member type
//
// swagger:model SecurityGroupMemberType
type SecurityGroupMemberType string

func NewSecurityGroupMemberType(value SecurityGroupMemberType) *SecurityGroupMemberType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecurityGroupMemberType.
func (m SecurityGroupMemberType) Pointer() *SecurityGroupMemberType {
	return &m
}

const (

	// SecurityGroupMemberTypeIPSET captures enum value "IPSET"
	SecurityGroupMemberTypeIPSET SecurityGroupMemberType = "IPSET"

	// SecurityGroupMemberTypeLOGICALPORT captures enum value "LOGICAL_PORT"
	SecurityGroupMemberTypeLOGICALPORT SecurityGroupMemberType = "LOGICAL_PORT"

	// SecurityGroupMemberTypeVIRTUALMACHINE captures enum value "VIRTUAL_MACHINE"
	SecurityGroupMemberTypeVIRTUALMACHINE SecurityGroupMemberType = "VIRTUAL_MACHINE"

	// SecurityGroupMemberTypeIPCOLLECTION captures enum value "IPCOLLECTION"
	SecurityGroupMemberTypeIPCOLLECTION SecurityGroupMemberType = "IPCOLLECTION"

	// SecurityGroupMemberTypeSEGMENT captures enum value "SEGMENT"
	SecurityGroupMemberTypeSEGMENT SecurityGroupMemberType = "SEGMENT"

	// SecurityGroupMemberTypeGROUP captures enum value "GROUP"
	SecurityGroupMemberTypeGROUP SecurityGroupMemberType = "GROUP"
)

// for schema
var securityGroupMemberTypeEnum []interface{}

func init() {
	var res []SecurityGroupMemberType
	if err := json.Unmarshal([]byte(`["IPSET","LOGICAL_PORT","VIRTUAL_MACHINE","IPCOLLECTION","SEGMENT","GROUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityGroupMemberTypeEnum = append(securityGroupMemberTypeEnum, v)
	}
}

func (m SecurityGroupMemberType) validateSecurityGroupMemberTypeEnum(path, location string, value SecurityGroupMemberType) error {
	if err := validate.EnumCase(path, location, value, securityGroupMemberTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this security group member type
func (m SecurityGroupMemberType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecurityGroupMemberTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this security group member type based on context it is used
func (m SecurityGroupMemberType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
