// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComputeSiteInstance compute site instance
//
// swagger:model ComputeSiteInstance
type ComputeSiteInstance struct {

	// compute site address
	ComputeSiteAddress string `json:"computeSiteAddress,omitempty"`

	// compute site description
	ComputeSiteDescription string `json:"computeSiteDescription,omitempty"`

	// compute site Id
	// Format: uuid
	ComputeSiteID strfmt.UUID `json:"computeSiteId,omitempty"`

	// compute site name
	ComputeSiteName string `json:"computeSiteName,omitempty"`

	// compute site type
	ComputeSiteType ComputeSiteType `json:"computeSiteType,omitempty"`

	// internal address
	InternalAddress string `json:"internalAddress,omitempty"`

	// is default for all
	IsDefaultForAll bool `json:"isDefaultForAll,omitempty"`
}

// Validate validates this compute site instance
func (m *ComputeSiteInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputeSiteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeSiteType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputeSiteInstance) validateComputeSiteID(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputeSiteID) { // not required
		return nil
	}

	if err := validate.FormatOf("computeSiteId", "body", "uuid", m.ComputeSiteID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ComputeSiteInstance) validateComputeSiteType(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputeSiteType) { // not required
		return nil
	}

	if err := m.ComputeSiteType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("computeSiteType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("computeSiteType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this compute site instance based on the context it is used
func (m *ComputeSiteInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputeSiteType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputeSiteInstance) contextValidateComputeSiteType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeSiteType) { // not required
		return nil
	}

	if err := m.ComputeSiteType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("computeSiteType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("computeSiteType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputeSiteInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputeSiteInstance) UnmarshalBinary(b []byte) error {
	var res ComputeSiteInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
