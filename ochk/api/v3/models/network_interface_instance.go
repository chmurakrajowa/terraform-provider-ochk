// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkInterfaceInstance network interface instance
//
// swagger:model NetworkInterfaceInstance
type NetworkInterfaceInstance struct {

	// connected
	Connected bool `json:"connected,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// mac
	Mac string `json:"mac,omitempty"`

	// mac type
	MacType MacType `json:"macType,omitempty"`

	// network instance
	NetworkInstance *NetworkInstance `json:"networkInstance,omitempty"`

	// network interface Id
	// Format: uuid
	NetworkInterfaceID strfmt.UUID `json:"networkInterfaceId,omitempty"`

	// network settings
	NetworkSettings *NetworkSettings `json:"networkSettings,omitempty"`

	// nic type
	NicType NicType `json:"nicType,omitempty"`

	// osc network
	OscNetwork *Network `json:"oscNetwork,omitempty"`

	// pci slot number
	PciSlotNumber int64 `json:"pciSlotNumber,omitempty"`

	// port Id
	// Format: uuid
	PortID strfmt.UUID `json:"portId,omitempty"`

	// start connected
	StartConnected bool `json:"startConnected,omitempty"`

	// status
	Status ConnectionStatus `json:"status,omitempty"`

	// upt compatibility enabled
	UptCompatibilityEnabled bool `json:"uptCompatibilityEnabled,omitempty"`

	// wake on lan enabled
	WakeOnLanEnabled bool `json:"wakeOnLanEnabled,omitempty"`
}

// Validate validates this network interface instance
func (m *NetworkInterfaceInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMacType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOscNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInterfaceInstance) validateMacType(formats strfmt.Registry) error {
	if swag.IsZero(m.MacType) { // not required
		return nil
	}

	if err := m.MacType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("macType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("macType")
		}
		return err
	}

	return nil
}

func (m *NetworkInterfaceInstance) validateNetworkInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkInstance) { // not required
		return nil
	}

	if m.NetworkInstance != nil {
		if err := m.NetworkInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkInstance")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterfaceInstance) validateNetworkInterfaceID(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkInterfaceID) { // not required
		return nil
	}

	if err := validate.FormatOf("networkInterfaceId", "body", "uuid", m.NetworkInterfaceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkInterfaceInstance) validateNetworkSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSettings) { // not required
		return nil
	}

	if m.NetworkSettings != nil {
		if err := m.NetworkSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkSettings")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterfaceInstance) validateNicType(formats strfmt.Registry) error {
	if swag.IsZero(m.NicType) { // not required
		return nil
	}

	if err := m.NicType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nicType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("nicType")
		}
		return err
	}

	return nil
}

func (m *NetworkInterfaceInstance) validateOscNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.OscNetwork) { // not required
		return nil
	}

	if m.OscNetwork != nil {
		if err := m.OscNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oscNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oscNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterfaceInstance) validatePortID(formats strfmt.Registry) error {
	if swag.IsZero(m.PortID) { // not required
		return nil
	}

	if err := validate.FormatOf("portId", "body", "uuid", m.PortID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkInterfaceInstance) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this network interface instance based on the context it is used
func (m *NetworkInterfaceInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMacType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOscNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInterfaceInstance) contextValidateMacType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.MacType) { // not required
		return nil
	}

	if err := m.MacType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("macType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("macType")
		}
		return err
	}

	return nil
}

func (m *NetworkInterfaceInstance) contextValidateNetworkInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkInstance != nil {

		if swag.IsZero(m.NetworkInstance) { // not required
			return nil
		}

		if err := m.NetworkInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkInstance")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterfaceInstance) contextValidateNetworkSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkSettings != nil {

		if swag.IsZero(m.NetworkSettings) { // not required
			return nil
		}

		if err := m.NetworkSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkSettings")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterfaceInstance) contextValidateNicType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.NicType) { // not required
		return nil
	}

	if err := m.NicType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nicType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("nicType")
		}
		return err
	}

	return nil
}

func (m *NetworkInterfaceInstance) contextValidateOscNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.OscNetwork != nil {

		if swag.IsZero(m.OscNetwork) { // not required
			return nil
		}

		if err := m.OscNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oscNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oscNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterfaceInstance) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkInterfaceInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkInterfaceInstance) UnmarshalBinary(b []byte) error {
	var res NetworkInterfaceInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
