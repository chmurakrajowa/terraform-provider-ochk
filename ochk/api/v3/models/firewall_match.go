// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FirewallMatch firewall match
//
// swagger:model FirewallMatch
type FirewallMatch string

func NewFirewallMatch(value FirewallMatch) *FirewallMatch {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FirewallMatch.
func (m FirewallMatch) Pointer() *FirewallMatch {
	return &m
}

const (

	// FirewallMatchMATCHEXTERNALADDRESS captures enum value "MATCH_EXTERNAL_ADDRESS"
	FirewallMatchMATCHEXTERNALADDRESS FirewallMatch = "MATCH_EXTERNAL_ADDRESS"

	// FirewallMatchMATCHINTERNALADDRESS captures enum value "MATCH_INTERNAL_ADDRESS"
	FirewallMatchMATCHINTERNALADDRESS FirewallMatch = "MATCH_INTERNAL_ADDRESS"

	// FirewallMatchBYPASS captures enum value "BYPASS"
	FirewallMatchBYPASS FirewallMatch = "BYPASS"
)

// for schema
var firewallMatchEnum []interface{}

func init() {
	var res []FirewallMatch
	if err := json.Unmarshal([]byte(`["MATCH_EXTERNAL_ADDRESS","MATCH_INTERNAL_ADDRESS","BYPASS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firewallMatchEnum = append(firewallMatchEnum, v)
	}
}

func (m FirewallMatch) validateFirewallMatchEnum(path, location string, value FirewallMatch) error {
	if err := validate.EnumCase(path, location, value, firewallMatchEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this firewall match
func (m FirewallMatch) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFirewallMatchEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this firewall match based on context it is used
func (m FirewallMatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
