// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMachineInstance virtual machine instance
//
// swagger:model VirtualMachineInstance
type VirtualMachineInstance struct {

	// additional virtual disk device collection
	AdditionalVirtualDiskDeviceCollection []*VirtualDiskDevice `json:"additionalVirtualDiskDeviceCollection"`

	// backup list collection
	BackupListCollection []*BackupList `json:"backupListCollection"`

	// compute resource instance
	ComputeResourceInstance *ComputeResourceInstance `json:"computeResourceInstance,omitempty"`

	// compute site
	ComputeSite *ComputeSiteInstance `json:"computeSite,omitempty"`

	// cpu count
	CPUCount int32 `json:"cpuCount,omitempty"`

	// cpu hot add enabled
	CPUHotAddEnabled bool `json:"cpuHotAddEnabled,omitempty"`

	// cpu hot remove enabled
	CPUHotRemoveEnabled bool `json:"cpuHotRemoveEnabled,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// current discount value
	CurrentDiscountValue float64 `json:"currentDiscountValue,omitempty"`

	// current snapshot Id
	// Format: uuid
	CurrentSnapshotID strfmt.UUID `json:"currentSnapshotId,omitempty"`

	// current snapshot mo ref
	CurrentSnapshotMoRef string `json:"currentSnapshotMoRef,omitempty"`

	// current total cost
	CurrentTotalCost float64 `json:"currentTotalCost,omitempty"`

	// custom specification instance
	CustomSpecificationInstance *CustomSpecificationInstance `json:"customSpecificationInstance,omitempty"`

	// datastore instance
	DatastoreInstance *DatastoreInstance `json:"datastoreInstance,omitempty"`

	// deployment instance
	DeploymentInstance *DeploymentInstance `json:"deploymentInstance,omitempty"`

	// disk files size k b
	DiskFilesSizeKB int64 `json:"diskFilesSizeKB,omitempty"`

	// dns search suffix
	DNSSearchSuffix string `json:"dnsSearchSuffix,omitempty"`

	// dns suffix
	DNSSuffix string `json:"dnsSuffix,omitempty"`

	// encryption instance
	EncryptionInstance *EncryptionInstance `json:"encryptionInstance,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// folder path
	FolderPath string `json:"folderPath,omitempty"`

	// guest full name
	GuestFullName string `json:"guestFullName,omitempty"`

	// guest Id
	GuestID string `json:"guestId,omitempty"`

	// guest tools instance
	GuestToolsInstance *GuestToolsInstance `json:"guestToolsInstance,omitempty"`

	// guest tools status
	GuestToolsStatus bool `json:"guestToolsStatus,omitempty"`

	// hot plug memory increment size
	HotPlugMemoryIncrementSize int64 `json:"hotPlugMemoryIncrementSize,omitempty"`

	// hot plug memory limit
	HotPlugMemoryLimit int64 `json:"hotPlugMemoryLimit,omitempty"`

	// initial password
	InitialPassword string `json:"initialPassword,omitempty"`

	// initial user name
	InitialUserName string `json:"initialUserName,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// iso instance
	IsoInstance *IsoInstance `json:"isoInstance,omitempty"`

	// iso name
	IsoName string `json:"isoName,omitempty"`

	// lic settings
	LicSettings *LicSettings `json:"licSettings,omitempty"`

	// memory hot add enabled
	MemoryHotAddEnabled bool `json:"memoryHotAddEnabled,omitempty"`

	// memory size m b
	MemorySizeMB int32 `json:"memorySizeMB,omitempty"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// modified
	// Format: date-time
	Modified strfmt.DateTime `json:"modified,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// network interface instance collection
	NetworkInterfaceInstanceCollection []*NetworkInterfaceInstance `json:"networkInterfaceInstanceCollection"`

	// num cores per socket
	NumCoresPerSocket int32 `json:"numCoresPerSocket,omitempty"`

	// os type
	OsType OsType `json:"osType,omitempty"`

	// os virtual disk device
	OsVirtualDiskDevice *VirtualDiskDevice `json:"osVirtualDiskDevice,omitempty"`

	// ovf Ip configuration
	OvfIPConfiguration bool `json:"ovfIpConfiguration,omitempty"`

	// ovf name
	OvfName string `json:"ovfName,omitempty"`

	// power state
	PowerState PowerState `json:"powerState,omitempty"`

	// primary Dns address
	PrimaryDNSAddress string `json:"primaryDnsAddress,omitempty"`

	// primary wins address
	PrimaryWinsAddress string `json:"primaryWinsAddress,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// read only
	ReadOnly bool `json:"readOnly,omitempty"`

	// resource pool instance
	ResourcePoolInstance *ResourcePoolInstance `json:"resourcePoolInstance,omitempty"`

	// resource profile
	ResourceProfile VirtualMachineResourceProfile `json:"resourceProfile,omitempty"`

	// secondary Dns address
	SecondaryDNSAddress string `json:"secondaryDnsAddress,omitempty"`

	// secondary wins address
	SecondaryWinsAddress string `json:"secondaryWinsAddress,omitempty"`

	// ssh key
	SSHKey string `json:"sshKey,omitempty"`

	// storage committed
	StorageCommitted int64 `json:"storageCommitted,omitempty"`

	// storage policy
	StoragePolicy StoragePolicy `json:"storagePolicy,omitempty"`

	// storage uncommitted
	StorageUncommitted int64 `json:"storageUncommitted,omitempty"`

	// tags
	Tags []*Tag `json:"tags"`

	// template
	Template bool `json:"template,omitempty"`

	// template instance
	TemplateInstance *TemplateInstance `json:"templateInstance,omitempty"`

	// tenant instance
	TenantInstance *TenantInstance `json:"tenantInstance,omitempty"`

	// total disks size m b
	TotalDisksSizeMB int64 `json:"totalDisksSizeMB,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// virtual disk collection
	VirtualDiskCollection []*DiskInstance `json:"virtualDiskCollection"`

	// virtual machine Id
	// Format: uuid
	VirtualMachineID strfmt.UUID `json:"virtualMachineId,omitempty"`

	// virtual machine name
	VirtualMachineName string `json:"virtualMachineName,omitempty"`

	// virtual network devices
	VirtualNetworkDevices []*VirtualNetworkDevice `json:"virtualNetworkDevices"`

	// vm folder mo ref
	VMFolderMoRef string `json:"vmFolderMoRef,omitempty"`

	// vm path name
	VMPathName string `json:"vmPathName,omitempty"`
}

// Validate validates this virtual machine instance
func (m *VirtualMachineInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalVirtualDiskDeviceCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupListCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeResourceInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomSpecificationInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastoreInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestToolsInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsoInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaceInstanceCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVirtualDiskDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePoolInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDiskCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualNetworkDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineInstance) validateAdditionalVirtualDiskDeviceCollection(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalVirtualDiskDeviceCollection) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalVirtualDiskDeviceCollection); i++ {
		if swag.IsZero(m.AdditionalVirtualDiskDeviceCollection[i]) { // not required
			continue
		}

		if m.AdditionalVirtualDiskDeviceCollection[i] != nil {
			if err := m.AdditionalVirtualDiskDeviceCollection[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalVirtualDiskDeviceCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalVirtualDiskDeviceCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) validateBackupListCollection(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupListCollection) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupListCollection); i++ {
		if swag.IsZero(m.BackupListCollection[i]) { // not required
			continue
		}

		if m.BackupListCollection[i] != nil {
			if err := m.BackupListCollection[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupListCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupListCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) validateComputeResourceInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputeResourceInstance) { // not required
		return nil
	}

	if m.ComputeResourceInstance != nil {
		if err := m.ComputeResourceInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeResourceInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeResourceInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateComputeSite(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputeSite) { // not required
		return nil
	}

	if m.ComputeSite != nil {
		if err := m.ComputeSite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeSite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeSite")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateCurrentSnapshotID(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentSnapshotID) { // not required
		return nil
	}

	if err := validate.FormatOf("currentSnapshotId", "body", "uuid", m.CurrentSnapshotID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateCustomSpecificationInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomSpecificationInstance) { // not required
		return nil
	}

	if m.CustomSpecificationInstance != nil {
		if err := m.CustomSpecificationInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customSpecificationInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customSpecificationInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateDatastoreInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreInstance) { // not required
		return nil
	}

	if m.DatastoreInstance != nil {
		if err := m.DatastoreInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateDeploymentInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentInstance) { // not required
		return nil
	}

	if m.DeploymentInstance != nil {
		if err := m.DeploymentInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateEncryptionInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionInstance) { // not required
		return nil
	}

	if m.EncryptionInstance != nil {
		if err := m.EncryptionInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateGuestToolsInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.GuestToolsInstance) { // not required
		return nil
	}

	if m.GuestToolsInstance != nil {
		if err := m.GuestToolsInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestToolsInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guestToolsInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateIsoInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.IsoInstance) { // not required
		return nil
	}

	if m.IsoInstance != nil {
		if err := m.IsoInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isoInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isoInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateLicSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.LicSettings) { // not required
		return nil
	}

	if m.LicSettings != nil {
		if err := m.LicSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("licSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("licSettings")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.Modified) { // not required
		return nil
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateNetworkInterfaceInstanceCollection(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkInterfaceInstanceCollection) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInterfaceInstanceCollection); i++ {
		if swag.IsZero(m.NetworkInterfaceInstanceCollection[i]) { // not required
			continue
		}

		if m.NetworkInterfaceInstanceCollection[i] != nil {
			if err := m.NetworkInterfaceInstanceCollection[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInterfaceInstanceCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkInterfaceInstanceCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) validateOsType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	if err := m.OsType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("osType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("osType")
		}
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateOsVirtualDiskDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.OsVirtualDiskDevice) { // not required
		return nil
	}

	if m.OsVirtualDiskDevice != nil {
		if err := m.OsVirtualDiskDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osVirtualDiskDevice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osVirtualDiskDevice")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validatePowerState(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	if err := m.PowerState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("powerState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("powerState")
		}
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateResourcePoolInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePoolInstance) { // not required
		return nil
	}

	if m.ResourcePoolInstance != nil {
		if err := m.ResourcePoolInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateResourceProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceProfile) { // not required
		return nil
	}

	if err := m.ResourceProfile.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resourceProfile")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resourceProfile")
		}
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateStoragePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePolicy) { // not required
		return nil
	}

	if err := m.StoragePolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storagePolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storagePolicy")
		}
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) validateTemplateInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.TemplateInstance) { // not required
		return nil
	}

	if m.TemplateInstance != nil {
		if err := m.TemplateInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templateInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateTenantInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.TenantInstance) { // not required
		return nil
	}

	if m.TenantInstance != nil {
		if err := m.TenantInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenantInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenantInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) validateVirtualDiskCollection(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualDiskCollection) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualDiskCollection); i++ {
		if swag.IsZero(m.VirtualDiskCollection[i]) { // not required
			continue
		}

		if m.VirtualDiskCollection[i] != nil {
			if err := m.VirtualDiskCollection[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDiskCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDiskCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) validateVirtualMachineID(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualMachineID) { // not required
		return nil
	}

	if err := validate.FormatOf("virtualMachineId", "body", "uuid", m.VirtualMachineID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) validateVirtualNetworkDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualNetworkDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualNetworkDevices); i++ {
		if swag.IsZero(m.VirtualNetworkDevices[i]) { // not required
			continue
		}

		if m.VirtualNetworkDevices[i] != nil {
			if err := m.VirtualNetworkDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualNetworkDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualNetworkDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this virtual machine instance based on the context it is used
func (m *VirtualMachineInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalVirtualDiskDeviceCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupListCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComputeResourceInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComputeSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomSpecificationInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatastoreInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeploymentInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuestToolsInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsoInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkInterfaceInstanceCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsVirtualDiskDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourcePoolInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplateInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualDiskCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualNetworkDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineInstance) contextValidateAdditionalVirtualDiskDeviceCollection(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalVirtualDiskDeviceCollection); i++ {

		if m.AdditionalVirtualDiskDeviceCollection[i] != nil {

			if swag.IsZero(m.AdditionalVirtualDiskDeviceCollection[i]) { // not required
				return nil
			}

			if err := m.AdditionalVirtualDiskDeviceCollection[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalVirtualDiskDeviceCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalVirtualDiskDeviceCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateBackupListCollection(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupListCollection); i++ {

		if m.BackupListCollection[i] != nil {

			if swag.IsZero(m.BackupListCollection[i]) { // not required
				return nil
			}

			if err := m.BackupListCollection[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupListCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupListCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateComputeResourceInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputeResourceInstance != nil {

		if swag.IsZero(m.ComputeResourceInstance) { // not required
			return nil
		}

		if err := m.ComputeResourceInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeResourceInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeResourceInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateComputeSite(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputeSite != nil {

		if swag.IsZero(m.ComputeSite) { // not required
			return nil
		}

		if err := m.ComputeSite.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeSite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeSite")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateCustomSpecificationInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomSpecificationInstance != nil {

		if swag.IsZero(m.CustomSpecificationInstance) { // not required
			return nil
		}

		if err := m.CustomSpecificationInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customSpecificationInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customSpecificationInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateDatastoreInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.DatastoreInstance != nil {

		if swag.IsZero(m.DatastoreInstance) { // not required
			return nil
		}

		if err := m.DatastoreInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateDeploymentInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.DeploymentInstance != nil {

		if swag.IsZero(m.DeploymentInstance) { // not required
			return nil
		}

		if err := m.DeploymentInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateEncryptionInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionInstance != nil {

		if swag.IsZero(m.EncryptionInstance) { // not required
			return nil
		}

		if err := m.EncryptionInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateGuestToolsInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.GuestToolsInstance != nil {

		if swag.IsZero(m.GuestToolsInstance) { // not required
			return nil
		}

		if err := m.GuestToolsInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestToolsInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guestToolsInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateIsoInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.IsoInstance != nil {

		if swag.IsZero(m.IsoInstance) { // not required
			return nil
		}

		if err := m.IsoInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isoInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isoInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateLicSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.LicSettings != nil {

		if swag.IsZero(m.LicSettings) { // not required
			return nil
		}

		if err := m.LicSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("licSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("licSettings")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateNetworkInterfaceInstanceCollection(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkInterfaceInstanceCollection); i++ {

		if m.NetworkInterfaceInstanceCollection[i] != nil {

			if swag.IsZero(m.NetworkInterfaceInstanceCollection[i]) { // not required
				return nil
			}

			if err := m.NetworkInterfaceInstanceCollection[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInterfaceInstanceCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkInterfaceInstanceCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateOsType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	if err := m.OsType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("osType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("osType")
		}
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateOsVirtualDiskDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.OsVirtualDiskDevice != nil {

		if swag.IsZero(m.OsVirtualDiskDevice) { // not required
			return nil
		}

		if err := m.OsVirtualDiskDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osVirtualDiskDevice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osVirtualDiskDevice")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidatePowerState(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	if err := m.PowerState.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("powerState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("powerState")
		}
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateResourcePoolInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePoolInstance != nil {

		if swag.IsZero(m.ResourcePoolInstance) { // not required
			return nil
		}

		if err := m.ResourcePoolInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateResourceProfile(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceProfile) { // not required
		return nil
	}

	if err := m.ResourceProfile.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resourceProfile")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resourceProfile")
		}
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateStoragePolicy(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.StoragePolicy) { // not required
		return nil
	}

	if err := m.StoragePolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storagePolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storagePolicy")
		}
		return err
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateTemplateInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.TemplateInstance != nil {

		if swag.IsZero(m.TemplateInstance) { // not required
			return nil
		}

		if err := m.TemplateInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templateInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateTenantInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.TenantInstance != nil {

		if swag.IsZero(m.TenantInstance) { // not required
			return nil
		}

		if err := m.TenantInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenantInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenantInstance")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateVirtualDiskCollection(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualDiskCollection); i++ {

		if m.VirtualDiskCollection[i] != nil {

			if swag.IsZero(m.VirtualDiskCollection[i]) { // not required
				return nil
			}

			if err := m.VirtualDiskCollection[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDiskCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDiskCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineInstance) contextValidateVirtualNetworkDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualNetworkDevices); i++ {

		if m.VirtualNetworkDevices[i] != nil {

			if swag.IsZero(m.VirtualNetworkDevices[i]) { // not required
				return nil
			}

			if err := m.VirtualNetworkDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualNetworkDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualNetworkDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachineInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachineInstance) UnmarshalBinary(b []byte) error {
	var res VirtualMachineInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
