// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkInstance network instance
//
// swagger:model NetworkInstance
type NetworkInstance struct {

	// compute site Id
	// Format: uuid
	ComputeSiteID strfmt.UUID `json:"computeSiteId,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// network Id
	// Format: uuid
	NetworkID strfmt.UUID `json:"networkId,omitempty"`

	// network type
	NetworkType NetworkType `json:"networkType,omitempty"`
}

// Validate validates this network instance
func (m *NetworkInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputeSiteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInstance) validateComputeSiteID(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputeSiteID) { // not required
		return nil
	}

	if err := validate.FormatOf("computeSiteId", "body", "uuid", m.ComputeSiteID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkInstance) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkInstance) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkInstance) validateNetworkID(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkID) { // not required
		return nil
	}

	if err := validate.FormatOf("networkId", "body", "uuid", m.NetworkID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkInstance) validateNetworkType(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkType) { // not required
		return nil
	}

	if err := m.NetworkType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networkType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("networkType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this network instance based on the context it is used
func (m *NetworkInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInstance) contextValidateNetworkType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkType) { // not required
		return nil
	}

	if err := m.NetworkType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networkType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("networkType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkInstance) UnmarshalBinary(b []byte) error {
	var res NetworkInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
