// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirewallRule firewall rule
//
// swagger:model FirewallRule
type FirewallRule struct {

	// created by
	CreatedBy *UserInstance `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// direction
	Direction Direction1 `json:"direction,omitempty"`

	// ether type
	EtherType EtherType `json:"etherType,omitempty"`

	// external Id
	// Format: uuid
	ExternalID strfmt.UUID `json:"externalId,omitempty"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// modified by
	ModifiedBy *UserInstance `json:"modifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// port range max
	PortRangeMax int64 `json:"portRangeMax,omitempty"`

	// port range min
	PortRangeMin int64 `json:"portRangeMin,omitempty"`

	// project external Id
	// Format: uuid
	ProjectExternalID strfmt.UUID `json:"projectExternalId,omitempty"`

	// protocol
	Protocol Protocol `json:"protocol,omitempty"`

	// remote Ip prefix
	RemoteIPPrefix string `json:"remoteIpPrefix,omitempty"`

	// rule Id
	// Format: uuid
	RuleID strfmt.UUID `json:"ruleId,omitempty"`

	// security group
	SecurityGroup *SecurityGroup `json:"securityGroup,omitempty"`
}

// Validate validates this firewall rule
func (m *FirewallRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEtherType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirewallRule) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *FirewallRule) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FirewallRule) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *FirewallRule) validateEtherType(formats strfmt.Registry) error {
	if swag.IsZero(m.EtherType) { // not required
		return nil
	}

	if err := m.EtherType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("etherType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("etherType")
		}
		return err
	}

	return nil
}

func (m *FirewallRule) validateExternalID(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalID) { // not required
		return nil
	}

	if err := validate.FormatOf("externalId", "body", "uuid", m.ExternalID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FirewallRule) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FirewallRule) validateModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *FirewallRule) validateProjectExternalID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectExternalID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectExternalId", "body", "uuid", m.ProjectExternalID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FirewallRule) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("protocol")
		}
		return err
	}

	return nil
}

func (m *FirewallRule) validateRuleID(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleID) { // not required
		return nil
	}

	if err := validate.FormatOf("ruleId", "body", "uuid", m.RuleID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FirewallRule) validateSecurityGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityGroup) { // not required
		return nil
	}

	if m.SecurityGroup != nil {
		if err := m.SecurityGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityGroup")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this firewall rule based on the context it is used
func (m *FirewallRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDirection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEtherType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtocol(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirewallRule) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {

		if swag.IsZero(m.CreatedBy) { // not required
			return nil
		}

		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *FirewallRule) contextValidateDirection(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *FirewallRule) contextValidateEtherType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EtherType) { // not required
		return nil
	}

	if err := m.EtherType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("etherType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("etherType")
		}
		return err
	}

	return nil
}

func (m *FirewallRule) contextValidateModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ModifiedBy != nil {

		if swag.IsZero(m.ModifiedBy) { // not required
			return nil
		}

		if err := m.ModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *FirewallRule) contextValidateProtocol(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := m.Protocol.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("protocol")
		}
		return err
	}

	return nil
}

func (m *FirewallRule) contextValidateSecurityGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityGroup != nil {

		if swag.IsZero(m.SecurityGroup) { // not required
			return nil
		}

		if err := m.SecurityGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirewallRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirewallRule) UnmarshalBinary(b []byte) error {
	var res FirewallRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
