// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectInstance project instance
//
// swagger:model ProjectInstance
type ProjectInstance struct {

	// account Id
	// Format: uuid
	AccountID strfmt.UUID `json:"accountId,omitempty"`

	// cost
	Cost float32 `json:"cost,omitempty"`

	// cpu allocated
	CPUAllocated int64 `json:"cpuAllocated,omitempty"`

	// cpu reserved
	CPUReserved int64 `json:"cpuReserved,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// estimated monthly cost
	EstimatedMonthlyCost float32 `json:"estimatedMonthlyCost,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// is deleted
	IsDeleted bool `json:"isDeleted,omitempty"`

	// limit enabled
	LimitEnabled bool `json:"limitEnabled,omitempty"`

	// memory reserved size m b
	MemoryReservedSizeMB int64 `json:"memoryReservedSizeMB,omitempty"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// ram allocated
	RAMAllocated int64 `json:"ramAllocated,omitempty"`

	// storage allocated
	StorageAllocated int64 `json:"storageAllocated,omitempty"`

	// storage reserved size g b
	StorageReservedSizeGB int64 `json:"storageReservedSizeGB,omitempty"`

	// vm count
	VMCount int64 `json:"vmCount,omitempty"`

	// vrf Id
	// Format: uuid
	VrfID strfmt.UUID `json:"vrfId,omitempty"`
}

// Validate validates this project instance
func (m *ProjectInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVrfID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectInstance) validateAccountID(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountID) { // not required
		return nil
	}

	if err := validate.FormatOf("accountId", "body", "uuid", m.AccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInstance) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInstance) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInstance) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInstance) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInstance) validateVrfID(formats strfmt.Registry) error {
	if swag.IsZero(m.VrfID) { // not required
		return nil
	}

	if err := validate.FormatOf("vrfId", "body", "uuid", m.VrfID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project instance based on context it is used
func (m *ProjectInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectInstance) UnmarshalBinary(b []byte) error {
	var res ProjectInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
