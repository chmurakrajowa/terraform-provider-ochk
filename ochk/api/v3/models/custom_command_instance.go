// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomCommandInstance custom command instance
//
// swagger:model CustomCommandInstance
type CustomCommandInstance struct {

	// arguments
	Arguments string `json:"arguments,omitempty"`

	// custom command Id
	// Format: uuid
	CustomCommandID strfmt.UUID `json:"customCommandId,omitempty"`

	// custom command name
	CustomCommandName string `json:"customCommandName,omitempty"`

	// program path
	ProgramPath string `json:"programPath,omitempty"`

	// wait for finish
	WaitForFinish bool `json:"waitForFinish,omitempty"`

	// working directory
	WorkingDirectory string `json:"workingDirectory,omitempty"`
}

// Validate validates this custom command instance
func (m *CustomCommandInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomCommandID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomCommandInstance) validateCustomCommandID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomCommandID) { // not required
		return nil
	}

	if err := validate.FormatOf("customCommandId", "body", "uuid", m.CustomCommandID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this custom command instance based on context it is used
func (m *CustomCommandInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomCommandInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomCommandInstance) UnmarshalBinary(b []byte) error {
	var res CustomCommandInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
