// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RouterType router type
//
// swagger:model RouterType
type RouterType string

func NewRouterType(value RouterType) *RouterType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RouterType.
func (m RouterType) Pointer() *RouterType {
	return &m
}

const (

	// RouterTypeTIER0 captures enum value "TIER0"
	RouterTypeTIER0 RouterType = "TIER0"

	// RouterTypeTIER1 captures enum value "TIER1"
	RouterTypeTIER1 RouterType = "TIER1"
)

// for schema
var routerTypeEnum []interface{}

func init() {
	var res []RouterType
	if err := json.Unmarshal([]byte(`["TIER0","TIER1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routerTypeEnum = append(routerTypeEnum, v)
	}
}

func (m RouterType) validateRouterTypeEnum(path, location string, value RouterType) error {
	if err := validate.EnumCase(path, location, value, routerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this router type
func (m RouterType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRouterTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this router type based on context it is used
func (m RouterType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
