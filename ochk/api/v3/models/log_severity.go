// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LogSeverity log severity
//
// swagger:model LogSeverity
type LogSeverity string

func NewLogSeverity(value LogSeverity) *LogSeverity {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LogSeverity.
func (m LogSeverity) Pointer() *LogSeverity {
	return &m
}

const (

	// LogSeverityDEFAULT captures enum value "DEFAULT"
	LogSeverityDEFAULT LogSeverity = "DEFAULT"

	// LogSeverityINFO captures enum value "INFO"
	LogSeverityINFO LogSeverity = "INFO"

	// LogSeverityDEBUG captures enum value "DEBUG"
	LogSeverityDEBUG LogSeverity = "DEBUG"

	// LogSeverityNOTICE captures enum value "NOTICE"
	LogSeverityNOTICE LogSeverity = "NOTICE"

	// LogSeverityWARN captures enum value "WARN"
	LogSeverityWARN LogSeverity = "WARN"

	// LogSeverityWARNING captures enum value "WARNING"
	LogSeverityWARNING LogSeverity = "WARNING"

	// LogSeverityERROR captures enum value "ERROR"
	LogSeverityERROR LogSeverity = "ERROR"

	// LogSeverityCRITICAL captures enum value "CRITICAL"
	LogSeverityCRITICAL LogSeverity = "CRITICAL"

	// LogSeverityFATAL captures enum value "FATAL"
	LogSeverityFATAL LogSeverity = "FATAL"

	// LogSeverityALERT captures enum value "ALERT"
	LogSeverityALERT LogSeverity = "ALERT"

	// LogSeverityEMERGENCY captures enum value "EMERGENCY"
	LogSeverityEMERGENCY LogSeverity = "EMERGENCY"
)

// for schema
var logSeverityEnum []interface{}

func init() {
	var res []LogSeverity
	if err := json.Unmarshal([]byte(`["DEFAULT","INFO","DEBUG","NOTICE","WARN","WARNING","ERROR","CRITICAL","FATAL","ALERT","EMERGENCY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logSeverityEnum = append(logSeverityEnum, v)
	}
}

func (m LogSeverity) validateLogSeverityEnum(path, location string, value LogSeverity) error {
	if err := validate.EnumCase(path, location, value, logSeverityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this log severity
func (m LogSeverity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogSeverityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this log severity based on context it is used
func (m LogSeverity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
