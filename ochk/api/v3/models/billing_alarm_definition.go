// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillingAlarmDefinition billing alarm definition
//
// swagger:model BillingAlarmDefinition
type BillingAlarmDefinition struct {

	// account Id
	// Format: uuid
	AccountID strfmt.UUID `json:"accountId,omitempty"`

	// alarm definition description
	AlarmDefinitionDescription string `json:"alarmDefinitionDescription,omitempty"`

	// alarm definition Id
	// Format: uuid
	AlarmDefinitionID strfmt.UUID `json:"alarmDefinitionId,omitempty"`

	// alarm definition name
	AlarmDefinitionName string `json:"alarmDefinitionName,omitempty"`

	// alarm enabled
	AlarmEnabled bool `json:"alarmEnabled,omitempty"`

	// all criteria must be meet
	AllCriteriaMustBeMeet bool `json:"allCriteriaMustBeMeet,omitempty"`

	// block resource deployment
	BlockResourceDeployment bool `json:"blockResourceDeployment,omitempty"`

	// cpu allocation alarm enabled
	CPUAllocationAlarmEnabled bool `json:"cpuAllocationAlarmEnabled,omitempty"`

	// cpu allocation operator
	CPUAllocationOperator BillingAlarmOperator `json:"cpuAllocationOperator,omitempty"`

	// cpu allocation threshold value
	CPUAllocationThresholdValue float32 `json:"cpuAllocationThresholdValue,omitempty"`

	// cpu usage alarm enabled
	CPUUsageAlarmEnabled bool `json:"cpuUsageAlarmEnabled,omitempty"`

	// cpu usage operator
	CPUUsageOperator BillingAlarmOperator `json:"cpuUsageOperator,omitempty"`

	// cpu usage threshold value
	CPUUsageThresholdValue float32 `json:"cpuUsageThresholdValue,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// group instance list
	GroupInstanceList []*GroupInstance `json:"groupInstanceList"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// ram allocation alarm enabled
	RAMAllocationAlarmEnabled bool `json:"ramAllocationAlarmEnabled,omitempty"`

	// ram allocation operator
	RAMAllocationOperator BillingAlarmOperator `json:"ramAllocationOperator,omitempty"`

	// ram allocation threshold value
	RAMAllocationThresholdValue float32 `json:"ramAllocationThresholdValue,omitempty"`

	// ram usage alarm enabled
	RAMUsageAlarmEnabled bool `json:"ramUsageAlarmEnabled,omitempty"`

	// ram usage operator
	RAMUsageOperator BillingAlarmOperator `json:"ramUsageOperator,omitempty"`

	// ram usage threshold value
	RAMUsageThresholdValue float32 `json:"ramUsageThresholdValue,omitempty"`

	// send e mail notification
	SendEMailNotification bool `json:"sendEMailNotification,omitempty"`

	// send notification
	SendNotification bool `json:"sendNotification,omitempty"`

	// storage allocation alarm enabled
	StorageAllocationAlarmEnabled bool `json:"storageAllocationAlarmEnabled,omitempty"`

	// storage allocation operator
	StorageAllocationOperator BillingAlarmOperator `json:"storageAllocationOperator,omitempty"`

	// storage allocation threshold value
	StorageAllocationThresholdValue float32 `json:"storageAllocationThresholdValue,omitempty"`

	// storage usage alarm enabled
	StorageUsageAlarmEnabled bool `json:"storageUsageAlarmEnabled,omitempty"`

	// storage usage operator
	StorageUsageOperator BillingAlarmOperator `json:"storageUsageOperator,omitempty"`

	// storage usage threshold value
	StorageUsageThresholdValue float32 `json:"storageUsageThresholdValue,omitempty"`

	// tag Id
	TagID int32 `json:"tagId,omitempty"`

	// total cost threshold value
	TotalCostThresholdValue float32 `json:"totalCostThresholdValue,omitempty"`

	// total cost usage alarm enabled
	TotalCostUsageAlarmEnabled bool `json:"totalCostUsageAlarmEnabled,omitempty"`

	// total cost usage operator
	TotalCostUsageOperator BillingAlarmOperator `json:"totalCostUsageOperator,omitempty"`

	// user instance list
	UserInstanceList []*UserInstance `json:"userInstanceList"`
}

// Validate validates this billing alarm definition
func (m *BillingAlarmDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlarmDefinitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUAllocationOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUUsageOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupInstanceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRAMAllocationOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRAMUsageOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageAllocationOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageUsageOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCostUsageOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInstanceList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingAlarmDefinition) validateAccountID(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountID) { // not required
		return nil
	}

	if err := validate.FormatOf("accountId", "body", "uuid", m.AccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateAlarmDefinitionID(formats strfmt.Registry) error {
	if swag.IsZero(m.AlarmDefinitionID) { // not required
		return nil
	}

	if err := validate.FormatOf("alarmDefinitionId", "body", "uuid", m.AlarmDefinitionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateCPUAllocationOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUAllocationOperator) { // not required
		return nil
	}

	if err := m.CPUAllocationOperator.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cpuAllocationOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cpuAllocationOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateCPUUsageOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUUsageOperator) { // not required
		return nil
	}

	if err := m.CPUUsageOperator.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cpuUsageOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cpuUsageOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateGroupInstanceList(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupInstanceList) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupInstanceList); i++ {
		if swag.IsZero(m.GroupInstanceList[i]) { // not required
			continue
		}

		if m.GroupInstanceList[i] != nil {
			if err := m.GroupInstanceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupInstanceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupInstanceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BillingAlarmDefinition) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateRAMAllocationOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.RAMAllocationOperator) { // not required
		return nil
	}

	if err := m.RAMAllocationOperator.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ramAllocationOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ramAllocationOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateRAMUsageOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.RAMUsageOperator) { // not required
		return nil
	}

	if err := m.RAMUsageOperator.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ramUsageOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ramUsageOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateStorageAllocationOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageAllocationOperator) { // not required
		return nil
	}

	if err := m.StorageAllocationOperator.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageAllocationOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storageAllocationOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateStorageUsageOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageUsageOperator) { // not required
		return nil
	}

	if err := m.StorageUsageOperator.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageUsageOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storageUsageOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateTotalCostUsageOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalCostUsageOperator) { // not required
		return nil
	}

	if err := m.TotalCostUsageOperator.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("totalCostUsageOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("totalCostUsageOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) validateUserInstanceList(formats strfmt.Registry) error {
	if swag.IsZero(m.UserInstanceList) { // not required
		return nil
	}

	for i := 0; i < len(m.UserInstanceList); i++ {
		if swag.IsZero(m.UserInstanceList[i]) { // not required
			continue
		}

		if m.UserInstanceList[i] != nil {
			if err := m.UserInstanceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userInstanceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userInstanceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this billing alarm definition based on the context it is used
func (m *BillingAlarmDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCPUAllocationOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCPUUsageOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupInstanceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRAMAllocationOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRAMUsageOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageAllocationOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageUsageOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalCostUsageOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserInstanceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingAlarmDefinition) contextValidateCPUAllocationOperator(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CPUAllocationOperator) { // not required
		return nil
	}

	if err := m.CPUAllocationOperator.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cpuAllocationOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cpuAllocationOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) contextValidateCPUUsageOperator(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CPUUsageOperator) { // not required
		return nil
	}

	if err := m.CPUUsageOperator.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cpuUsageOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cpuUsageOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) contextValidateGroupInstanceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GroupInstanceList); i++ {

		if m.GroupInstanceList[i] != nil {

			if swag.IsZero(m.GroupInstanceList[i]) { // not required
				return nil
			}

			if err := m.GroupInstanceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupInstanceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupInstanceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BillingAlarmDefinition) contextValidateRAMAllocationOperator(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RAMAllocationOperator) { // not required
		return nil
	}

	if err := m.RAMAllocationOperator.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ramAllocationOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ramAllocationOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) contextValidateRAMUsageOperator(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RAMUsageOperator) { // not required
		return nil
	}

	if err := m.RAMUsageOperator.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ramUsageOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ramUsageOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) contextValidateStorageAllocationOperator(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.StorageAllocationOperator) { // not required
		return nil
	}

	if err := m.StorageAllocationOperator.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageAllocationOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storageAllocationOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) contextValidateStorageUsageOperator(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.StorageUsageOperator) { // not required
		return nil
	}

	if err := m.StorageUsageOperator.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageUsageOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storageUsageOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) contextValidateTotalCostUsageOperator(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TotalCostUsageOperator) { // not required
		return nil
	}

	if err := m.TotalCostUsageOperator.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("totalCostUsageOperator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("totalCostUsageOperator")
		}
		return err
	}

	return nil
}

func (m *BillingAlarmDefinition) contextValidateUserInstanceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserInstanceList); i++ {

		if m.UserInstanceList[i] != nil {

			if swag.IsZero(m.UserInstanceList[i]) { // not required
				return nil
			}

			if err := m.UserInstanceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userInstanceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userInstanceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingAlarmDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingAlarmDefinition) UnmarshalBinary(b []byte) error {
	var res BillingAlarmDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
