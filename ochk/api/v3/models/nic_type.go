// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NicType nic type
//
// swagger:model NicType
type NicType string

func NewNicType(value NicType) *NicType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NicType.
func (m NicType) Pointer() *NicType {
	return &m
}

const (

	// NicTypeVirtualE1000 captures enum value "VirtualE1000"
	NicTypeVirtualE1000 NicType = "VirtualE1000"

	// NicTypeVirtualE1000e captures enum value "VirtualE1000e"
	NicTypeVirtualE1000e NicType = "VirtualE1000e"

	// NicTypeVirtualPCNet32 captures enum value "VirtualPCNet32"
	NicTypeVirtualPCNet32 NicType = "VirtualPCNet32"

	// NicTypeVirtualSriovEthernetCard captures enum value "VirtualSriovEthernetCard"
	NicTypeVirtualSriovEthernetCard NicType = "VirtualSriovEthernetCard"

	// NicTypeVirtualVmxnet2 captures enum value "VirtualVmxnet2"
	NicTypeVirtualVmxnet2 NicType = "VirtualVmxnet2"

	// NicTypeVirtualVmxnet3 captures enum value "VirtualVmxnet3"
	NicTypeVirtualVmxnet3 NicType = "VirtualVmxnet3"

	// NicTypeOscVirtualAdapter captures enum value "OscVirtualAdapter"
	NicTypeOscVirtualAdapter NicType = "OscVirtualAdapter"
)

// for schema
var nicTypeEnum []interface{}

func init() {
	var res []NicType
	if err := json.Unmarshal([]byte(`["VirtualE1000","VirtualE1000e","VirtualPCNet32","VirtualSriovEthernetCard","VirtualVmxnet2","VirtualVmxnet3","OscVirtualAdapter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nicTypeEnum = append(nicTypeEnum, v)
	}
}

func (m NicType) validateNicTypeEnum(path, location string, value NicType) error {
	if err := validate.EnumCase(path, location, value, nicTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this nic type
func (m NicType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNicTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this nic type based on context it is used
func (m NicType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
