// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComputeResourceInstance compute resource instance
//
// swagger:model ComputeResourceInstance
type ComputeResourceInstance struct {

	// compute resource
	ComputeResource string `json:"computeResource,omitempty"`

	// computer resource Id
	// Format: uuid
	ComputerResourceID strfmt.UUID `json:"computerResourceId,omitempty"`

	// effective Cpu
	EffectiveCPU int64 `json:"effectiveCpu,omitempty"`

	// effective memory
	EffectiveMemory int64 `json:"effectiveMemory,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// num Cpu cores
	NumCPUCores int64 `json:"numCpuCores,omitempty"`

	// num Cpu threads
	NumCPUThreads int64 `json:"numCpuThreads,omitempty"`

	// num effective hosts
	NumEffectiveHosts int64 `json:"numEffectiveHosts,omitempty"`

	// num hosts
	NumHosts int64 `json:"numHosts,omitempty"`

	// total Cpu
	TotalCPU int64 `json:"totalCpu,omitempty"`

	// total memory
	TotalMemory int64 `json:"totalMemory,omitempty"`

	// vra Id
	VraID string `json:"vraId,omitempty"`
}

// Validate validates this compute resource instance
func (m *ComputeResourceInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputerResourceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputeResourceInstance) validateComputerResourceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputerResourceID) { // not required
		return nil
	}

	if err := validate.FormatOf("computerResourceId", "body", "uuid", m.ComputerResourceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this compute resource instance based on context it is used
func (m *ComputeResourceInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputeResourceInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputeResourceInstance) UnmarshalBinary(b []byte) error {
	var res ComputeResourceInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
