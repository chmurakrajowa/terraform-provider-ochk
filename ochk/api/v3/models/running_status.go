// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RunningStatus running status
//
// swagger:model RunningStatus
type RunningStatus string

func NewRunningStatus(value RunningStatus) *RunningStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RunningStatus.
func (m RunningStatus) Pointer() *RunningStatus {
	return &m
}

const (

	// RunningStatusGuestToolsExecutingScripts captures enum value "guestToolsExecutingScripts"
	RunningStatusGuestToolsExecutingScripts RunningStatus = "guestToolsExecutingScripts"

	// RunningStatusGuestToolsNotRunning captures enum value "guestToolsNotRunning"
	RunningStatusGuestToolsNotRunning RunningStatus = "guestToolsNotRunning"

	// RunningStatusGuestToolsRunning captures enum value "guestToolsRunning"
	RunningStatusGuestToolsRunning RunningStatus = "guestToolsRunning"
)

// for schema
var runningStatusEnum []interface{}

func init() {
	var res []RunningStatus
	if err := json.Unmarshal([]byte(`["guestToolsExecutingScripts","guestToolsNotRunning","guestToolsRunning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runningStatusEnum = append(runningStatusEnum, v)
	}
}

func (m RunningStatus) validateRunningStatusEnum(path, location string, value RunningStatus) error {
	if err := validate.EnumCase(path, location, value, runningStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this running status
func (m RunningStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRunningStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this running status based on context it is used
func (m RunningStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
