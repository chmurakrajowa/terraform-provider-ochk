// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMachineReportElement virtual machine report element
//
// swagger:model VirtualMachineReportElement
type VirtualMachineReportElement struct {

	// allocated storage g b
	AllocatedStorageGB float32 `json:"allocatedStorageGB,omitempty"`

	// allocatedv CPU
	AllocatedvCPU int32 `json:"allocatedvCPU,omitempty"`

	// allocatedv RAM
	AllocatedvRAM int32 `json:"allocatedvRAM,omitempty"`

	// config counts
	ConfigCounts int32 `json:"configCounts,omitempty"`

	// config time allocation
	ConfigTimeAllocation int32 `json:"configTimeAllocation,omitempty"`

	// configm time allocation when powered on
	ConfigmTimeAllocationWhenPoweredOn int32 `json:"configmTimeAllocationWhenPoweredOn,omitempty"`

	// cost
	Cost float32 `json:"cost,omitempty"`

	// cpu cost
	CPUCost float32 `json:"cpuCost,omitempty"`

	// current report hours
	CurrentReportHours int32 `json:"currentReportHours,omitempty"`

	// discount Cpu cost
	DiscountCPUCost float32 `json:"discountCpuCost,omitempty"`

	// discount percentage
	DiscountPercentage float32 `json:"discountPercentage,omitempty"`

	// discount RAM cost
	DiscountRAMCost float32 `json:"discountRAMCost,omitempty"`

	// discount value
	DiscountValue float32 `json:"discountValue,omitempty"`

	// estimated monthly cost
	EstimatedMonthlyCost float32 `json:"estimatedMonthlyCost,omitempty"`

	// insert date
	// Format: date-time
	InsertDate strfmt.DateTime `json:"insertDate,omitempty"`

	// license cost
	LicenseCost float32 `json:"licenseCost,omitempty"`

	// os type
	OsType OsType `json:"osType,omitempty"`

	// ram cost
	RAMCost float32 `json:"ramCost,omitempty"`

	// resource usage time
	ResourceUsageTime string `json:"resourceUsageTime,omitempty"`

	// running time perc
	RunningTimePerc int32 `json:"runningTimePerc,omitempty"`

	// scoring value
	ScoringValue float32 `json:"scoringValue,omitempty"`

	// snapshot cost
	SnapshotCost float32 `json:"snapshotCost,omitempty"`

	// snapshot g b
	SnapshotGB float32 `json:"snapshotGB,omitempty"`

	// storage cost
	StorageCost float32 `json:"storageCost,omitempty"`

	// storage policy
	StoragePolicy string `json:"storagePolicy,omitempty"`

	// storage total used g b
	StorageTotalUsedGB float32 `json:"storageTotalUsedGB,omitempty"`

	// tags
	Tags string `json:"tags,omitempty"`

	// total cost after discount
	TotalCostAfterDiscount float32 `json:"totalCostAfterDiscount,omitempty"`

	// total cost after discount with license
	TotalCostAfterDiscountWithLicense float32 `json:"totalCostAfterDiscountWithLicense,omitempty"`

	// total hours
	TotalHours int32 `json:"totalHours,omitempty"`

	// total hours allocated
	TotalHoursAllocated int32 `json:"totalHoursAllocated,omitempty"`

	// total hours powered on
	TotalHoursPoweredOn int32 `json:"totalHoursPoweredOn,omitempty"`

	// virtual machine guest
	VirtualMachineGuest string `json:"virtualMachineGuest,omitempty"`

	// virtual machine Id
	// Format: uuid
	VirtualMachineID strfmt.UUID `json:"virtualMachineId,omitempty"`

	// virtual machine name
	VirtualMachineName string `json:"virtualMachineName,omitempty"`
}

// Validate validates this virtual machine report element
func (m *VirtualMachineReportElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInsertDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachineID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineReportElement) validateInsertDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InsertDate) { // not required
		return nil
	}

	if err := validate.FormatOf("insertDate", "body", "date-time", m.InsertDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineReportElement) validateOsType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	if err := m.OsType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("osType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("osType")
		}
		return err
	}

	return nil
}

func (m *VirtualMachineReportElement) validateVirtualMachineID(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualMachineID) { // not required
		return nil
	}

	if err := validate.FormatOf("virtualMachineId", "body", "uuid", m.VirtualMachineID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this virtual machine report element based on the context it is used
func (m *VirtualMachineReportElement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOsType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineReportElement) contextValidateOsType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	if err := m.OsType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("osType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("osType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachineReportElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachineReportElement) UnmarshalBinary(b []byte) error {
	var res VirtualMachineReportElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
