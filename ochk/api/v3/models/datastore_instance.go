// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatastoreInstance datastore instance
//
// swagger:model DatastoreInstance
type DatastoreInstance struct {

	// capacity
	Capacity int64 `json:"capacity,omitempty"`

	// datastore Id
	// Format: uuid
	DatastoreID strfmt.UUID `json:"datastoreId,omitempty"`

	// datastore name
	DatastoreName string `json:"datastoreName,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// free space
	FreeSpace int64 `json:"freeSpace,omitempty"`

	// max virtual disk capacity
	MaxVirtualDiskCapacity int64 `json:"maxVirtualDiskCapacity,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// vra Id
	VraID string `json:"vraId,omitempty"`
}

// Validate validates this datastore instance
func (m *DatastoreInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastoreID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatastoreInstance) validateDatastoreID(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreID) { // not required
		return nil
	}

	if err := validate.FormatOf("datastoreId", "body", "uuid", m.DatastoreID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this datastore instance based on context it is used
func (m *DatastoreInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatastoreInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatastoreInstance) UnmarshalBinary(b []byte) error {
	var res DatastoreInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
