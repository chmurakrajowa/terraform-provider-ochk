// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OsType os type
//
// swagger:model OsType
type OsType string

func NewOsType(value OsType) *OsType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OsType.
func (m OsType) Pointer() *OsType {
	return &m
}

const (

	// OsTypeWINDOWS captures enum value "WINDOWS"
	OsTypeWINDOWS OsType = "WINDOWS"

	// OsTypeLINUX captures enum value "LINUX"
	OsTypeLINUX OsType = "LINUX"
)

// for schema
var osTypeEnum []interface{}

func init() {
	var res []OsType
	if err := json.Unmarshal([]byte(`["WINDOWS","LINUX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		osTypeEnum = append(osTypeEnum, v)
	}
}

func (m OsType) validateOsTypeEnum(path, location string, value OsType) error {
	if err := validate.EnumCase(path, location, value, osTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this os type
func (m OsType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOsTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this os type based on context it is used
func (m OsType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
