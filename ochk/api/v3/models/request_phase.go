// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RequestPhase request phase
//
// swagger:model RequestPhase
type RequestPhase string

func NewRequestPhase(value RequestPhase) *RequestPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RequestPhase.
func (m RequestPhase) Pointer() *RequestPhase {
	return &m
}

const (

	// RequestPhaseNEW captures enum value "NEW"
	RequestPhaseNEW RequestPhase = "NEW"

	// RequestPhasePROCESSING captures enum value "PROCESSING"
	RequestPhasePROCESSING RequestPhase = "PROCESSING"

	// RequestPhaseFINISHED captures enum value "FINISHED"
	RequestPhaseFINISHED RequestPhase = "FINISHED"

	// RequestPhaseCANCELLED captures enum value "CANCELLED"
	RequestPhaseCANCELLED RequestPhase = "CANCELLED"

	// RequestPhaseTIMEOUT captures enum value "TIMEOUT"
	RequestPhaseTIMEOUT RequestPhase = "TIMEOUT"

	// RequestPhaseQUEUEING captures enum value "QUEUEING"
	RequestPhaseQUEUEING RequestPhase = "QUEUEING"
)

// for schema
var requestPhaseEnum []interface{}

func init() {
	var res []RequestPhase
	if err := json.Unmarshal([]byte(`["NEW","PROCESSING","FINISHED","CANCELLED","TIMEOUT","QUEUEING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestPhaseEnum = append(requestPhaseEnum, v)
	}
}

func (m RequestPhase) validateRequestPhaseEnum(path, location string, value RequestPhase) error {
	if err := validate.EnumCase(path, location, value, requestPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this request phase
func (m RequestPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRequestPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this request phase based on context it is used
func (m RequestPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
