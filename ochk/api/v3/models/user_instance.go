// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserInstance user instance
//
// swagger:model UserInstance
type UserInstance struct {

	// api access
	APIAccess bool `json:"apiAccess,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// external Id
	// Format: uuid
	ExternalID strfmt.UUID `json:"externalId,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// groups
	Groups []*GroupInstance `json:"groups"`

	// image
	Image string `json:"image,omitempty"`

	// is Api key
	IsAPIKey bool `json:"isApiKey,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// locked
	Locked bool `json:"locked,omitempty"`

	// modification date
	// Format: date-time
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// platforms
	Platforms string `json:"platforms,omitempty"`

	// reset password
	ResetPassword bool `json:"resetPassword,omitempty"`

	// roles
	Roles string `json:"roles,omitempty"`

	// roles effective
	RolesEffective string `json:"rolesEffective,omitempty"`

	// scim user Id
	// Format: uuid
	ScimUserID strfmt.UUID `json:"scimUserId,omitempty"`

	// tfa enabled
	TfaEnabled bool `json:"tfaEnabled,omitempty"`

	// user Id
	// Format: uuid
	UserID strfmt.UUID `json:"userId,omitempty"`
}

// Validate validates this user instance
func (m *UserInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScimUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserInstance) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInstance) validateExternalID(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalID) { // not required
		return nil
	}

	if err := validate.FormatOf("externalId", "body", "uuid", m.ExternalID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInstance) validateGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserInstance) validateModificationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationDate", "body", "date-time", m.ModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInstance) validateScimUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.ScimUserID) { // not required
		return nil
	}

	if err := validate.FormatOf("scimUserId", "body", "uuid", m.ScimUserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInstance) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.FormatOf("userId", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user instance based on the context it is used
func (m *UserInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserInstance) contextValidateGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Groups); i++ {

		if m.Groups[i] != nil {

			if swag.IsZero(m.Groups[i]) { // not required
				return nil
			}

			if err := m.Groups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserInstance) UnmarshalBinary(b []byte) error {
	var res UserInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
