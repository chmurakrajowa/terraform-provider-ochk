// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MacType mac type
//
// swagger:model MacType
type MacType string

func NewMacType(value MacType) *MacType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MacType.
func (m MacType) Pointer() *MacType {
	return &m
}

const (

	// MacTypeAssigned captures enum value "assigned"
	MacTypeAssigned MacType = "assigned"

	// MacTypeGenerated captures enum value "generated"
	MacTypeGenerated MacType = "generated"

	// MacTypeManual captures enum value "manual"
	MacTypeManual MacType = "manual"
)

// for schema
var macTypeEnum []interface{}

func init() {
	var res []MacType
	if err := json.Unmarshal([]byte(`["assigned","generated","manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		macTypeEnum = append(macTypeEnum, v)
	}
}

func (m MacType) validateMacTypeEnum(path, location string, value MacType) error {
	if err := validate.EnumCase(path, location, value, macTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this mac type
func (m MacType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMacTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this mac type based on context it is used
func (m MacType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
