// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMachineImport virtual machine import
//
// swagger:model VirtualMachineImport
type VirtualMachineImport struct {

	// deployment Id
	// Format: uuid
	DeploymentID strfmt.UUID `json:"deploymentId,omitempty"`

	// external Id
	// Format: uuid
	ExternalID strfmt.UUID `json:"externalId,omitempty"`

	// os type Id
	OsTypeID int32 `json:"osTypeId,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// storage policy
	StoragePolicy StoragePolicy `json:"storagePolicy,omitempty"`
}

// Validate validates this virtual machine import
func (m *VirtualMachineImport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineImport) validateDeploymentID(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentID) { // not required
		return nil
	}

	if err := validate.FormatOf("deploymentId", "body", "uuid", m.DeploymentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineImport) validateExternalID(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalID) { // not required
		return nil
	}

	if err := validate.FormatOf("externalId", "body", "uuid", m.ExternalID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineImport) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineImport) validateStoragePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePolicy) { // not required
		return nil
	}

	if err := m.StoragePolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storagePolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storagePolicy")
		}
		return err
	}

	return nil
}

// ContextValidate validate this virtual machine import based on the context it is used
func (m *VirtualMachineImport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStoragePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineImport) contextValidateStoragePolicy(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.StoragePolicy) { // not required
		return nil
	}

	if err := m.StoragePolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storagePolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storagePolicy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachineImport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachineImport) UnmarshalBinary(b []byte) error {
	var res VirtualMachineImport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
