// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GuestToolsInstance guest tools instance
//
// swagger:model GuestToolsInstance
type GuestToolsInstance struct {

	// annotations
	Annotations string `json:"annotations,omitempty"`

	// host name
	HostName string `json:"hostName,omitempty"`

	// ip addresses
	IPAddresses string `json:"ipAddresses,omitempty"`

	// tools Id
	ToolsID int32 `json:"toolsId,omitempty"`

	// tools running status
	ToolsRunningStatus RunningStatus `json:"toolsRunningStatus,omitempty"`

	// tools status
	ToolsStatus Status `json:"toolsStatus,omitempty"`

	// tools version
	ToolsVersion string `json:"toolsVersion,omitempty"`
}

// Validate validates this guest tools instance
func (m *GuestToolsInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateToolsRunningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToolsStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestToolsInstance) validateToolsRunningStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ToolsRunningStatus) { // not required
		return nil
	}

	if err := m.ToolsRunningStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("toolsRunningStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("toolsRunningStatus")
		}
		return err
	}

	return nil
}

func (m *GuestToolsInstance) validateToolsStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ToolsStatus) { // not required
		return nil
	}

	if err := m.ToolsStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("toolsStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("toolsStatus")
		}
		return err
	}

	return nil
}

// ContextValidate validate this guest tools instance based on the context it is used
func (m *GuestToolsInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateToolsRunningStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToolsStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestToolsInstance) contextValidateToolsRunningStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ToolsRunningStatus) { // not required
		return nil
	}

	if err := m.ToolsRunningStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("toolsRunningStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("toolsRunningStatus")
		}
		return err
	}

	return nil
}

func (m *GuestToolsInstance) contextValidateToolsStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ToolsStatus) { // not required
		return nil
	}

	if err := m.ToolsStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("toolsStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("toolsStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GuestToolsInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GuestToolsInstance) UnmarshalBinary(b []byte) error {
	var res GuestToolsInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
