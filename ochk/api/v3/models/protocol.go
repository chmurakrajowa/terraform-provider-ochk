// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Protocol protocol
//
// swagger:model Protocol
type Protocol string

func NewProtocol(value Protocol) *Protocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Protocol.
func (m Protocol) Pointer() *Protocol {
	return &m
}

const (

	// ProtocolANY captures enum value "ANY"
	ProtocolANY Protocol = "ANY"

	// ProtocolICMP captures enum value "ICMP"
	ProtocolICMP Protocol = "ICMP"

	// ProtocolIGMP captures enum value "IGMP"
	ProtocolIGMP Protocol = "IGMP"

	// ProtocolIPIP captures enum value "IPIP"
	ProtocolIPIP Protocol = "IPIP"

	// ProtocolTCP captures enum value "TCP"
	ProtocolTCP Protocol = "TCP"

	// ProtocolEGP captures enum value "EGP"
	ProtocolEGP Protocol = "EGP"

	// ProtocolUDP captures enum value "UDP"
	ProtocolUDP Protocol = "UDP"

	// ProtocolDCCP captures enum value "DCCP"
	ProtocolDCCP Protocol = "DCCP"

	// ProtocolIPV6ENCAP captures enum value "IPV6_ENCAP"
	ProtocolIPV6ENCAP Protocol = "IPV6_ENCAP"

	// ProtocolIPV6ROUTE captures enum value "IPV6_ROUTE"
	ProtocolIPV6ROUTE Protocol = "IPV6_ROUTE"

	// ProtocolIPV6FRAG captures enum value "IPV6_FRAG"
	ProtocolIPV6FRAG Protocol = "IPV6_FRAG"

	// ProtocolRSVP captures enum value "RSVP"
	ProtocolRSVP Protocol = "RSVP"

	// ProtocolGRE captures enum value "GRE"
	ProtocolGRE Protocol = "GRE"

	// ProtocolESP captures enum value "ESP"
	ProtocolESP Protocol = "ESP"

	// ProtocolAH captures enum value "AH"
	ProtocolAH Protocol = "AH"

	// ProtocolIPV6ICMP captures enum value "IPV6_ICMP"
	ProtocolIPV6ICMP Protocol = "IPV6_ICMP"

	// ProtocolIPV6NONXT captures enum value "IPV6_NONXT"
	ProtocolIPV6NONXT Protocol = "IPV6_NONXT"

	// ProtocolIPV6OPTS captures enum value "IPV6_OPTS"
	ProtocolIPV6OPTS Protocol = "IPV6_OPTS"

	// ProtocolOSPF captures enum value "OSPF"
	ProtocolOSPF Protocol = "OSPF"

	// ProtocolVRRP captures enum value "VRRP"
	ProtocolVRRP Protocol = "VRRP"

	// ProtocolPGM captures enum value "PGM"
	ProtocolPGM Protocol = "PGM"

	// ProtocolSCTP captures enum value "SCTP"
	ProtocolSCTP Protocol = "SCTP"

	// ProtocolUDPLITE captures enum value "UDPLITE"
	ProtocolUDPLITE Protocol = "UDPLITE"
)

// for schema
var protocolEnum []interface{}

func init() {
	var res []Protocol
	if err := json.Unmarshal([]byte(`["ANY","ICMP","IGMP","IPIP","TCP","EGP","UDP","DCCP","IPV6_ENCAP","IPV6_ROUTE","IPV6_FRAG","RSVP","GRE","ESP","AH","IPV6_ICMP","IPV6_NONXT","IPV6_OPTS","OSPF","VRRP","PGM","SCTP","UDPLITE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protocolEnum = append(protocolEnum, v)
	}
}

func (m Protocol) validateProtocolEnum(path, location string, value Protocol) error {
	if err := validate.EnumCase(path, location, value, protocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this protocol
func (m Protocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this protocol based on context it is used
func (m Protocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
