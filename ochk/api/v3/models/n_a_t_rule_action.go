// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NATRuleAction n a t rule action
//
// swagger:model NATRuleAction
type NATRuleAction string

func NewNATRuleAction(value NATRuleAction) *NATRuleAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NATRuleAction.
func (m NATRuleAction) Pointer() *NATRuleAction {
	return &m
}

const (

	// NATRuleActionSNAT captures enum value "SNAT"
	NATRuleActionSNAT NATRuleAction = "SNAT"

	// NATRuleActionDNAT captures enum value "DNAT"
	NATRuleActionDNAT NATRuleAction = "DNAT"

	// NATRuleActionNAT64 captures enum value "NAT64"
	NATRuleActionNAT64 NATRuleAction = "NAT64"

	// NATRuleActionNODNAT captures enum value "NO_DNAT"
	NATRuleActionNODNAT NATRuleAction = "NO_DNAT"

	// NATRuleActionNOSNAT captures enum value "NO_SNAT"
	NATRuleActionNOSNAT NATRuleAction = "NO_SNAT"

	// NATRuleActionREFLEXIVE captures enum value "REFLEXIVE"
	NATRuleActionREFLEXIVE NATRuleAction = "REFLEXIVE"
)

// for schema
var nATRuleActionEnum []interface{}

func init() {
	var res []NATRuleAction
	if err := json.Unmarshal([]byte(`["SNAT","DNAT","NAT64","NO_DNAT","NO_SNAT","REFLEXIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nATRuleActionEnum = append(nATRuleActionEnum, v)
	}
}

func (m NATRuleAction) validateNATRuleActionEnum(path, location string, value NATRuleAction) error {
	if err := validate.EnumCase(path, location, value, nATRuleActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this n a t rule action
func (m NATRuleAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNATRuleActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this n a t rule action based on context it is used
func (m NATRuleAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
